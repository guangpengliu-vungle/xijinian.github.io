<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Thrift 入门</title>
    <url>/2019/04/24/Thrift-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><h4 id="写-Thrift-文件"><a href="#写-Thrift-文件" class="headerlink" title="写 Thrift 文件"></a>写 Thrift 文件</h4><p>举个例子：<code>Hello.thrift</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace java xyz.xijinian.service</span><br><span class="line">service HelloService &#123;</span><br><span class="line">    string hello (1 : string userName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>使用 Thrift 工具编译 <code>Hello.thrift</code>，就会生成相应的 <code>Hello.java</code> 文件。该文件包含了在 <code>Hello.thrift</code> 文件中描述的服务 <strong>Hello 的接口定义，即 <code>Hello.Iface</code> 接口</strong>，以及服务调用的底层通信细节，包括<strong>客户端的调用逻辑 <code>Hello.Client</code></strong> 以及<strong>服务器端的处理逻辑 <code>Hello.Processor</code></strong>，用于构建客户端和服务器端的功能。</p>
<p>在 IDEA 中，编译 thrift 文件仍然需要操作系统中软件的支持，然后在 IDEA 的 Project Structure 里面的 Facets 添加 Thrift 并指定 Output path，这样就可以直接在 .thrift 文件上右键 <code>Recompile &#39;helloservice.thrift&#39;</code> 生成对应的代码。</p>
<h4 id="构建实现类"><a href="#构建实现类" class="headerlink" title="构建实现类"></a>构建实现类</h4><p>创建 <code>HelloServiceImpl.java</code> 文件实现 <code>Hello.Iface</code> 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.xijinian.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"><span class="keyword">import</span> xyz.xijinian.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span>.<span class="title">Iface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String userName)</span> <span class="keyword">throws</span> TException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello!"</span> + userName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><p>创建服务器端实现代码，将 <code>HelloServiceImpl</code> 作为具体的处理器传递给 Thrift 服务器：</p>
<p><code>HelloServiceServer.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.xijinian.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TBinaryProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.THsHaServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TSimpleServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TServerSocket;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> xyz.xijinian.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> xyz.xijinian.service.impl.HelloServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(SimpleServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 传输层</span></span><br><span class="line">        TServerSocket serverSocket = <span class="keyword">new</span> TServerSocket(<span class="number">26850</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 协议层</span></span><br><span class="line">        TBinaryProtocol.Factory protocolFactory = <span class="keyword">new</span> TBinaryProtocol.Factory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理层</span></span><br><span class="line">        HelloService.Processor processor =</span><br><span class="line">                <span class="keyword">new</span> HelloService.Processor&lt;HelloService.Iface&gt;(<span class="keyword">new</span> HelloServiceImpl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务层</span></span><br><span class="line">        TSimpleServer.Args tArgs = <span class="keyword">new</span> TSimpleServer.Args(serverSocket);</span><br><span class="line">        tArgs.processor(processor);</span><br><span class="line">        tArgs.protocolFactory(protocolFactory);</span><br><span class="line">        TServer tServer = <span class="keyword">new</span> TSimpleServer(tArgs);</span><br><span class="line">        logger.info(<span class="string">"Running Simple Server"</span>);</span><br><span class="line">        tServer.serve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><p><code>HelloServiceClient.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.xijinian.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TBinaryProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSocket;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TTransport;</span><br><span class="line"><span class="keyword">import</span> xyz.xijinian.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TTransport transport = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 传输层</span></span><br><span class="line">            transport = <span class="keyword">new</span> TSocket(<span class="string">"localhost"</span>, <span class="number">26850</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 协议层</span></span><br><span class="line">            TProtocol protocol = <span class="keyword">new</span> TBinaryProtocol(transport);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理层</span></span><br><span class="line">            HelloService.Client client = <span class="keyword">new</span> HelloService.Client(protocol);</span><br><span class="line"></span><br><span class="line">            transport.open();</span><br><span class="line">            String words = client.hello(<span class="string">"年年"</span>);</span><br><span class="line">            System.out.println(words);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != transport) transport.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul>
<li><code>bool</code></li>
<li><code>byte</code></li>
<li><code>i16</code></li>
<li><code>i32</code></li>
<li><code>i64</code></li>
<li><code>double</code></li>
<li><code>string</code></li>
<li><code>binary</code></li>
</ul>
<h4 id="结构体类型"><a href="#结构体类型" class="headerlink" title="结构体类型"></a>结构体类型</h4><ul>
<li><code>struct</code></li>
</ul>
<h4 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h4><ul>
<li><code>list</code></li>
<li><code>map</code></li>
<li><code>set</code></li>
</ul>
<h4 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h4><ul>
<li><code>exception</code></li>
</ul>
<h4 id="服务类型"><a href="#服务类型" class="headerlink" title="服务类型"></a>服务类型</h4><ul>
<li><code>service</code></li>
</ul>
<h3 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a>架构分层</h3><p><code>Thrift</code> 分层<strong>从下向上</strong>分别为：<strong>传输层</strong>（<code>Transport Layer</code>）、<strong>协议层</strong>（<code>Protocol Layer</code>）、<strong>处理层</strong>（<code>Processor Layer</code>）和<strong>服务层</strong>（<code>Server Layer</code>）。</p>
<ul>
<li><strong>传输层</strong>（<code>Transport Layer</code>）：传输层负责直接从网络中<strong>读取</strong>和<strong>写入</strong>数据，它定义了具体的<strong>网络传输协议</strong>；比如说<code>TCP/IP</code>传输等。</li>
<li><strong>协议层</strong>（<code>Protocol Layer</code>）：协议层定义了<strong>数据传输格式</strong>，负责网络传输数据的<strong>序列化</strong>和<strong>反序列化</strong>；比如说<code>JSON</code>、<code>XML</code>、<strong>二进制数据</strong>等。</li>
<li><strong>处理层</strong>（<code>Processor Layer</code>）：处理层是由具体的<code>IDL</code>（<strong>接口描述语言</strong>）生成的，封装了具体的<strong>底层网络传输</strong>和<strong>序列化方式</strong>，并委托给用户实现的<code>Handler</code>进行处理。</li>
<li><strong>服务层</strong>（<code>Server Layer</code>）具体的<strong>网络线程/IO服务模型</strong>，形成最终的服务。</li>
</ul>
<h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ol>
<li><p>客户端</p>
<ul>
<li><code>TSocket</code>：使用<strong>阻塞式</strong><code>I/O</code>进行传输，是最常见的模式</li>
<li><code>TNonblockingTransport</code>：使用<strong>非阻塞方式</strong>，用于构建<strong>异步客户端</strong></li>
<li><code>TFramedTransport</code>：使用<strong>非阻塞方式</strong>，按<strong>块的大小</strong>进行传输，类似于 Java 中的 <code>NIO</code></li>
<li>…（天知道怎么有那么多，类图画不下了，想找的自己去源码里看看吧…）</li>
</ul>
</li>
<li><p>服务端</p>
<ul>
<li><code>TServerSocket</code></li>
<li><code>TNonblockingServerTransport</code></li>
<li><code>TNonblockingServerSocket</code></li>
</ul>
<p><img src="https://i.loli.net/2020/03/31/ubSGetYlgi5FhXr.jpg" alt="TServerTansport"></p>
</li>
</ol>
<h4 id="协议层"><a href="#协议层" class="headerlink" title="协议层"></a>协议层</h4><ul>
<li><code>TBinaryProtocol</code>：<strong>二进制</strong>编码格式进行数据传输</li>
<li><code>TCompactProtocol</code>：<strong>高效率</strong>的、<strong>密集</strong>的<strong>二进制</strong>编码格式进行数据传输</li>
<li><code>TJSONProtocol</code>： 使用 <code>JSON</code> <strong>文本</strong>的数据编码协议进行数据传输</li>
<li><code>TSimpleJSONProtocol</code>：只提供 <code>JSON</code> <strong>只写</strong>的协议，适用于通过<strong>脚本语言解析</strong></li>
</ul>
<p><img src="https://i.loli.net/2020/03/31/A3ewRICKSWZqVHJ.jpg" alt="TProtocol"></p>
<h4 id="处理层"><a href="#处理层" class="headerlink" title="处理层"></a>处理层</h4><p>直接由 .thrift 文件生成，然后用一个实现类实现生成类的 <code>.Iface</code> 接口。</p>
<p>在服务端构造 <code>HelloService.Processor</code>，把刚刚生成的实现类传入；在客户端构造 <code>HelloService.Client</code>，把协议传入，然后调用远程方法就完事了。</p>
<h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><ul>
<li><code>TSimpleServer</code>：<strong>单线程</strong>服务器端，使用标准的<strong>阻塞式</strong> <code>IO</code></li>
<li><code>TThreadPoolServer</code>：<strong>多线程</strong>服务器端，使用标准的<strong>阻塞式</strong> <code>IO</code></li>
<li><code>TNonblockingServer</code>：<strong>单线程</strong>服务器端，使用<strong>非阻塞式</strong> <code>IO</code></li>
<li><code>THsHaServer</code>：<strong>半同步半异步</strong>服务器端，基于<strong>非阻塞式</strong> <code>IO</code> 读写和<strong>多线程</strong>工作任务处理</li>
<li><code>TThreadedSelectorServer</code>：<strong>多线程选择器</strong>服务器端，对 <code>THsHaServer</code> 在<strong>异步</strong> <code>IO</code> 模型上进行增强</li>
</ul>
<h3 id="服务层模型"><a href="#服务层模型" class="headerlink" title="服务层模型"></a>服务层模型</h3><p>在架构分层中我们介绍了服务层，它们之间的关系如下：</p>
<p><img src="https://i.loli.net/2020/03/31/ERxgZqh6dIQPWyJ.jpg" alt="TServer"></p>
<h4 id="说说-TServer"><a href="#说说-TServer" class="headerlink" title="说说 TServer"></a>说说 TServer</h4><p><code>TServer</code> 定义了静态内部类 <code>Args</code>，<code>Args</code> 继承自抽象类 <code>AbstractServerArgs</code>，<code>AbstractServerArgs</code> 采用了建造者模式，向 <code>TServer</code> 提供各种工厂。</p>
<p><code>TServer</code> 的三个重要方法：<code>serve()</code>、<code>stop()</code> 和 <code>isServing()</code>。<code>serve()</code> 用于启动服务，<code>stop()</code> 用于关闭服务，<code>isServing()</code> 用于检测服务的起停状态。<code>TServer</code> 的<strong>不同实现类</strong>的启动方式和运转机制不一样，因此 <code>serve()</code> 定义为抽象方法。不是所有的服务都需要优雅的退出，因此 <code>stop()</code> 方法没有被定义为抽象。</p>
<h4 id="TSimpleServer"><a href="#TSimpleServer" class="headerlink" title="TSimpleServer"></a>TSimpleServer</h4><p>上面的例子就是用的 TSimpleServer，它一次只能接收和处理一个 <code>socket</code> 连接，只适用于演示，效率很低。</p>
<p>它的具体 <code>serve()</code> 流程大致如下：</p>
<ul>
<li>设置 <code>TServerSocket</code> 的 <code>listen()</code> 方法启动连接<strong>监听</strong></li>
<li>以<strong>阻塞</strong>的方式接受客户端地连接请求，每进入一个<strong>连接</strong>即为其创建一个通道 <code>TTransport</code> 对象</li>
<li>为客户端创建<strong>处理器对象</strong>、<strong>输入传输通道对象</strong>、<strong>输出传输通道对象</strong>、<strong>输入协议对象</strong>和<strong>输出协议对象</strong></li>
<li>通过 <code>TServerEventHandler</code> 对象处理具体的业务请求</li>
</ul>
<h4 id="ThreadPoolServer"><a href="#ThreadPoolServer" class="headerlink" title="ThreadPoolServer"></a>ThreadPoolServer</h4><p><code>TThreadPoolServer</code> 模式采用<strong>阻塞</strong> <code>socket</code> 方式工作，主线程负责<strong>阻塞式</strong>监听是否有新 <code>socket</code> 到来，具体的业务处理交由一个<strong>线程池</strong>来处理 — One Thread Per Connection。</p>
<h4 id="TNonblockingServer"><a href="#TNonblockingServer" class="headerlink" title="TNonblockingServer"></a>TNonblockingServer</h4><p><code>TNonblockingServer</code> 要求底层的传输通道必须使用 <code>TFramedTransport</code>。</p>
<h4 id="THsHaServer"><a href="#THsHaServer" class="headerlink" title="THsHaServer"></a>THsHaServer</h4><p><code>THsHaServer</code> 和 <code>TNonblockingServer</code> 一样，要求底层的传输通道必须使用 <code>TFramedTransport</code>。</p>
<h4 id="TThreadedSelectorServer"><a href="#TThreadedSelectorServer" class="headerlink" title="TThreadedSelectorServer"></a>TThreadedSelectorServer</h4><p>使用非阻塞式 <code>IO</code> 时，服务端和客户端都需要指定数据传输方式为 <code>TFramedTransport</code>。</p>
]]></content>
      <tags>
        <tag>Java 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocol Buffers 3</title>
    <url>/2019/04/23/Protocol-Buffers-3/</url>
    <content><![CDATA[<h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><h4 id="目录规约"><a href="#目录规约" class="headerlink" title="目录规约"></a>目录规约</h4><p>在 Maven 工程中，我们建立 thrift 文件夹一般建立在 src/java 下面，而 PB3 不是这样，它一般需要直接把 proto 文件夹放在 src 目录下，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   │   ├── thrift</span><br><span class="line">│   │   │   │   └── helloservice.thrift</span><br><span class="line">│   │   │   └── xyz</span><br><span class="line">│   │   │       └── xijinian</span><br><span class="line">│   │   │           ├── client</span><br><span class="line">│   │   │           │   └── SimpleClient.java</span><br><span class="line">│   │   │           ├── server</span><br><span class="line">│   │   │           │   └── SimpleServer.java</span><br><span class="line">│   │   │           ├── service</span><br><span class="line">│   │   │           │   ├── HelloService.java</span><br><span class="line">│   │   │           │   └── impl</span><br><span class="line">│   │   │           │       └── HelloServiceImpl.java</span><br><span class="line">│   │   │           └── testpb3</span><br><span class="line">│   │   │               └── TestProtobuf.java</span><br><span class="line">│   │   ├── proto</span><br><span class="line">│   │   │   └── studentutils.proto</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   │       └── log4j.properties</span><br><span class="line">│   └── test</span><br><span class="line">│       └── java</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="配置-Maven-插件"><a href="#配置-Maven-插件" class="headerlink" title="配置 Maven 插件"></a>配置 Maven 插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.7.1:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span>io.grpc:protoc-gen-grpc-java:1.20.0:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="建立-proto-文件"><a href="#建立-proto-文件" class="headerlink" title="建立 .proto 文件"></a>建立 .proto 文件</h4><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/any.proto"</span>;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"xyz.xijinian.protobuf"</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"StudentUtils"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">        MAN = <span class="number">0</span>;</span><br><span class="line">        WOMAN = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span> </span>&#123;</span><br><span class="line">        MOBILE = <span class="number">0</span>;</span><br><span class="line">        HOME = <span class="number">1</span>;</span><br><span class="line">        WORK = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">message</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> number = <span class="number">1</span>;</span><br><span class="line">        PhoneType type = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line">    Sex sex = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">repeated</span> Phone phone = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">repeated</span> google.protobuf.Any any = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">int32</span> pid = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><p>配置完 Maven 插件后，在 IDEA 中点击 <code>protobuf:compile</code>，将会自动生成代码在“generated-sources/protobuf”目录。</p>
<h4 id="构建测试类"><a href="#构建测试类" class="headerlink" title="构建测试类"></a>构建测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.xijinian.testpb3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.Any;</span><br><span class="line"><span class="keyword">import</span> xyz.xijinian.protobuf.StudentUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProtobuf</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StudentUtils.Student.Builder studentBuilder = StudentUtils.Student.newBuilder();</span><br><span class="line">        studentBuilder.setId(<span class="number">1</span>);</span><br><span class="line">        studentBuilder.setName(<span class="string">"年年"</span>);</span><br><span class="line">        studentBuilder.setEmail(<span class="string">"xijinian@163.com"</span>);</span><br><span class="line">        studentBuilder.setSex(StudentUtils.Student.Sex.MAN);</span><br><span class="line">        StudentUtils.Student.Phone.Builder phoneBuilder = </span><br><span class="line">                StudentUtils.Student.Phone.newBuilder();</span><br><span class="line">        phoneBuilder.setNumber(<span class="string">"18624350223"</span>);</span><br><span class="line">        phoneBuilder.setType(StudentUtils.Student.PhoneType.HOME);</span><br><span class="line">        StudentUtils.Student.Phone phone1 = phoneBuilder.build();</span><br><span class="line">        studentBuilder.addPhone(phone1);</span><br><span class="line">        StudentUtils.Student.Phone phone2 = StudentUtils.Student.Phone.newBuilder()</span><br><span class="line">                        .setNumber(<span class="string">"7758258"</span>)</span><br><span class="line">                        .setType(StudentUtils.Student.PhoneType.MOBILE).build();</span><br><span class="line">        studentBuilder.addPhone(phone2);</span><br><span class="line">        Any.Builder any = Any.newBuilder();</span><br><span class="line">        any.setTypeUrl(<span class="string">"xyz.xijinian"</span>);</span><br><span class="line">        studentBuilder.addAny(any);</span><br><span class="line">        studentBuilder.setPid(<span class="number">65536</span>);</span><br><span class="line">        StudentUtils.Student student1 = studentBuilder.build();</span><br><span class="line">        <span class="keyword">byte</span>[] student1Bytes = student1.toByteArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假如 student1Bytes 通过传输，下面的代码(假装是接收方)接到了该数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StudentUtils.Student student2 = StudentUtils.Student.parseFrom(student1Bytes);</span><br><span class="line">            System.out.println(<span class="string">"学生ID："</span> + student2.getId());</span><br><span class="line">            System.out.println(<span class="string">"姓名："</span> + student2.getName());</span><br><span class="line">            System.out.println(<span class="string">"性别："</span> + (student2.getSexValue() == <span class="number">0</span> ? <span class="string">"男"</span> : <span class="string">"女"</span>));</span><br><span class="line">            System.out.println(<span class="string">"邮箱："</span> + student2.getEmail());</span><br><span class="line">            List&lt;StudentUtils.Student.Phone&gt; phoneList = student2.getPhoneList();</span><br><span class="line">            <span class="keyword">for</span> (StudentUtils.Student.Phone phone : phoneList) &#123;</span><br><span class="line">                System.out.println(phone.getType().toString() + <span class="string">"电话："</span> + phone.getNumber());</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Any&gt; anyList = student2.getAnyList();</span><br><span class="line">            <span class="keyword">for</span> (Any anyIndex : anyList) &#123;</span><br><span class="line">                System.out.println(<span class="string">"any："</span> + anyIndex.getTypeUrl());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"pid："</span> + student2.getPid());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><table>
<thead>
<tr>
<th>.proto Type</th>
<th align="center">Java Type</th>
</tr>
</thead>
<tbody><tr>
<td>double</td>
<td align="center">double</td>
</tr>
<tr>
<td>float</td>
<td align="center">float</td>
</tr>
<tr>
<td>int32</td>
<td align="center">int</td>
</tr>
<tr>
<td>int64</td>
<td align="center">long</td>
</tr>
<tr>
<td>bool</td>
<td align="center">boolean</td>
</tr>
<tr>
<td>string</td>
<td align="center">String</td>
</tr>
<tr>
<td>bytes</td>
<td align="center">ByteString</td>
</tr>
</tbody></table>
<h4 id="文件头内容"><a href="#文件头内容" class="headerlink" title="文件头内容"></a>文件头内容</h4><p>名字就能说明内涵：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/any.proto"</span>;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"xyz.xijinian.protobuf"</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"StudentUtils"</span>;</span><br></pre></td></tr></table></figure>

<h4 id="序列化设定"><a href="#序列化设定" class="headerlink" title="序列化设定"></a>序列化设定</h4><p>偏向解析速度还是文件大小？</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> optimize_for = SPEED; <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> optimize_for = CODE_SIZE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器依赖于运行时核心类库来生成代码（即采用 libprotobuf-lite 替代 libprotobuf）。</span></span><br><span class="line"><span class="comment">// 这种核心类库由于忽略了一些描述符及反射，要比全类库小得多。</span></span><br><span class="line"><span class="comment">// 这种模式经常在移动手机平台应用多一些，编译器采用该模式产生的方法实现与SPEED模式不相上下。</span></span><br><span class="line"><span class="keyword">option</span> optimize_for = LITE_RUNTIME;</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>//</code> 注释风格</p>
<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>默认情况下你只能使用直接导入的 .proto 文件中的定义，你可以给它加个 <code>public</code> 标签，这样被导入文件中的被导入文件中的内容也可以被文件直接导入啦。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> public <span class="string">"new.proto"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"other.proto"</span>;</span><br></pre></td></tr></table></figure>

<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举的第一个字段必须是 0 值，我们用这个 0 值作为默认值（为了兼容 proto2 语义）。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span> </span>&#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="保留标识符"><a href="#保留标识符" class="headerlink" title="保留标识符"></a>保留标识符</h4><p>在某个 .proto 文件中，如果你删除了或者注释掉了某些字段，然后其他人在这个 .proto 文件中加上了别的字段（并且覆盖了你注释/删除字段的 <code>field_number</code>）— 这时如果你使用旧版本加载此 .proto 文件将会导致严重的问题，包括数据损坏、隐私错误等等。</p>
<p>解决办法是将字段指定 <code>reserved</code> 标识符，编译器会警告未来尝试使用这些字段对应的 <code>field_number</code> 的用户。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>;</span><br><span class="line">    reserved <span class="string">"foo"</span>, <span class="string">"bar"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分配-field-number"><a href="#分配-field-number" class="headerlink" title="分配  field_number"></a>分配  field_number</h4><p>对于 message 来说，最小的标识号可以从 1 开始，最大到 536,870,911（不可以使用其中的[19000,19999]）。[1,15] 之内的标识号在编码的时候会占用一个字节，[16,2047] 之内的标识号则占用两个字节。所以应该为那些频繁出现的消息元素保留 [1,15] 之内的标识号。<strong>切记</strong>：要为将来有可能添加的、频繁出现的标识号预留一些标识号。</p>
<h4 id="Sub-Builders"><a href="#Sub-Builders" class="headerlink" title="Sub Builders"></a>Sub Builders</h4><p>看下面这个 proto 文件：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">int32</span> val = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">optional</span> Foo foo = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Baz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">optional</span> Bar bar = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你已经有了一个 Baz 消息，并且想修改深度内嵌的在 Foo 中的 val，你可以这么做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">baz = baz.toBuilder().setBar(</span><br><span class="line">      baz.getBar().toBuilder().setFoo(</span><br><span class="line">      baz.getBar().getFoo().toBuilder().setVal(<span class="number">10</span>)</span><br><span class="line">      .build()).build()).build();</span><br></pre></td></tr></table></figure>

<p>不过你更可以这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">baz = baz.toBuilder().getBarBuilder().getFooBuilder().setVal(<span class="number">10</span>).build();</span><br></pre></td></tr></table></figure>

<h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><p>.proto 文件：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/any.proto"</span>;</span><br><span class="line"><span class="keyword">package</span> com.zhys.protobufdemo.protobean;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">LoginRequest</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> username = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> pwd = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HttpResultResponse</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int32</span> code = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="number">2</span>;</span><br><span class="line">    google.protobuf.Any data = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">LoginResult</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> username = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> phone = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个简单的示例 Servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.xijinian.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.Any;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/login.action"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求登陆了"</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        LoginRequestOuterClass.LoginRequest loginRequest = </span><br><span class="line">                LoginRequestOuterClass.LoginRequest.parseFrom(request.getInputStream());</span><br><span class="line">        LoginRequestOuterClass.HttpResultResponse.Builder builder = </span><br><span class="line">                LoginRequestOuterClass.HttpResultResponse.newBuilder();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(loginRequest.getUsername()) &amp;&amp; </span><br><span class="line">                    <span class="string">"132"</span>.equals(loginRequest.getPwd())) &#123;</span><br><span class="line">            builder.setCode(<span class="number">0</span>);</span><br><span class="line">            builder.setMsg(<span class="string">"登陆成功"</span>);</span><br><span class="line">            LoginRequestOuterClass.LoginResult loginResult = </span><br><span class="line">                    LoginRequestOuterClass.LoginResult.newBuilder()</span><br><span class="line">                            .setPhone(<span class="string">"15519099928"</span>).setUsername(<span class="string">"大力哥的博客"</span>).build();</span><br><span class="line">            builder.setData(Any.pack(loginResult));</span><br><span class="line">            System.out.println(<span class="string">"登陆成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder.setCode(<span class="number">1001</span>);</span><br><span class="line">            builder.setMsg(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            System.out.println(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.build().writeTo(response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App 端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (conn.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    <span class="keyword">final</span> LoginRequestOuterClass.HttpResultResponse loginResponse = </span><br><span class="line">            LoginRequestOuterClass.HttpResultResponse.parseFrom(conn.getInputStream());</span><br><span class="line">    <span class="keyword">if</span> (loginResponse.getCode() == <span class="number">0</span>) &#123;<span class="comment">//登陆成功之后才会有登陆结果</span></span><br><span class="line">        LoginRequestOuterClass.LoginResult loginResult = </span><br><span class="line">                loginResponse.getData().unpack(LoginRequestOuterClass.LoginResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ELog.e(<span class="string">"登陆结果：code = "</span> + loginResponse.getCode() + </span><br><span class="line">               <span class="string">"\tmsg = "</span> + loginResponse.getMsg() + </span><br><span class="line">               <span class="string">"\tusername = "</span> + loginResult.getUsername() + </span><br><span class="line">               <span class="string">"\tphone = "</span> + loginResult.getPhone());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ELog.e(<span class="string">"登陆失败信息：code = "</span> + loginResponse.getCode() + </span><br><span class="line">               <span class="string">"\tmsg = "</span> + loginResponse.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a>OneOf</h4><p>.proto 文件：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">oneof</span> oneof_name &#123;</span><br><span class="line">    <span class="built_in">int32</span> foo_int = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">string</span> foo_string = <span class="number">9</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在产生的代码中，oneof 字段拥有同样的 getters 和 setters， 就像正常的可选字段一样，有一个 <code>getOneofNameCase()</code> 方法来检查到底那个字段被设置（因为只能设置一个），还有一些其他的 API，详细请见官方文档。</p>
]]></content>
      <tags>
        <tag>Java 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 高级 I/O</title>
    <url>/2019/01/11/Java-%E9%AB%98%E7%BA%A7-IO/</url>
    <content><![CDATA[<h3 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a><code>RandomAccessFile</code></h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomAccessFile</span><span class="params">(String name, String mode)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomAccessFile</span><span class="params">(File file, String mode)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure>

<p><code>mode</code> 表示打开模式，可以有四个取值：</p>
<ul>
<li>“<code>r</code>“: 只用于读</li>
<li>“<code>rw</code>“: 用于读和写</li>
<li>“<code>rws</code>“: 和 “<code>rw</code>“ 一样，用于读和写，另外，它要求文件内容和元数据的任何更新都同步到设备上</li>
<li>“<code>rwd</code>“: 和 “<code>rw</code>“ 一样，用于读和写，另外，它要求文件内容的任何更新都同步到设备上，和 “<code>rws</code>“ 的区别是，元数据的更新不要求同步<a id="more"></a></li>
</ul>
<h4 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h4><p><code>RandomAccessFile</code> 虽然不是 <code>InputStream</code>/<code>OutputStream</code> 的子类，但它也有类似于读写字节流的方法，另外，它还实现了 DataInput/<code>DataOutput</code> 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读一个字节，取最低八位，0到255</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">readDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">readUTF</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeUTF</span><span class="params">(String str)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<h4 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它们可以确保读够期望的长度，如果到了文件结尾也没读够，它们会抛出 EOFException 异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">readFully</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">readFully</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前文件指针</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">getFilePointer</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="comment">// 更改当前文件指针到pos</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">seek</span><span class="params">(<span class="keyword">long</span> pos)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<h4 id="一个简易的数据库实现"><a href="#一个简易的数据库实现" class="headerlink" title="一个简易的数据库实现"></a>一个简易的数据库实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_DATA_LENGTH = <span class="number">1020</span>;</span><br><span class="line">    <span class="comment">// 补白字节</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] ZERO_BYTES = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_DATA_LENGTH];</span><br><span class="line">    <span class="comment">// 数据文件后缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_SUFFIX = <span class="string">".data"</span>;</span><br><span class="line">    <span class="comment">// 元数据文件后缀，包括索引和空白空间数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String META_SUFFIX = <span class="string">".meta"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引信息，键-&gt;值在.data文件中的位置</span></span><br><span class="line">    Map&lt;String, Long&gt; indexMap;</span><br><span class="line">    <span class="comment">// 空白空间，值为在.data文件中的位置</span></span><br><span class="line">    Queue&lt;Long&gt; gaps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 值数据文件</span></span><br><span class="line">    RandomAccessFile db;</span><br><span class="line">    <span class="comment">// 元数据文件</span></span><br><span class="line">    File metaFile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicDB</span><span class="params">(String path, String name)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File dataFile = <span class="keyword">new</span> File(path + name + DATA_SUFFIX);</span><br><span class="line">        metaFile = <span class="keyword">new</span> File(path + name + META_SUFFIX);</span><br><span class="line"></span><br><span class="line">        db = <span class="keyword">new</span> RandomAccessFile(dataFile, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (metaFile.exists()) &#123;</span><br><span class="line">            loadMeta();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            gaps = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadMeta</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DataInputStream in = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(metaFile)));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loadIndex(in);</span><br><span class="line">            loadGaps(in);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadIndex</span><span class="params">(DataInputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = in.readInt();</span><br><span class="line">        indexMap = <span class="keyword">new</span> HashMap&lt;String, Long&gt;((<span class="keyword">int</span>) (size / <span class="number">0.75f</span>) + <span class="number">1</span>, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String key = in.readUTF();</span><br><span class="line">            <span class="keyword">long</span> index = in.readLong();</span><br><span class="line">            indexMap.put(key, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveIndex</span><span class="params">(DataOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeInt(indexMap.size());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Long&gt; entry : indexMap.entrySet()) &#123;</span><br><span class="line">            out.writeUTF(entry.getKey());</span><br><span class="line">            out.writeLong(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadGaps</span><span class="params">(DataInputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = in.readInt();</span><br><span class="line">        gaps = <span class="keyword">new</span> ArrayDeque&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> index = in.readLong();</span><br><span class="line">            gaps.add(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveGaps</span><span class="params">(DataOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeInt(gaps.size());</span><br><span class="line">        <span class="keyword">for</span> (Long pos : gaps) &#123;</span><br><span class="line">            out.writeLong(pos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveMeta</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DataOutputStream out = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> BufferedOutputStream(</span><br><span class="line">                <span class="keyword">new</span> FileOutputStream(metaFile)));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            saveIndex(out);</span><br><span class="line">            saveGaps(out);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getData(<span class="keyword">long</span> pos) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        db.seek(pos);</span><br><span class="line">        <span class="keyword">int</span> length = db.readInt();</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        db.readFully(data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeData</span><span class="params">(<span class="keyword">long</span> pos, <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.length &gt; MAX_DATA_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"maximum allowed length is "</span></span><br><span class="line">                    + MAX_DATA_LENGTH + <span class="string">", data length is "</span> + data.length);</span><br><span class="line">        &#125;</span><br><span class="line">        db.seek(pos);</span><br><span class="line">        db.writeInt(data.length);</span><br><span class="line">        db.write(data);</span><br><span class="line">        db.write(ZERO_BYTES, <span class="number">0</span>, MAX_DATA_LENGTH - data.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">nextAvailablePos</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!gaps.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> gaps.poll();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> db.length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, <span class="keyword">byte</span>[] value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Long index = indexMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="keyword">null</span>) &#123;</span><br><span class="line">            index = nextAvailablePos();</span><br><span class="line">            indexMap.put(key, index);</span><br><span class="line">        &#125;</span><br><span class="line">        writeData(index, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] get(String key) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Long index = indexMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getData(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Long index = indexMap.remove(key);</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="keyword">null</span>) &#123;</span><br><span class="line">            gaps.offer(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        saveMeta();</span><br><span class="line">        db.getFD().sync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        flush();</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>所谓内存映射文件，就是将文件映射到内存，文件对应于内存中的一个字节数组，对文件的操作变为对这个字节数组的操作，而字节数组的操作直接映射到文件上。这种映射可以是映射文件全部区域，也可以是只映射一部分区域。</p>
<p>不过，这种映射是操作系统提供的一种假象，文件一般不会马上加载到内存，操作系统只是记录下了这回事，当实际发生读写时，才会按需加载。操作系统一般是按页加载的，页可以理解为就是一块，页的大小与操作系统和硬件相关，典型的配置可能是 4K、8K 等，当操作系统发现读写区域不在内存时，就会加载该区域对应的一个页到内存。</p>
<p>内存映射文件也有局限性，比如，它不太适合处理小文件，它是按页分配内存的，对于小文件，会浪费空间，另外，映射文件要消耗一定的操作系统资源，初始化比较慢。</p>
<h4 id="构建-MappedByteBuffer"><a href="#构建-MappedByteBuffer" class="headerlink" title="构建 MappedByteBuffer"></a>构建 <code>MappedByteBuffer</code></h4><p><code>MappedByteBuffer</code> 是 <code>ByteBuffer</code> 的子类，而 <code>ByteBuffer</code> 是 <code>Buffer</code> 的子类。<code>ByteBuffer</code> 和 <code>Buffer</code> 不只是给内存映射文件提供的，它们是 Java NIO 中操作数据的一种方式，用于很多地方。</p>
<p>下面举例如何构建 <code>MappedByteBuffer</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内存映射文件需要通过 FileInputStream/FileOutputStream 或 RandomAccessFile</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FileChannel <span class="title">getChannel</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> MappedByteBuffer 对象代表内存中的字节数组</span></span><br><span class="line"><span class="comment"> map 有三个参数，mode 表示映射模式，positon 表示映射的起始位置，size 表示长度 </span></span><br><span class="line"><span class="comment"> mode 受限于背后的流或 RandomAccessFile，它有三个取值：</span></span><br><span class="line"><span class="comment"> ① MapMode.READ_ONLY：只读</span></span><br><span class="line"><span class="comment"> ② MapMode.READ_WRITE：既读也写</span></span><br><span class="line"><span class="comment"> ③ MapMode.PRIVATE：私有模式，更改不反映到文件，也不被其他程序看到 </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MappedByteBuffer <span class="title">map</span><span class="params">(MapMode mode, <span class="keyword">long</span> position, <span class="keyword">long</span> size)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(<span class="string">"abc.dat"</span>, <span class="string">"rw"</span>)) &#123;</span><br><span class="line">    MappedByteBuffer buf = file.getChannel().map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, file.length());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ByteBuffer-常用接口"><a href="#ByteBuffer-常用接口" class="headerlink" title="ByteBuffer 常用接口"></a><code>ByteBuffer</code> 常用接口</h4><p><code>ByteBuffer</code> 可以简单理解为就是封装了一个字节数组，这个字节数组的长度是不可变的，在内存映射文件中，这个长度由 <code>map</code> 方法中的参数 <code>size</code> 决定。举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前读写位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 修改当前读写位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本框之内的方法在读写后，都会自动增加 position</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从当前位置获取一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 从当前位置拷贝 dst.length 长度的字节到dst</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从当前位置读取一个 int</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 从当前位置读取一个 double</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 将字节数组 src 写入当前位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将 long 类型的 value 写入当前位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putLong</span><span class="params">(<span class="keyword">long</span> value)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本框之内的方法在读写时，不会改变当前读写位置 position</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 index 处读取一个 int</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">// 从 index 处读取一个 double</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">// 在 index 处写入一个 double</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putDouble</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">double</span> value)</span></span>;</span><br><span class="line"><span class="comment">// 在 index 处写入一个 long</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putLong</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">long</span> value)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="MappedByteBuffer-方法"><a href="#MappedByteBuffer-方法" class="headerlink" title="MappedByteBuffer 方法"></a><code>MappedByteBuffer</code> 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查文件内容是否真实加载到了内存，这个值是一个参考值，不一定精确</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isLoaded</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 尽量将文件内容加载到内存</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> MappedByteBuffer <span class="title">load</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将对内存的修改强制同步到硬盘上</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> MappedByteBuffer <span class="title">force</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h4 id="一个简易的消息队列实现"><a href="#一个简易的消息队列实现" class="headerlink" title="一个简易的消息队列实现"></a>一个简易的消息队列实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 队列最多消息个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_MSG_NUM = <span class="number">1020</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息体最大长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_MSG_BODY_SIZE = <span class="number">1020</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每条消息占用的空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SIZE = MAX_MSG_BODY_SIZE + <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列消息体数据文件大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATA_FILE_SIZE = MAX_MSG_NUM * MSG_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列元数据文件大小 (head + tail)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> META_SIZE = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MappedByteBuffer dataBuf;</span><br><span class="line">    <span class="keyword">private</span> MappedByteBuffer metaBuf;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicQueue</span><span class="params">(String path, String queueName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.endsWith(File.separator)) &#123;</span><br><span class="line">            path += File.separator;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (RandomAccessFile dataFile = <span class="keyword">new</span> RandomAccessFile(path + queueName + <span class="string">".data"</span>, <span class="string">"rw"</span>); RandomAccessFile metaFile = <span class="keyword">new</span> RandomAccessFile(path + queueName + <span class="string">".meta"</span>, <span class="string">"rw"</span>)) &#123;</span><br><span class="line">            dataBuf = dataFile.getChannel().map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>,</span><br><span class="line">                    DATA_FILE_SIZE);</span><br><span class="line">            metaBuf = metaFile.getChannel().map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>,</span><br><span class="line">                    META_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> metaBuf.getInt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">head</span><span class="params">(<span class="keyword">int</span> newHead)</span> </span>&#123;</span><br><span class="line">        metaBuf.putInt(<span class="number">0</span>, newHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">tail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> metaBuf.getInt(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tail</span><span class="params">(<span class="keyword">int</span> newTail)</span> </span>&#123;</span><br><span class="line">        metaBuf.putInt(<span class="number">4</span>, newTail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head() == tail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((tail() + MSG_SIZE) % DATA_FILE_SIZE) == head();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.length &gt; MAX_MSG_BODY_SIZE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"msg size is "</span> + data.length</span><br><span class="line">                    + <span class="string">", while maximum allowed length is "</span> + MAX_MSG_BODY_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"queue is full"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tail = tail();</span><br><span class="line">        dataBuf.position(tail);</span><br><span class="line">        dataBuf.putInt(data.length);</span><br><span class="line">        dataBuf.put(data);</span><br><span class="line">        <span class="keyword">if</span> (tail + MSG_SIZE &gt;= DATA_FILE_SIZE) &#123;</span><br><span class="line">            tail(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail(tail + MSG_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] dequeue() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> head = head();</span><br><span class="line">        dataBuf.position(head);</span><br><span class="line">        <span class="keyword">int</span> length = dataBuf.getInt();</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        dataBuf.get(data);</span><br><span class="line">        <span class="keyword">if</span> (head + MSG_SIZE &gt;= DATA_FILE_SIZE) &#123;</span><br><span class="line">            head(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head(head + MSG_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BasicQueue queue = <span class="keyword">new</span> BasicQueue(<span class="string">"./"</span>, <span class="string">"task"</span>);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(<span class="string">"task "</span> + (i++));</span><br><span class="line">                queue.enqueue(msg.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                System.out.println(<span class="string">"produce: "</span> + msg);</span><br><span class="line">                Thread.sleep(rnd.nextInt(<span class="number">1000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BasicQueue queue = <span class="keyword">new</span> BasicQueue(<span class="string">"./"</span>, <span class="string">"task"</span>);</span><br><span class="line">            Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = queue.dequeue();</span><br><span class="line">                <span class="keyword">if</span> (bytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Thread.sleep(rnd.nextInt(<span class="number">1000</span>));</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"consume: "</span> + <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="神奇的序列化"><a href="#神奇的序列化" class="headerlink" title="神奇的序列化"></a>神奇的序列化</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>让类实现接口 <code>java.io.Serializable</code>，保存/读取这个类的对象就可使用 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code> 了。</p>
<h4 id="ObjectOutputStream-ObjectInputStream"><a href="#ObjectOutputStream-ObjectInputStream" class="headerlink" title="ObjectOutputStream/ObjectInputStream"></a><code>ObjectOutputStream</code>/<code>ObjectInputStream</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeStudents</span><span class="params">(List&lt;Student&gt; students)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">            <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"students.dat"</span>)))) &#123;</span><br><span class="line">        out.writeInt(students.size());</span><br><span class="line">        <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">            out.writeObject(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeStudents</span><span class="params">(List&lt;Student&gt; students)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">            <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"students.dat"</span>)))) &#123;</span><br><span class="line">        out.writeObject(students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="神奇之处"><a href="#神奇之处" class="headerlink" title="神奇之处"></a>神奇之处</h4><p>可自动处理对象引用和循环引用。</p>
<h4 id="定制序列化"><a href="#定制序列化" class="headerlink" title="定制序列化"></a>定制序列化</h4><ol>
<li><p><code>transient</code> 关键字</p>
</li>
<li><p>两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 调用默认的序列化机制，默认机制会保存所有没声明为 transient 的字段</span></span><br><span class="line">    <span class="comment">// 除此之外还会保存一些元数据描述等隐藏信息，这些隐藏的信息是序列化之所以能够神奇的重要原因</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    s.writeInt(size);</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">        s.writeObject(x.item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="keyword">int</span> size = s.readInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        linkLast((E)s.readObject());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="序列化神奇的基本原理"><a href="#序列化神奇的基本原理" class="headerlink" title="序列化神奇的基本原理"></a>序列化神奇的基本原理</h4><ul>
<li>每个对象都有一个编号，如果之前已经写过该对象了，则本次只会写该对象的引用，这可以解决对象引用和循环引用的问题。</li>
<li>如果对象实现了 <code>writeObject</code> 和 <code>readObject</code> 方法，调用它的自定义方法。</li>
<li>默认是利用反射机制。</li>
</ul>
<h4 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h4><p>默认情况下，Java 会给类定义一个版本号，这个版本号是根据类中一系列的信息自动生成的。在反序列化时，如果类的定义发生了变化，版本号就会变化，与流中的版本号就会不匹配，反序列化就会抛出异常。通常情况下，我们希望自定义这个版本号，而非让Java自动生成，一方面是为了更好的控制，另一方面是为了性能：<code>private static final long serialVersionUID = 1L;</code>如果版本号一样，但实际的字段不匹配，Java 会分情况自动进行处理，以尽量保持兼容性。</p>
<h4 id="高级自定义序列化"><a href="#高级自定义序列化" class="headerlink" title="高级自定义序列化"></a>高级自定义序列化</h4><p>如果对象实现了 <code>Externalizable</code> 接口，则序列化过程会由这两个方法控制，默认序列化机制中的反射等将不再起作用，不再有类似 <code>defaultWriteObject</code> 和 defaultReadObject 调用，另一个区别是，反序列化时，会先调用类的无参构造方法创建对象，然后才调用 <code>readExternal</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br></pre></td></tr></table></figure>

<p>还有两个方法是 <code>Object readResolve()</code> 和 <code>Object writeReplace()</code>，构成一种所谓的序列化代理模式。</p>
<h3 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h3><h4 id="JSON-基本序列化"><a href="#JSON-基本序列化" class="headerlink" title="JSON 基本序列化"></a>JSON 基本序列化</h4><p><code>ObjectMapper</code> 怎么知道要保存哪些字段呢？与 Java 标准序列化机制一样，它也使用反射，默认情况下，它会保存所有声明为 <code>public</code> 的字段，或者有 <code>public getter</code> 方法的字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">80.9</span>d);</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">// XML 方式：ObjectMapper mapper = new XmlMapper();</span></span><br><span class="line"><span class="comment">// MessagePack 方式：ObjectMapper mapper = new ObjectMapper(new MessagePackFactory());</span></span><br><span class="line"><span class="comment">// 格式化输出</span></span><br><span class="line">mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class="line">String str = mapper.writeValueAsString(student);</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObjectMapper 还有其他方法，可以输出字节数组，写出到文件、OutputStream、Writer 等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] writeValueAsBytes(Object value)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeValue</span><span class="params">(OutputStream out, Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeValue</span><span class="params">(Writer w, Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeValue</span><span class="params">(File resultFile, Object value)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="JSON-基本反序列化"><a href="#JSON-基本反序列化" class="headerlink" title="JSON 基本反序列化"></a>JSON 基本反序列化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">// XML 方式：ObjectMapper mapper = new XmlMapper();</span></span><br><span class="line"><span class="comment">// MessagePack 方式：ObjectMapper mapper = new ObjectMapper(new MessagePackFactory());</span></span><br><span class="line">Student s = mapper.readValue(<span class="keyword">new</span> File(<span class="string">"student.json"</span>), Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(s.toString());</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readValue</span><span class="params">(InputStream src, Class&lt;T&gt; valueType)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> &lt;T&gt; T <span class="title">readValue</span><span class="params">(Reader src, Class&lt;T&gt; valueType)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> &lt;T&gt; T <span class="title">readValue</span><span class="params">(String content, Class&lt;T&gt; valueType)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> &lt;T&gt; T <span class="title">readValue</span><span class="params">(<span class="keyword">byte</span>[] src, Class&lt;T&gt; valueType)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="容器对象"><a href="#容器对象" class="headerlink" title="容器对象"></a>容器对象</h4><p>容器对象的反序列化代码不同，要新建一个 <code>TypeReference</code> 匿名内部类对象来指定类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; students = Arrays.asList(<span class="keyword">new</span> Student[] &#123;</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">80.9</span>d), <span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">17</span>, <span class="number">67.5</span>d) &#125;);</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">mapper.writeValue(<span class="keyword">new</span> File(<span class="string">"students.json"</span>), students);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">List&lt;Student&gt; list = mapper.readValue(<span class="keyword">new</span> File(<span class="string">"students.json"</span>),</span><br><span class="line">        <span class="keyword">new</span> TypeReference&lt;List&lt;Student&gt;&gt;() &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="复杂对象"><a href="#复杂对象" class="headerlink" title="复杂对象"></a>复杂对象</h4><p>复杂对象，Jackson 是可以自动处理的，和基本的序列化、反序列化代码没有什么不同。</p>
<h4 id="忽略字段"><a href="#忽略字段" class="headerlink" title="忽略字段"></a>忽略字段</h4><p>在 Java 标准序列化中，如果字段标记为了 transient，就会在序列化中被忽略，在 Jackson 中，可以使用以下两个注解之一：</p>
<ul>
<li><code>@JsonIgnore</code>：用于字段、<code>getter</code> 或 <code>setter</code> 方法，任一地方的效果都一样</li>
<li><code>@JsonIgnoreProperties</code>：用于类声明，可指定忽略一个或多个字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">double</span> score;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties</span>(<span class="string">"score"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; ...</span><br></pre></td></tr></table></figure>

<h4 id="引用同一个对象"><a href="#引用同一个对象" class="headerlink" title="引用同一个对象"></a>引用同一个对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增一个属性"id"以表示对象的唯一标示</span></span><br><span class="line"><span class="comment">// generator 表示对象唯一 ID 的产生方法，这里是使用整数顺序数产生器 IntSequenceGenerator</span></span><br><span class="line"><span class="meta">@JsonIdentityInfo</span>(</span><br><span class="line">        generator = ObjectIdGenerators.IntSequenceGenerator<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">property</span> </span>= <span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Common first;</span><br><span class="line">    <span class="keyword">public</span> Common second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看看序列后的奥秘所在：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"first"</span> : &#123;</span><br><span class="line">    <span class="attr">"id"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"common"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"second"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>解决这个问题，可以分别将类其中一个标记为主引用，而另一个标记为反向引用，主引用使用 <code>@JsonManagedReference</code>，反向引用使用 <code>@JsonBackReference</code>，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonManagedReference</span></span><br><span class="line">    <span class="keyword">public</span> Child child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonBackReference</span></span><br><span class="line">    <span class="keyword">public</span> Parent parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="反序列化时忽略未知字段"><a href="#反序列化时忽略未知字段" class="headerlink" title="反序列化时忽略未知字段"></a>反序列化时忽略未知字段</h4><p>两种方式：</p>
<ul>
<li><p>配置 <code>ObjectMapper</code>：<code>mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</code></p>
</li>
<li><p>配置具体类，举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; ...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><p>看一个有继承关系的类的序列化例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> l;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Shape&gt; shapes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果序列化上面的 <code>ShapeManager</code>，将会丢失子类细节：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ShapeManager sm = <span class="keyword">new</span> ShapeManager();</span><br><span class="line">List&lt;Shape&gt; shapes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">shapes.add(<span class="keyword">new</span> Circle(<span class="number">10</span>));</span><br><span class="line">shapes.add(<span class="keyword">new</span> Square(<span class="number">5</span>));</span><br><span class="line">sm.setShapes(shapes);</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"shapes"</span> : [ &#123;</span><br><span class="line">    <span class="attr">"r"</span> : <span class="number">10</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">"l"</span> : <span class="number">5</span></span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法是在输出中包含类型信息，在基类 <code>Shape</code> 前使用如下注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonTypeInfo</span>(use = Id.NAME, include = As.PROPERTY, property = <span class="string">"type"</span>)</span><br><span class="line"><span class="meta">@JsonSubTypes</span>(&#123;</span><br><span class="line">    <span class="meta">@JsonSubTypes</span>.Type(value = Circle<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= <span class="string">"circle"</span>),</span><br><span class="line">    <span class="meta">@JsonSubTypes</span>.Type(value = Square<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= <span class="string">"square"</span>) &#125;)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些注解看上去比较多，含义是指在输出中增加属性 “type”，表示对象的实际类型：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"shapes"</span> : [ &#123;</span><br><span class="line">    <span class="attr">"type"</span> : <span class="string">"circle"</span>,</span><br><span class="line">    <span class="attr">"r"</span> : <span class="number">10</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">"type"</span> : <span class="string">"square"</span>,</span><br><span class="line">    <span class="attr">"l"</span> : <span class="number">5</span></span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"名称"</span>)</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"年龄"</span>)</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"分数"</span>)</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone=<span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">public</span> Date date = <span class="keyword">new</span> Date();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置构造方法"><a href="#配置构造方法" class="headerlink" title="配置构造方法"></a>配置构造方法</h4><p>如果没有定义默认构造方法，则反序列化时会抛异常，提示找不到合适的构造方法，可以使用 <code>@JsonCreator</code> 和 <code>@JsonProperty</code> 标记该构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonCreator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @JsonProperty(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">        @<span class="title">JsonProperty</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age,</span></span><br><span class="line"><span class="function">        @<span class="title">JsonProperty</span><span class="params">(<span class="string">"score"</span>)</span> <span class="keyword">double</span> score) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见文件类型处理"><a href="#常见文件类型处理" class="headerlink" title="常见文件类型处理"></a>常见文件类型处理</h3><blockquote>
<p>这些现用现看吧，<a href="https://www.cnblogs.com/swiftma/p/6379834.html" target="_blank" rel="noopener">戳此看老马原文</a></p>
</blockquote>
<h4 id="属性文件"><a href="#属性文件" class="headerlink" title="属性文件"></a>属性文件</h4><h4 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h4><h4 id="EXCEL"><a href="#EXCEL" class="headerlink" title="EXCEL"></a>EXCEL</h4><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><h4 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h4>]]></content>
      <tags>
        <tag>Java 编程的逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Java I/O</title>
    <url>/2019/01/09/Java-IO/</url>
    <content><![CDATA[<h3 id="文件概述"><a href="#文件概述" class="headerlink" title="文件概述"></a>文件概述</h3><h4 id="基本概念和常识"><a href="#基本概念和常识" class="headerlink" title="基本概念和常识"></a>基本概念和常识</h4><ul>
<li>POM 头</li>
<li>文件路径（相对、绝对）</li>
<li>元数据信息（每个文件除了有具体内容，还有元数据信息，如文件名、文件大小等）</li>
<li>访问权限</li>
<li>大小写是否敏感</li>
<li>临时文件</li>
<li>文件读写需要两次数据拷贝</li>
<li>文件有打开和关闭的状态。打开文件会创建“文件描述符” — 它一般通过一个整数来索引，消耗内存，应该及时关闭。</li>
<li>为了提升文件操作的效率，可以使用缓冲区。注意要在写结束的时候，需将缓冲区的剩余内容同步到硬盘。</li>
<li>操作系统一般支持一种称之为内存映射文件的高效的随机读写大文件的方法，将文件直接映射到内存，操作内存就是操作文件，在内存映射文件中，只有访问到的数据才会被实际拷贝到内存，且数据只会拷贝一次，被操作系统以及多个应用程序共享。<a id="more"></a></li>
</ul>
<h4 id="Java-文件概述"><a href="#Java-文件概述" class="headerlink" title="Java 文件概述"></a>Java 文件概述</h4><ul>
<li><p>流</p>
<p>Java IO 的基本类大多位于包 <code>java.io</code> 中。</p>
<ol>
<li><p>类 <code>InputStream</code> 表示输入流，<code>OutputStream</code> 表示输出流（基于字节）。举例子类：</p>
<p>更细化的还有 <code>FileInputStream</code> 表示文件输入流，<code>FileOutputStream</code> 表示文件输出流。</p>
</li>
<li><p>类 <code>Reader</code> 表示输入流，类 <code>Writer</code> 表示输出流（基于字符）。举例子类：</p>
<ul>
<li>读写文件的子类是 <code>FileReader</code> 和 <code>FileWriter</code>。</li>
<li>起缓冲装饰的子类是 <code>BufferedReader</code> 和 <code>BufferedWriter</code>。</li>
<li>将字符数组包装为 <code>Reader/Writer</code> 的子类是<code>CharArrayReader</code> 和 <code>CharArrayWriter</code>。</li>
<li>将字符串包装为 <code>Reader/Writer</code> 的子类是 <code>StringReader</code> 和 <code>StringWriter</code>。</li>
<li>将 <code>InputStream/OutputStream</code> 转换为 <code>Reader/Writer</code> 的子类是 <code>InputStreamReader OutputStreamWriter</code>。</li>
<li>将基本类型、对象输出为其字符串表示的子类 <code>PrintWriter</code>。</li>
</ul>
</li>
</ol>
<p>有了流的概念，就有了很多面向流的代码，比如对流做加密、压缩、计算信息摘要、计算检验和等，这些代码接受的参数和返回结果都是抽象的流，它们构成了一个协作体系，这类似于之前介绍的接口概念、面向接口的编程、以及容器类协作体系。</p>
<p>一些实际上不是 IO 的数据源和目的地也转换为了流，以方便参与这种协作，比如字节数组，也包装为了流 <code>ByteArrayInputStream</code> 和 <code>ByteArrayOutputStream</code>。</p>
</li>
<li><p>装饰器设计模式</p>
<p>基本的流按字节读写，没有缓冲区等实用方法，于是 Java 引入了很多装饰类，对基本的流增加功能，以方便使用，一般一个类只关注一个方面，实际使用时，经常会需要多个装饰类。</p>
<p>Java 中有很多装饰类，有两个基类，过滤器输入流 <code>FilterInputStream</code> 和过滤器输出流 <code>FilterOutputStream</code>，它有很多子类，这里列举一些：</p>
<ul>
<li>对流起缓冲装饰的子类是 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code>。</li>
<li>可以按八种基本类型和字符串对流进行读写的子类是 <code>DataInputStream</code> 和 <code>DataOutputStream</code>。</li>
<li>可以对流进行压缩和解压缩的子类有 <code>GZIPInputStream, ZipInputStream, GZIPOutputStream, ZipOutputStream</code>。</li>
<li>可以将基本类型、对象输出为其字符串表示的子类有 <code>PrintStream</code>。</li>
</ul>
</li>
</ul>
<h3 id="二进制文件和字节流"><a href="#二进制文件和字节流" class="headerlink" title="二进制文件和字节流"></a>二进制文件和字节流</h3><h4 id="InputStream-OutputStream"><a href="#InputStream-OutputStream" class="headerlink" title="InputStream/OutputStream"></a><code>InputStream</code>/<code>OutputStream</code></h4><ul>
<li><p><code>InputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">available</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">int</span> readlimit)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">markSupported</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>OutputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="comment">// 一次最多读入的字节个数为数组 b 的长度，但实际读入的个数可能小于数组长度，返回值为实际读入的字节个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="FileInputStream-FileOutputStream"><a href="#FileInputStream-FileOutputStream" class="headerlink" title="FileInputStream/FileOutputStream"></a><code>FileInputStream</code>/<code>FileOutputStream</code></h4><ul>
<li><p><code>FileInputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (InputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"hello.txt"</span>)) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式一</span></span><br><span class="line">    <span class="keyword">int</span> bytesRead = input.read(buf);</span><br><span class="line">    String data = <span class="keyword">new</span> String(buf, <span class="number">0</span>, bytesRead, <span class="string">"UTF-8"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式二</span></span><br><span class="line">    <span class="keyword">int</span> b = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> bytesRead = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((b = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        buf[bytesRead++] = (<span class="keyword">byte</span>) b;</span><br><span class="line">    &#125;</span><br><span class="line">    String data = <span class="keyword">new</span> String(buf, <span class="number">0</span>, bytesRead, <span class="string">"UTF-8"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式三</span></span><br><span class="line">    <span class="keyword">int</span> off = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bytesRead = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((bytesRead = input.read(buf, off, <span class="number">1024</span> - off)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        off += bytesRead;</span><br><span class="line">    &#125;</span><br><span class="line">    String data = <span class="keyword">new</span> String(buf, <span class="number">0</span>, off, StandardCharsets.UTF_8);</span><br><span class="line">    </span><br><span class="line">    System.out.println(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>FileOutPutSream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file, <span class="keyword">boolean</span> append)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(String name, <span class="keyword">boolean</span> append)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream output =  <span class="keyword">new</span> FileOutputStream(<span class="string">"hello.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    String data = <span class="string">"hello, 123, 老马"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = data.getBytes(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">    output.write(bytes);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    output.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ByteArrayInputStream-ByteArrayOutputStream"><a href="#ByteArrayInputStream-ByteArrayOutputStream" class="headerlink" title="ByteArrayInputStream/ByteArrayOutputStream"></a><code>ByteArrayInputStream</code>/<code>ByteArrayOutputStream</code></h4><ul>
<li><p><code>ByteArrayInputStream</code></p>
<p><code>ByteArrayInputStream</code> 将 <code>byte</code> 数组包装为一个输入流，是一种适配器模式<br><code>ByteArrayInputStream</code> 的所有数据都在内存，支持 <code>mark</code>/<code>reset</code> 重复读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ByteArrayInputStream</span><span class="params">(<span class="keyword">byte</span> buf[])</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以 buf 中 offset 开始 length 个字节为背后的数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ByteArrayInputStream</span><span class="params">(<span class="keyword">byte</span> buf[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ByteArrayOutputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">byte</span>[] toByteArray()</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">(String charsetName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"hello.txt"</span>);</span><br><span class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream()</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> bytesRead;</span><br><span class="line">    <span class="comment">// read、write 都是把数据搞进流中</span></span><br><span class="line">    <span class="keyword">while</span> ((bytesRead = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        outputStream.write(bytes, <span class="number">0</span>, bytesRead);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(outputStream.toString(<span class="string">"UTF-8"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="DataInputStream-DataOutputStream"><a href="#DataInputStream-DataOutputStream" class="headerlink" title="DataInputStream/DataOutputStream"></a><code>DataInputStream</code>/<code>DataOutputStream</code></h4><p>这两个玩意实在憨批，不想多说了。</p>
<h4 id="BufferedInputStream-BufferedOutputStream"><a href="#BufferedInputStream-BufferedOutputStream" class="headerlink" title="BufferedInputStream/BufferedOutputStream"></a><code>BufferedInputStream</code>/<code>BufferedOutputStream</code></h4><p>在使用 <code>FileInputStream</code>/<code>FileOutputStream</code> 时，应该几乎总是在它的外面包上对应的缓冲类。</p>
<ul>
<li><p><code>BufferedInputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in, <span class="keyword">int</span> size)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream input = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"hello.txt"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>BufferedOutputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream output = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"hello.txt"</span>));</span><br><span class="line">DataOutputStream output = <span class="keyword">new</span> DataOutputStream(</span><br><span class="line">        <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"students.dat"</span>)));</span><br><span class="line">DataInputStream input = <span class="keyword">new</span> DataInputStream(</span><br><span class="line">        <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"students.dat"</span>)));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><p>拷贝输入流的内容到输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> bytesRead;</span><br><span class="line">    <span class="keyword">while</span> ((bytesRead = input.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        output.write(bytes, <span class="number">0</span>, bytesRead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件读入字节数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readFileToByteArray(String FileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream input = <span class="keyword">new</span> FileInputStream(FileName)) &#123;</span><br><span class="line">        ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        copy(input, output);</span><br><span class="line">        <span class="keyword">return</span> output.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将字节数组写到文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeByteArrayToFile</span><span class="params">(<span class="keyword">byte</span>[] byteArray, String FileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (FileOutputStream output = <span class="keyword">new</span> FileOutputStream(FileName)) &#123;</span><br><span class="line">        output.write(byteArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li><code>InputStream</code>/<code>OutputStream</code>：是抽象基类，有很多面向流的代码，以它们为参数，比如本节介绍的 copy 方法。</li>
<li><code>FileInputStream</code>/<code>FileOutputStream</code>：流的源和目的地是文件。</li>
<li><code>ByteArrayInputStream</code>/<code>ByteArrayOutputStream</code>：源和目的地是字节数组，作为输入相当于是适配器，作为输出封装了动态数组，便于使用。</li>
<li><code>DataInputStream</code>/<code>DataOutputStream</code>：装饰类，按基本类型和字符串读写流。</li>
<li><code>BufferedInputStream</code>/<code>BufferedOutputStream</code>：装饰类，提供缓冲，<code>FileInputStream</code>/<code>FileOutputStream</code> 一般总是应该用该类装饰。</li>
</ul>
<h3 id="文本文件和字符流"><a href="#文本文件和字符流" class="headerlink" title="文本文件和字符流"></a>文本文件和字符流</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h4 id="Reader-Writer"><a href="#Reader-Writer" class="headerlink" title="Reader/Writer"></a><code>Reader</code>/<code>Writer</code></h4><ul>
<li><p><code>Reader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法的名称和含义与 InputStream 中的对应方法基本类似</span></span><br><span class="line"><span class="comment">// 但 Reader 中处理的单位是 char，比如 read 读取的是一个 char，取值范围为 0 到 65535</span></span><br><span class="line"><span class="comment">// Reader 没有 available() 方法，对应的方法是 ready()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> cbuf[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> cbuf[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">markSupported</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">int</span> readAheadLimit)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">ready</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Writer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 含义与 OutputStream 的对应方法基本类似，但 Writer 处理的单位是 char</span></span><br><span class="line"><span class="comment">// Writer 还接受 String 类型，String 的内部就是 char 数组</span></span><br><span class="line"><span class="comment">// 处理时，会调用 String 的 getChar 方法先获取 char 数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> cbuf[])</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> cbuf[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="InputStreamReader-OutputStreamWriter"><a href="#InputStreamReader-OutputStreamWriter" class="headerlink" title="InputStreamReader/OutputStreamWriter"></a><code>InputStreamReader</code>/<code>OutputStreamWriter</code></h4><ul>
<li><p><code>InputStreamReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in, String charsetName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in, Charset cs)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Reader reader = <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">    <span class="keyword">new</span> FileInputStream(<span class="string">"hello.txt"</span>), StandardCharsets.UTF_8)) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> charsRead = reader.read(cbuf);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(cbuf, <span class="number">0</span>, charsRead));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>OutputStreamWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out, String charsetName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out, Charset cs)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Writer writer = <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">        <span class="keyword">new</span> FileOutputStream(<span class="string">"hello.txt"</span>), StandardCharsets.UTF_8)) &#123;</span><br><span class="line">    String str = <span class="string">"hello, 123, 老马"</span>;</span><br><span class="line">    writer.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="FileReader-FileWriter"><a href="#FileReader-FileWriter" class="headerlink" title="FileReader/FileWriter"></a><code>FileReader</code>/<code>FileWriter</code></h4><p><code>FileReader</code>/<code>FileWriter</code> 不能指定编码类型，只能使用默认编码，如果需要指定编码类型，可以使用 <code>InputStreamReader</code>/<code>OutputStreamWriter</code></p>
<ul>
<li><p><code>FileReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>FileWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file, <span class="keyword">boolean</span> append)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(String fileName, <span class="keyword">boolean</span> append)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="CharArrayReader-CharArrayWriter"><a href="#CharArrayReader-CharArrayWriter" class="headerlink" title="CharArrayReader/CharArrayWriter"></a><code>CharArrayReader</code>/<code>CharArrayWriter</code></h4><ul>
<li><p><code>CharArrayReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CharArrayReader</span><span class="params">(<span class="keyword">char</span> buf[])</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CharArrayReader</span><span class="params">(<span class="keyword">char</span> buf[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>CharArrayWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray()</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Reader reader = <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">        <span class="keyword">new</span> FileInputStream(<span class="string">"hello.txt"</span>), StandardCharsets.UTF_8)) &#123;</span><br><span class="line">    CharArrayWriter writer = <span class="keyword">new</span> CharArrayWriter();</span><br><span class="line">    <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> charsRead;</span><br><span class="line">    <span class="keyword">while</span> ((charsRead = reader.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        writer.write(cbuf, <span class="number">0</span>, charsRead);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(writer.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="StringReader-StringWriter"><a href="#StringReader-StringWriter" class="headerlink" title="StringReader/StringWriter"></a><code>StringReader</code>/<code>StringWriter</code></h4><p><code>StringReader</code>/<code>StringWriter</code> 与 <code>CharArrayReader</code>/<code>CharArrayWriter</code> 类似，只是输入源为 <code>String</code>，输出目标为 <code>StringBuffer</code>，而且，<code>String</code>/<code>StringBuffer</code> 内部是由 <code>char</code> 数组组成的，所以它们本质上是一样的。</p>
<h4 id="BufferedReader-BufferedWriter"><a href="#BufferedReader-BufferedWriter" class="headerlink" title="BufferedReader/BufferedWriter"></a><code>BufferedReader</code>/<code>BufferedWriter</code></h4><ul>
<li><p><code>BufferedReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader in)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader in, <span class="keyword">int</span> sz)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符 '\r' 或 '\n' 或 '\r\n' 被视为换行符</span></span><br><span class="line"><span class="comment">// readLine 返回一行内容，但不会包含换行符，当读到流结尾时，返回 null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">readStudents</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"students.txt"</span>))) &#123;</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String line = reader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">","</span>);</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.setName(fields[<span class="number">0</span>]);</span><br><span class="line">            s.setAge(Integer.parseInt(fields[<span class="number">1</span>]));</span><br><span class="line">            s.setScore(Double.parseDouble(fields[<span class="number">2</span>]));</span><br><span class="line">            students.add(s);</span><br><span class="line">            line = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>BufferedWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span><span class="params">(Writer out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span><span class="params">(Writer out, <span class="keyword">int</span> sz)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法可以输出平台特定的换行符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeStudents</span><span class="params">(List&lt;Student&gt; students)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"students.txt"</span>))) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">            writer.write(s.getName() + <span class="string">","</span> + s.getAge() + <span class="string">","</span> + s.getScore());</span><br><span class="line">            writer.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a><code>PrintWriter</code></h4><ul>
<li><p><code>print(x)</code> 和 <code>println(x)</code></p>
<p>它会将这些参数转换为其字符串形式，即调用 <code>String.valueOf(x)</code>，然后再调用 <code>write</code>。<code>println</code> 除了调用对应的 <code>print</code>，还会输出一个换行符。</p>
</li>
<li><p><code>printf(String format, Object ... args)</code></p>
</li>
<li><p><code>PrintWriter</code> 的强大的构造方法们</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法中的 autoFlush 参数表示同步缓冲区的时机</span></span><br><span class="line"><span class="comment">// 如果为 true，则在调用 println, printf 或 format 方法的时候，同步缓冲区</span></span><br><span class="line"><span class="comment">// 如果没有传，则不会自动同步，需要根据情况调用 flush 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(File file)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(File file, String csn)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(String fileName, String csn)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(OutputStream out, <span class="keyword">boolean</span> autoFlush)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(Writer out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(Writer out, <span class="keyword">boolean</span> autoFlush)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简化 writeStudents()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeStudents</span><span class="params">(List&lt;Student&gt; students)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (PrintWriter writer = <span class="keyword">new</span> PrintWriter(<span class="string">"students.txt"</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">            writer.println(s.getName() + <span class="string">","</span> + s.getAge() + <span class="string">","</span> + s.getScore());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>PrintStream</code></p>
<p><code>PrintWriter</code> 有一个非常相似的类 <code>PrintStream</code>，除了不能接受 <code>Writer</code> 作为构造方法外，<code>PrintStream</code> 的其他构造方法与 <code>PrintWriter</code> 一样，<code>PrintStream</code> 也有几乎一样的重载的 <code>print</code> 和 <code>println</code> 方法，只是自动同步缓冲区的时机略有不同，在 <code>PrintStream</code> 中，只要碰到一个换行字符 <code>&#39;\n&#39;</code>，就会自动同步缓冲区。</p>
<p><code>PrintStream</code> 与 <code>PrintWriter</code> 的另一个区别是，虽然它们都有如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure>

<p>但含义是不一样的，<code>PrintStream</code> 只使用最低的八位，输出一个字节，而 <code>PrintWriter</code> 是使用最低的两位，输出一个 <code>char</code>。</p>
</li>
</ul>
<h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a><code>Scanner</code></h4><p><code>Scanner</code> 有很多形式的 next 方法，可以读取下一个基本类型或行；它也有很多构造方法，可以接受 <code>File</code> 对象、<code>InputStream</code>、<code>Reader</code> 作为参数，它也可以将字符串作为参数，这时，它会创建一个 <code>StringReader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">readStudents</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"students.txt"</span>))) &#123;</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String line = reader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(line).useDelimiter(<span class="string">","</span>);</span><br><span class="line">            s.setName(scanner.next());</span><br><span class="line">            s.setAge(scanner.nextInt());</span><br><span class="line">            s.setScore(scanner.nextDouble());</span><br><span class="line">            students.add(s);</span><br><span class="line">            line = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h4><p>我们之前一直在使用 <code>System.out</code> 向屏幕上输出，它是一个 <code>PrintStream</code> 对象，输出目标就是所谓的 “标准” 输出，经常是屏幕。除了 <code>System.out</code>，<code>Java</code> 中还有两个标准流，<code>System.in</code> 和 <code>System.err</code>。</p>
<p>System.in 表示标准输入，它是一个 InputStream 对象，输入源经常是键盘。比如，从键盘接受一个整数并输出，代码可以为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> num = in.nextInt();</span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure>

<p><code>System.err</code> 表示标准错误流，一般异常和错误信息输出到这个流，它也是一个 <code>PrintStream</code> 对象，输出目标默认与 <code>System.out</code> 一样，一般也是屏幕。</p>
<p>标准流的一个重要特点是，它们可以重定向，比如可以重定向到文件，从文件中接受输入，输出也写到文件中。在 Java 中，可以使用 <code>System</code> 类的 <code>setIn</code>, <code>setOut</code>, <code>setErr</code> 进行重定向，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setIn(<span class="keyword">new</span> ByteArrayInputStream(<span class="string">"hello"</span>.getBytes(<span class="string">"UTF-8"</span>)));</span><br><span class="line">System.setOut(<span class="keyword">new</span> PrintStream(<span class="string">"out.txt"</span>));</span><br><span class="line">System.setErr(<span class="keyword">new</span> PrintStream(<span class="string">"err.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(in.nextLine());</span><br><span class="line">    System.out.println(in.nextLine());</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.err.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h4><ul>
<li><p>拷贝 <code>Reader</code> 到 <code>Writer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">final</span> Reader input, <span class="keyword">final</span> Writer output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> charsRead;</span><br><span class="line">    <span class="keyword">while</span> ((charsRead = input.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        output.write(buf, <span class="number">0</span>, charsRead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文件全部内容读入到一个字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileToString</span><span class="params">(<span class="keyword">final</span> String fileName, </span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">final</span> String encoding)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (Reader reader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(fileName), encoding)) &#123;</span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        copy(reader, writer);</span><br><span class="line">        <span class="keyword">return</span> writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将字符串写到文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeStringToFile</span><span class="params">(<span class="keyword">final</span> String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">final</span> String data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">final</span> String encoding)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (Writer writer = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(fileName), encoding)) &#123;</span><br><span class="line">        writer.write(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按行将多行数据写到文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeLines</span><span class="params">(<span class="keyword">final</span> String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> String encoding,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> Collection&lt;?&gt; lines)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (PrintWriter writer = <span class="keyword">new</span> PrintWriter(fileName, encoding)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : lines) &#123;</span><br><span class="line">            writer.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按行将文件内容读到一个列表中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">readLines</span><span class="params">(<span class="keyword">final</span> String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">final</span> String encoding)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">        <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(fileName), encoding))) &#123;</span><br><span class="line">        String line = reader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(line);</span><br><span class="line">            line = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>写文件时，可以优先考虑 <code>PrintWriter</code>，因为它使用方便，支持自动缓冲、支持指定编码类型、支持类型转换等。</li>
<li>读文件时，如果需要指定编码类型，需要使用 <code>InputStreamReader</code>，不需要可使用 <code>FileReader</code>，但都应该考虑在外面包上缓冲类 <code>BufferedReader</code>。</li>
</ul>
<h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 new 新建一个 File 对象，不会实际创建一个文件，只是创建一个表示文件或目录的对象</span></span><br><span class="line"><span class="comment">// new 之后，File 对象中的路径是不可变的。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String pathname)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String parent, String child)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(File parent, String child)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="文件元数据"><a href="#文件元数据" class="headerlink" title="文件元数据"></a>文件元数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAbsolute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCanonicalPath</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getParentFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getAbsoluteFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getCanonicalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Windows 系统中，一般为 "\"，Linux 系统中一般为 "/"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String separator</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> separatorChar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Windows 系统中，这个分隔符一般为 ';'，在 Linux 系统中，这个分隔符一般为 ':'</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String pathSeparator</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> pathSeparatorChar</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件或目录是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//是否为目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//是否为文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//文件长度，字节数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//最后修改时间，从纪元时开始的毫秒数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//设置最后修改时间，设置成功返回true，否则返回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setLastModified</span><span class="params">(<span class="keyword">long</span> time)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//是否为隐藏文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//是否可执行</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canExecute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//是否可读</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//是否可写</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//设置文件为只读文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setReadOnly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//修改文件读权限</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setReadable</span><span class="params">(<span class="keyword">boolean</span> readable, <span class="keyword">boolean</span> ownerOnly)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setReadable</span><span class="params">(<span class="keyword">boolean</span> readable)</span></span></span><br><span class="line"><span class="function"><span class="comment">//修改文件写权限</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setWritable</span><span class="params">(<span class="keyword">boolean</span> writable, <span class="keyword">boolean</span> ownerOnly)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setWritable</span><span class="params">(<span class="keyword">boolean</span> writable)</span></span></span><br><span class="line"><span class="function"><span class="comment">//修改文件可执行权限</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setExecutable</span><span class="params">(<span class="keyword">boolean</span> executable, <span class="keyword">boolean</span> ownerOnly)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setExecutable</span><span class="params">(<span class="keyword">boolean</span> executable)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建成功返回 true，否则返回 false，新创建的文件内容为空。如果文件已存在，不会创建。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createTempFile</span><span class="params">(String prefix, String suffix)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createTempFile</span><span class="params">(String prefix, String suffix, File directory)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOnExit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它们返回的都是直接子目录或文件，不会返回子目录下的文件</span></span><br><span class="line"><span class="comment">// list 返回的是文件名数组，而 listFiles 返回的是 File 对象数组</span></span><br><span class="line"><span class="comment">// FilenameFilter 和 FileFilter 都是接口，用于过滤</span></span><br><span class="line"><span class="keyword">public</span> String[] list()</span><br><span class="line"><span class="keyword">public</span> String[] list(FilenameFilter filter)</span><br><span class="line"><span class="keyword">public</span> File[] listFiles()</span><br><span class="line"><span class="keyword">public</span> File[] listFiles(FileFilter filter)</span><br><span class="line"><span class="keyword">public</span> File[] listFiles(FilenameFilter filter)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FilenameFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列出"/Users/staticvoid/Learning"目录下的所有后缀为".md"的文件</span></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/Learning"</span>);</span><br><span class="line">File[] files = f.listFiles((dir, name) -&gt; name.endsWith(<span class="string">".md"</span>));</span><br><span class="line"><span class="keyword">for</span>(File file : files != <span class="keyword">null</span> ? files : <span class="keyword">new</span> File[<span class="number">0</span>])&#123;</span><br><span class="line">    System.out.println(file.getCanonicalPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算一个目录下的所有文件的大小（包括子目录）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sizeOfDirectory</span><span class="params">(<span class="keyword">final</span> File directory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (directory.isFile()) &#123;</span><br><span class="line">        <span class="keyword">return</span> directory.length();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (File file : Objects.requireNonNull(directory.listFiles())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                size += file.length();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                size += sizeOfDirectory(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在一个目录下，查找所有给定文件名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;File&gt; <span class="title">findFile</span><span class="params">(<span class="keyword">final</span> File directory, <span class="keyword">final</span> String fileName)</span> </span>&#123;</span><br><span class="line">    List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File f : Objects.requireNonNull(directory.listFiles())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.isFile() &amp;&amp; f.getName().equals(fileName)) &#123;</span><br><span class="line">            files.add(f);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            files.addAll(findFile(f, fileName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除非空目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteRecursively</span><span class="params">(<span class="keyword">final</span> File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.delete()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to delete "</span></span><br><span class="line">                    + file.getCanonicalPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File child : Objects.requireNonNull(file.listFiles())) &#123;</span><br><span class="line">            deleteRecursively(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!file.delete()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to delete "</span></span><br><span class="line">                    + file.getCanonicalPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Java 编程的逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 泛型</title>
    <url>/2019/01/03/Java-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>泛型方法的泛型写在返回值的前面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这种形式称之为递归类型限制，可以这么解读：</span></span><br><span class="line"><span class="comment">// T 表示一种数据类型，必须实现 Comparable 接口，且必须可以与相同类型的元素进行比较。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>泛型类的泛型写在类名后面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArray</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends E&gt; <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(DynamicArray&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;c.size; i++)&#123;</span><br><span class="line">            add(c.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 函数中：</span></span><br><span class="line">DynamicArray&lt;Number&gt; numbers = <span class="keyword">new</span> DynamicArray&lt;&gt;();</span><br><span class="line">DynamicArray&lt;Integer&gt; ints = <span class="keyword">new</span> DynamicArray&lt;&gt;();</span><br><span class="line">ints.add(<span class="number">100</span>);</span><br><span class="line">ints.add(<span class="number">34</span>);</span><br><span class="line">numbers.addAll(ints);</span><br></pre></td></tr></table></figure>

<p>虽然 <code>Integer</code> 是 <code>Number</code> 的子类，但 <code>DynamicArray&lt;Integer&gt;</code> 并不是 <code>DynamicArray&lt;Number&gt;</code> 的子类，<code>DynamicArray&lt;Integer&gt;</code> 的对象也不能赋值给 <code>DynamicArray&lt;Number&gt;</code> 的变量，想想这是为什么呢？</p>
<h4 id="多个类型限定的语法"><a href="#多个类型限定的语法" class="headerlink" title="多个类型限定的语法"></a>多个类型限定的语法</h4><p>上界可以为某个类、某个接口或者其他类型参数，Java 中还支持多个上界，多个上界之间以 &amp; 分隔，类似这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T extends Base &amp; Comparable &amp; Serializable</span><br></pre></td></tr></table></figure>

<p><code>Base</code> 为上界类，<code>Comparable</code> 和 <code>Serializable</code> 为上界接口，如果有上界类，类应该放在第一个，类型擦除时，会用第一个上界替换。</p>
<h3 id="解析通配符"><a href="#解析通配符" class="headerlink" title="解析通配符"></a>解析通配符</h3><h4 id="lt-extends-E-gt-有限定通配符"><a href="#lt-extends-E-gt-有限定通配符" class="headerlink" title="&lt;? extends E&gt; 有限定通配符"></a>&lt;? extends E&gt; 有限定通配符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&lt;T extends E&gt; 用于定义类型参数，它声明了一个类型参数 T，可放在泛型类定义中类名后面、泛型方法返回值前面。</span></span><br><span class="line"><span class="comment">&lt;? extends E&gt; 用于实例化类型参数，它用于实例化泛型变量中的类型参数，只是这个具体类型是未知的，只知道它是 E 或 E 的某个子类型。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T extends E&gt; <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(DynamicArray&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;c.size; i++) &#123;</span><br><span class="line">        add(c.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↑ 通常可替换 ↓</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(DynamicArray&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;c.size; i++) &#123;</span><br><span class="line">        add(c.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lt-gt-无限定通配符"><a href="#lt-gt-无限定通配符" class="headerlink" title="&lt;?&gt; 无限定通配符"></a>&lt;?&gt; 无限定通配符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(DynamicArray&lt;?&gt; arr, Object elm)</span></span></span><br><span class="line"><span class="function"><span class="comment">// ↑ 通常可替换 ↓</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(DynamicArray&lt;T&gt; arr, Object elm)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="限定通配符的局限"><a href="#限定通配符的局限" class="headerlink" title="限定通配符的局限"></a>限定通配符的局限</h4><ul>
<li><p>需要写元素的时候，一般不用通配符</p>
<p><code>?</code> 就是表示类型安全无知，<code>? extends Number</code> 表示是 <code>Number</code> 的某个子类型，但不知道具体子类型，如果允许写入，Java 就无法确保类型安全性，所以干脆禁止。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(DynamicArray&lt;?&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Object tmp = arr.get(i);</span><br><span class="line">    arr.set(i, arr.get(j));</span><br><span class="line">    arr.set(j, tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↑ 报错，必须替换为 ↓</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(DynamicArray&lt;?&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    swapInternal(arr, i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swapInternal</span><span class="params">(DynamicArray&lt;T&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    T tmp = arr.get(i);</span><br><span class="line">    arr.set(i, arr.get(j));</span><br><span class="line">    arr.set(j, tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数间存在依赖关系时，一般也不用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;D, S extends D&gt; <span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(DynamicArray&lt;D&gt; dest, DynamicArray&lt;S&gt; src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; src.size(); i++) &#123;</span><br><span class="line">        dest.add(src.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然 ↑ 也可以简化成 ↓(如果你认为这是一种简化的话)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;D&gt; <span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(DynamicArray&lt;D&gt; dest, DynamicArray&lt;? extends D&gt; src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; src.size(); i++) &#123;</span><br><span class="line">        dest.add(src.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值依赖于类型参数，一般也不用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(DynamicArray&lt;T&gt; arr)</span> </span>&#123;</span><br><span class="line">    T max = arr.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.get(i).compareTo(max) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            max = arr.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="lt-super-E-gt-超类型通配符"><a href="#lt-super-E-gt-超类型通配符" class="headerlink" title="&lt;? super E&gt; 超类型通配符"></a>&lt;? super E&gt; 超类型通配符</h4><ul>
<li><p>灵活写入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyTo</span><span class="params">(DynamicArray&lt;E&gt; dest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        dest.add(get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyTo</span><span class="params">(DynamicArray&lt;? <span class="keyword">super</span> E&gt; dest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        dest.add(get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法，1 会报错，2 解决了 1 报错的问题</span></span><br><span class="line">DynamicArray&lt;Integer&gt; ints = <span class="keyword">new</span> DynamicArray&lt;Integer&gt;();</span><br><span class="line">ints.add(<span class="number">100</span>);</span><br><span class="line">ints.add(<span class="number">34</span>);</span><br><span class="line">DynamicArray&lt;Number&gt; numbers = <span class="keyword">new</span> DynamicArray&lt;Number&gt;();</span><br><span class="line">ints.copyTo(numbers);</span><br></pre></td></tr></table></figure>
</li>
<li><p>灵活比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(DynamicArray&lt;T&gt; arr)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; T <span class="title">max</span><span class="params">(DynamicArray&lt;T&gt; arr)</span></span></span><br></pre></td></tr></table></figure>

<p>想想第二句比第一句多了什么功能呢？</p>
</li>
<li><p>注意</p>
<p>Java 没有 <code>&lt;T super E&gt;</code> 这种语法，因此超类型通配符无法用类型参数替代。</p>
</li>
</ul>
<h4 id="理解练习"><a href="#理解练习" class="headerlink" title="理解练习"></a>理解练习</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title">copy</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">max</span><span class="params">(Collection&lt;? extends T&gt; coll, Comparator&lt;? <span class="keyword">super</span> T&gt; comp)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="细节和局限性"><a href="#细节和局限性" class="headerlink" title="细节和局限性"></a>细节和局限性</h3><h4 id="基本类型不能用于实例化类型参数"><a href="#基本类型不能用于实例化类型参数" class="headerlink" title="基本类型不能用于实例化类型参数"></a>基本类型不能用于实例化类型参数</h4><ul>
<li><code>Pair&lt;int&gt; minmax = new Pair&lt;int&gt;(1,100);</code> ✘</li>
</ul>
<h4 id="运行时类型信息不适用于泛型"><a href="#运行时类型信息不适用于泛型" class="headerlink" title="运行时类型信息不适用于泛型"></a>运行时类型信息不适用于泛型</h4><ul>
<li><code>Pair&lt;Integer&gt;.class</code> ✘</li>
<li><code>if(p1 instanceof Pair&lt;Integer&gt;)</code> ✘</li>
<li><code>if(p1 instanceof Pair&lt;?&gt;)</code> ✔</li>
</ul>
<h4 id="类型擦除可能会引发一些冲突"><a href="#类型擦除可能会引发一些冲突" class="headerlink" title="类型擦除可能会引发一些冲突"></a>类型擦除可能会引发一些冲突</h4><ul>
<li><p>这样的重载是错误的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(DynamicArray&lt;Integer&gt; intArr)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(DynamicArray&lt;String&gt; strArr)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>这样的写法是错误的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="class">// ...</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class">// <span class="title">Java</span> 编译器会提示错误，<span class="title">Comparable</span> 接口不能被实现两次。因为类型擦除后，实际上只能有一个。</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Child</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Child o)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能这样写↓</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Base o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Child)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        Child c = (Child)o;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="不能通过类型参数创建对象"><a href="#不能通过类型参数创建对象" class="headerlink" title="不能通过类型参数创建对象"></a>不能通过类型参数创建对象</h4><ul>
<li><p><code>T elm = new T();</code> ✘</p>
</li>
<li><p><code>T[] arr = new T[10];</code> ✘</p>
</li>
<li><p>迂回办法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 方法</span></span><br><span class="line">Date date = create(Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">StringBuilder sb = create(StringBuilder<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="泛型类型参数不能用于静态变量和方法"><a href="#泛型类型参数不能用于静态变量和方法" class="headerlink" title="泛型类型参数不能用于静态变量和方法"></a>泛型类型参数不能用于静态变量和方法</h4><p>静态变量和方法都是类型的属性，且与类型参数无关，所以不能使用泛型类类型参数（实参）。</p>
<p>不过，对于静态方法，它可以是泛型方法，可以声明自己的类型参数，这个参数与泛型类的类型参数是没有关系的。</p>
<h4 id="泛型与数组"><a href="#泛型与数组" class="headerlink" title="泛型与数组"></a>泛型与数组</h4><ul>
<li><p>不能使用泛型数组</p>
<p>因为数组本来就不是严格的，如下面的代码是可以通过编译的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] ints = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">Object[] objs = ints;</span><br><span class="line">objs[<span class="number">0</span>] = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure>

<p>引入泛型的误导性就更大了（因为类型擦除后泛型不起作用）。现实需要能够存放泛型对象的容器，可以使用原始类型的数组以及泛型容器。</p>
</li>
<li><p>转换泛型容器为数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E[] toArray(Class&lt;E&gt; type) &#123;</span><br><span class="line">    Object copy = Array.newInstance(type, size);</span><br><span class="line">    System.arraycopy(elementData, <span class="number">0</span>, copy, <span class="number">0</span>, size);</span><br><span class="line">    <span class="keyword">return</span> (E[])copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 函数</span></span><br><span class="line">Integer[] arr = ints.toArray(Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程的逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常用基础类</title>
    <url>/2019/01/03/Java-%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类<a id="more"></a></h3><h3 id="String-和-StringBuilder"><a href="#String-和-StringBuilder" class="headerlink" title="String 和 StringBuilder"></a>String 和 StringBuilder</h3><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><h3 id="JDK-中的时间与日期-API"><a href="#JDK-中的时间与日期-API" class="headerlink" title="JDK 中的时间与日期 API"></a>JDK 中的时间与日期 API</h3><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> <span class="comment">// 返回毫秒数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> <span class="comment">// 比较内部毫秒数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Date anotherDate)</span> <span class="comment">// 当前 Date 的毫秒数小于参数中的，返回 -1，相同返回 0，否则返回 1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date when)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Date when)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="comment">// 类似 long 中的实现</span></span></span><br></pre></td></tr></table></figure>

<h4 id="TimeZone"><a href="#TimeZone" class="headerlink" title="TimeZone"></a>TimeZone</h4><p><code>TimeZone</code> 表示时区，它是一个抽象类，有静态方法用于获取其实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TimeZone tz = TimeZone.getDefault();</span><br><span class="line">System.out.println(tz.getID());</span><br><span class="line"><span class="comment">// out: Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JVM 中设置时区 java -Duser.timezone=Asia/Shanghai xxxx，在系统中可以这样获取：</span></span><br><span class="line">System.out.println(System.getProperty(<span class="string">"user.timezone"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得时区的其他办法</span></span><br><span class="line">TimeZone tz = TimeZone.getTimeZone(<span class="string">"US/Eastern"</span>);</span><br><span class="line">TimeZone tz = TimeZone.getTimeZone(<span class="string">"GMT+08:00"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Locale"><a href="#Locale" class="headerlink" title="Locale"></a>Locale</h4><p>与 <code>TimeZone</code> 类似，<code>Locale</code> 也有静态方法获取默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line">System.out.println(locale.toString());</span><br><span class="line"><span class="comment">// out: zh_CN</span></span><br></pre></td></tr></table></figure>

<h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出当前时间</span></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">System.out.println(<span class="string">"year: "</span> +calendar.get(Calendar.YEAR));</span><br><span class="line"><span class="comment">// year: 2019</span></span><br><span class="line">System.out.println(<span class="string">"month: "</span>+ calendar.get(Calendar.MONTH));</span><br><span class="line"><span class="comment">// month: 7</span></span><br><span class="line">System.out.println(<span class="string">"day: "</span>+ calendar.get(Calendar.DAY_OF_MONTH));</span><br><span class="line"><span class="comment">// day: 8</span></span><br><span class="line">System.out.println(<span class="string">"hour: "</span>+ calendar.get(Calendar.HOUR_OF_DAY));</span><br><span class="line"><span class="comment">// hour: 20</span></span><br><span class="line">System.out.println(<span class="string">"minute: "</span>+ calendar.get(Calendar.MINUTE));</span><br><span class="line"><span class="comment">// minute: 31</span></span><br><span class="line">System.out.println(<span class="string">"second: "</span>+ calendar.get(Calendar.SECOND));</span><br><span class="line"><span class="comment">// second: 14</span></span><br><span class="line">System.out.println(<span class="string">"millisecond: "</span> + calendar.get(Calendar.MILLISECOND));</span><br><span class="line"><span class="comment">// millisecond: 103</span></span><br><span class="line">System.out.println(<span class="string">"day_of_week: "</span> + calendar.get(Calendar.DAY_OF_WEEK));</span><br><span class="line"><span class="comment">// day_of_week: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置和修改时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeInMillis</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hourOfDay, <span class="keyword">int</span> minute)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hourOfDay, <span class="keyword">int</span> minute, <span class="keyword">int</span> second)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> amount)</span> <span class="comment">// amount 为正数表示增加，负数表示减少</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roll</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> amount)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 实例</span></span></span><br><span class="line"><span class="function">Calendar calendar </span>= Calendar.getInstance();</span><br><span class="line">calendar.set(Calendar.HOUR_OF_DAY, <span class="number">13</span>);</span><br><span class="line">calendar.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">calendar.add(Calendar.MINUTE, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为 Date 或毫秒数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Date <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeInMillis</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Calendar 的比较</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Calendar anotherCalendar)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Object when)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Object when)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// format 将 Date 转换为字符串，parse 将字符串转换为 Date。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// getDateTimeInstance 既处理日期也处理时间，getDateInstance 只处理日期，getTimeInstance 只处理时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title">getDateTimeInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title">getDateInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title">getTimeInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 每类工厂方法都两种构造方法</span></span></span><br><span class="line"><span class="function">DateFormat <span class="title">getDateTimeInstance</span><span class="params">(<span class="keyword">int</span> dateStyle, <span class="keyword">int</span> timeStyle)</span></span></span><br><span class="line"><span class="function">DateFormat <span class="title">getDateTimeInstance</span><span class="params">(<span class="keyword">int</span> dateStyle, <span class="keyword">int</span> timeStyle, Locale aLocale)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 实例</span></span></span><br><span class="line"><span class="function">Calendar calendar </span>= Calendar.getInstance();</span><br><span class="line">calendar.set(<span class="number">2016</span>, <span class="number">07</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(DateFormat.getDateTimeInstance().format(calendar.getTime()));</span><br><span class="line"><span class="comment">// 2016-8-15 14:15:20</span></span><br><span class="line">System.out.println(DateFormat.getDateInstance().format(calendar.getTime()));</span><br><span class="line"><span class="comment">// 2016-8-15</span></span><br><span class="line">System.out.println(DateFormat.getTimeInstance().format(calendar.getTime()));</span><br><span class="line"><span class="comment">// 14:15:20</span></span><br><span class="line">System.out.println(DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.SHORT, Locale.CHINESE).format(calendar.getTime()));</span><br><span class="line"><span class="comment">// 2016年8月15日 下午2:15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DateFormat 的工厂方法里，我们没看到 TimeZone 参数，不过，DateFormat 提供了一个 setter 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeZone</span><span class="params">(TimeZone zone)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h4><p><code>SimpleDateFormat</code> 是 <code>DateFormat</code> 的子类，相比 <code>DateFormat</code>，它的一个主要不同是，它可以接受一个自定义的模式 (pattern) 作为参数，这个模式规定了 <code>Date</code> 的字符串形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.set(<span class="number">2016</span>, <span class="number">07</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 E HH时mm分ss秒"</span>);</span><br><span class="line">System.out.println(sdf.format(calendar.getTime())); <span class="comment">// out: 2016年08月15日 星期一 14时15分20秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  yyyy：表示四位的年</span></span><br><span class="line"><span class="comment">  MM：表示月，两位数表示</span></span><br><span class="line"><span class="comment">  dd：表示日，两位数表示</span></span><br><span class="line"><span class="comment">  HH：表示 24 小时制的小时数，两位数表示</span></span><br><span class="line"><span class="comment">  mm：表示分钟，两位数表示</span></span><br><span class="line"><span class="comment">  ss：表示秒，两位数表示</span></span><br><span class="line"><span class="comment">  SSS：表示毫秒，三位数表示</span></span><br><span class="line"><span class="comment">  E：表示星期几</span></span><br><span class="line"><span class="comment">  hh：表示 12 小时制的小时数，两位数表示</span></span><br><span class="line"><span class="comment">  a：表示的是上午还是下午</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.set(<span class="number">2016</span>, <span class="number">07</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd hh:mm:ss a"</span>);</span><br><span class="line">System.out.println(sdf.format(calendar.getTime())); <span class="comment">// out: 2016/08/15 02:15:20 下午</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了将 Date 转换为字符串，SimpleDateFormat 也可以方便的将字符转化为 Date</span></span><br><span class="line">String str = <span class="string">"2016-08-15 14:15:20.456"</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Date date = sdf.parse(str);</span><br><span class="line">    SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年M月d h:m:s.S a"</span>);</span><br><span class="line">    System.out.println(sdf2.format(date));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// out: 2016年8月15 2:15:20.456 下午</span></span><br></pre></td></tr></table></figure>

<p><code>DateFormat</code>/<code>SimpleDateFormat</code> 不是线程安全的，关于线程概念，后续文章我们会详解，这里简单说明一下，多个线程同时使用一个 <code>DateFormat</code> 实例的时候，会有问题，因为 <code>DateFormat</code> 内部使用了一个 <code>Calendar</code> 实例对象，多线程同时调用的时候，这个 <code>Calendar</code> 实例的状态可能就会紊乱。</p>
<p>解决这个问题大概有以下方案：</p>
<ul>
<li>每次使用 <code>DateFormat</code> 都新建一个对象</li>
<li>使用线程同步</li>
<li>使用 <code>ThreadLocal</code></li>
<li>使用 <code>Joda-Time</code>，<code>Joda-Time</code> 是线程安全的</li>
</ul>
<h3 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h3>]]></content>
      <tags>
        <tag>Java 编程的逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基石</title>
    <url>/2019/01/02/Java-%E5%9F%BA%E7%9F%B3/</url>
    <content><![CDATA[<h3 id="类的基础"><a href="#类的基础" class="headerlink" title="类的基础"></a>类的基础</h3><ul>
<li><code>this</code> 和 <code>super</code> 都要放在构造函数的第一行。</li>
<li><code>import</code> 不能嵌套导入，<code>import java.util.*.*</code> 这种形式也是无效的。</li>
<li>静态导入的语法是：<code>import static java.util.Arrays.*</code>，它能导入类的公开静态方法和成员，但是静态导入也不能滥用，因为这会让代码中的类难以区分。</li>
<li>关于包访问权限要注意：同一个包指的是同一个直接包，子包下面的类不能访问父包中的类、变量和方法。<a id="more"></a></li>
</ul>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ul>
<li><code>this</code> 引用一个对象，是实实在在的，可以作为函数参数，可以作为返回值，但是 <code>super</code> 只是一个关键字，不能作为参数和返回值。</li>
<li>静态绑定是指在编译期根据声明对象的类型进行绑定，实例变量、静态变量、静态方法、private 方法、构造方法、final 方法，都是静态绑定的。</li>
<li>动态绑定是指在运行时根据具体对象的类型进行绑定。</li>
<li>在继承关系中，如果子类不知道鸡类方法的实现细节，它就不能正确地进行拓展。使用组合可以抵挡父类变化对子类的影响。</li>
</ul>
<h3 id="类的拓展"><a href="#类的拓展" class="headerlink" title="类的拓展"></a>类的拓展</h3><h4 id="Java-8-9-对接口的增强"><a href="#Java-8-9-对接口的增强" class="headerlink" title="Java 8/9 对接口的增强"></a>Java 8/9 对接口的增强</h4><ul>
<li><p>Java 8</p>
<ul>
<li>在 Java 8 之前，接口中都是抽象方法，都没有实现体。</li>
<li>Java 8 引入了<strong>默认方法</strong>和<strong>静态方法</strong>，它们都有<strong>实现体</strong>。</li>
<li>默认方法有默认的实现，实现类可以改变它的实现，也可以不改变。主要是为了函数式数据处理的需求，便于给接口增加功能。</li>
<li>静态方法的增加使 Java 不需要在另一个文件（如之前的 Collections 类）中提供对接口的操作方法了。</li>
</ul>
</li>
<li><p>Java 9</p>
<p>在 Java 8 中，静态方法和默认方法都必须是 public 的，Java 9 去除了这个限制，他们都可以是 private 的，主要是为了方便多个静态或默认方法复用代码。</p>
</li>
</ul>
<h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p>抽象类和接口不是替代的关系，而是常常配合使用。接口声明能力，抽象类提供默认实现。</p>
<p>从语法的角度上来说，抽象类不是必需的，但是他可以减少误用，使代码更清晰。</p>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>一个类可以放在另一个类的内部，称之为内部类，相对而言，包含它的类称之为外部类。</p>
<p>为什么要放到别的类内部呢？一般而言，内部类与包含它的外部类有比较密切的关系，而与其他类关系不大，定义在类内部，可以实现对外部完全隐藏，可以有更好的封装性，代码实现上也往往更为简洁。</p>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>一个内部类如果<strong>与外部类关系密切，且不依赖于外部类实例</strong>，则可以考虑定义为静态内部类。</p>
<ul>
<li>Integer 类内部有一个私有静态内部类 IntegerCache，用于支持整数的自动装箱。</li>
<li>表示链表的 LinkedList 类内部有一个私有静态内部类 Node，表示链表中的每个节点。</li>
<li>Character 类内部有一个 public 静态内部类 UnicodeBlock，用于表示一个 Unicode block。</li>
</ul>
<h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>与静态内部类不同，成员内部类中不可以定义静态变量和方法 (final 变量例外，它等同于常量），方法内部类和匿名内部类也都不可以。Java 这个规定大概是因为这些内部类是与外部实例相连的，不应独立使用，而静态变量和方法作为类型的属性和方法，一般是独立使用的，在内部类中意义不大吧，而如果内部类确实需要静态变量和方法，也可以挪到外部类中。</p>
<p>如果内部<strong>类与外部类关系密切，且操作或依赖外部类实例变量和方法</strong>，则可以考虑定义为成员内部类。</p>
<p>外部类的一些方法的返回值可能是某个接口，为了返回这个接口，外部类方法可能使用内部类实现这个接口，这个内部类可以被设为 private，对外完全隐藏。</p>
<p>比如说，在 Java API 类 LinkedList 中，它的两个方法 listIterator 和 descendingIterator 的返回值都是接口 Iterator，调用者可以通过 Iterator 接口对链表遍历，listIterator 和 descendingIterator 内部分别使用了成员内部类 ListItr 和 DescendingIterator，这两个内部类都实现了接口 Iterator。</p>
<h4 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h4><p>方法内部类都可以用成员内部类代替，至于方法参数，也可以作为参数传递给成员内部类。不过，如果类只在某个方法内被使用，使用方法内部类，可以实现更好的封装。</p>
<p>方法内部类可以访问方法中的参数和局部变量，这些变量必须被声明为 final，因为实际上，方法内部类操作的并不是外部的变量，而是它自己的实例变量，只是这些变量的值和外部一样，对这些变量赋值，并不会改变外部的值，为避免混淆，所以干脆强制规定必须声明为 final。</p>
<blockquote>
<p>在 Java 8 中，已经不需要强制修饰成 final 了，因为编译器偷偷的帮你加上了看不见的 final。</p>
</blockquote>
<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>匿名内部类只能被使用一次，用来创建一个对象。它没有名字，没有构造方法，但可以根据参数列表，调用对应的父类构造方法。它可以定义实例变量和方法，可以有初始化代码块，初始化代码块可以起到构造方法的作用，只是构造方法可以有多个，而初始化代码块只能有一份。</p>
<p>因为没有构造方法，它自己无法接受参数，如果必须要参数，则应该使用其他内部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x, <span class="keyword">final</span> <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Point p = <span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span>                              </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distance</span><span class="params">()</span> </span>&#123;             </span><br><span class="line">                <span class="keyword">return</span> distance(<span class="keyword">new</span> Point(x,y));     </span><br><span class="line">            &#125;                                      </span><br><span class="line">        &#125;;                                                                           </span><br><span class="line">        System.out.println(p.distance());        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与方法内部类一样，匿名内部类也可以访问外部类的所有变量和方法，可以访问方法中的 final 参数和局部变量。</p>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;</span><br><span class="line">    SMALL, MEDIUM, LARGE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Size size = Size.SMALL;</span><br><span class="line"></span><br><span class="line">System.out.println(size.toString());</span><br><span class="line"><span class="comment">//-- ↑等价于↓ --</span></span><br><span class="line">System.out.println(size.name());</span><br><span class="line"></span><br><span class="line">System.out.println(size==Size.SMALL); <span class="comment">//true</span></span><br><span class="line">System.out.println(size.equals(Size.SMALL)); <span class="comment">//true</span></span><br><span class="line">System.out.println(size==Size.MEDIUM); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;</span><br><span class="line">    SMALL(<span class="string">"S"</span>,<span class="string">"小号"</span>),</span><br><span class="line">    MEDIUM(<span class="string">"M"</span>,<span class="string">"中号"</span>),</span><br><span class="line">    LARGE(<span class="string">"L"</span>,<span class="string">"大号"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String abbr;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Size</span><span class="params">(String abbr, String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abbr = abbr;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAbbr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abbr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Size <span class="title">fromAbbr</span><span class="params">(String abbr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Size size : Size.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(size.getAbbr().equals(abbr)) &#123;</span><br><span class="line">                <span class="keyword">return</span> size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="受检异常与未受检异常"><a href="#受检异常与未受检异常" class="headerlink" title="受检异常与未受检异常"></a>受检异常与未受检异常</h4><p>RuntimeException 和其子类是未受检异常，Error 和其子类也是。</p>
<p>受检异常和未受检异常的区别在于，受检异常强制要求程序员进行处理，而未受检异常不会。</p>
<h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>自定义异常的类型取决于其父类，父类决定了它是不是受检异常。</p>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>异常处理机制将根据抛出的异常类型找第一个匹配的 catch 块，找到后，执行 catch 块内的代码，不再执行其他 catch 块。</p>
<p>在 Java 7 中，新增了一种语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ExceptionA | ExceptionB e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><ol>
<li>如果 try 或者 catch 语句内有 return 语句，则 return 语句在 finally 语句执行后才执行，且 finally 不能改变返回值。</li>
<li>如果在 finally 中也有 return 语句，try 和 catch 中的 return 语句会丢失，实际会返回 finally 中的返回值。</li>
<li>finally 中的 return 不仅会覆盖 try 和 catch 中的返回值，还会掩盖 try 和 catch 中的异常，仿佛一切未发生。</li>
<li>如果 finally 中抛出了异常，则原异常也会被覆盖。</li>
</ol>
<h4 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h4><p>Java 7 开始支持的一种语法，针对实现了 <code>java.lang.AutoCloseable</code> 接口的对象。</p>
<p>在 Java 9 之前，资源需要在 try 后面括号中初始化，现在只要资源是实际上的 final 就可以（没有被重新赋值）。</p>
<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><ul>
<li>未受检异常表示编程的逻辑错误。受检异常表示程序本身没问题，但是由于 I/O、网络和数据库等不可预知的错误导致的异常，调用者应该进行适当的处理。</li>
<li>异常不能替代正常的条件判断。</li>
<li>真正出现异常的时候，应该抛出异常，而不是返回特殊值。</li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程的逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 必知必会</title>
    <url>/2018/12/20/Maven-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    <content><![CDATA[<h3 id="Maven-简介"><a href="#Maven-简介" class="headerlink" title="Maven 简介"></a>Maven 简介</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>应该有很多功能，不过我个人常用的是  JAR 包管理、自定义项目模板以及自动构建。</p>
<h4 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h4><p>pom 其实是 Project Object Mode 的缩写，实际上就是把项目当成对象来看待，通过 Maven 的构建工具可以让项目和项目之间产生关联。</p>
<h4 id="JAR-的坐标"><a href="#JAR-的坐标" class="headerlink" title="JAR 的坐标"></a>JAR 的坐标</h4><p>每一 JAR 文件都有一个唯一坐标，通过坐标可以精确确定是哪个 JAR：<a id="more"></a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">groupId 是实际的项目，推荐命名为“官网网址倒写.项目名”，如：xyz.xijinian.myproject</span></span><br><span class="line"><span class="comment">artifactId 实际项目中的一个 Maven 项目(模块)，推荐命名为“实际项目名-模块名”，如：myproject-first，这是为了方便寻找实际构建，因为 Maven 生成的构件文件名会以 artifactId 开头，这样就能快速地从一个文件夹中找到某个项目的一组组件</span></span><br><span class="line"><span class="comment">version 当然就是这个模块的版本号啦</span></span><br><span class="line"><span class="comment">packaging 是打包方式(和上面的三项不同，这个可以不写，不写默认 jar)</span></span><br><span class="line"><span class="comment">classifier 用来帮助定义构建输出一些附属组件，如 xxx-javadoc.jar、xxx-sources.jar 等，它是不能自己定义的，因为附属组件不是项目直接默认生成的，而是由附加的插件帮助生成</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过 <a href="http://mvnrepository.com" target="_blank" rel="noopener">http://mvnrepository.com</a> 来查看坐标。</p>
<h4 id="新建-Maven-项目"><a href="#新建-Maven-项目" class="headerlink" title="新建 Maven 项目"></a>新建 Maven 项目</h4><p>可以选择模板构建，甚至可以<a href="https://mp.weixin.qq.com/s/JXV5Rh8ZeqMAVKxVsbtubA" target="_blank" rel="noopener">自定义 archeType 项目模板</a>，这里我们选择了一个 Servlet3 项目模板：</p>
<p><img src="https://i.loli.net/2018/12/13/5c11c3655a6ea.png" alt=""></p>
<h4 id="Maven-项目的打包类型"><a href="#Maven-项目的打包类型" class="headerlink" title="Maven 项目的打包类型"></a>Maven 项目的打包类型</h4><p>Eclipse 在创建 Maven 项目的时候会让你选择其 Packaging 类型，但是 IDEA 不会，如果我们想更换打包形式，可以在 pom.xml  文件中更改 Packaging 类型：</p>
<p><img src="https://i.loli.net/2018/12/13/5c125a6392c2e.png" alt=""></p>
<p>如果要将项目打包，在右侧的 Maven Projects 窗口点击 package 就可以：</p>
<p><img src="https://i.loli.net/2018/12/13/5c125ad06fbb5.png" alt=""></p>
<h3 id="Maven-项目目录结构"><a href="#Maven-项目目录结构" class="headerlink" title="Maven 项目目录结构"></a>Maven 项目目录结构</h3><h4 id="jar-类型"><a href="#jar-类型" class="headerlink" title="jar 类型"></a>jar 类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── mavensample1.iml → 这个是 IDEA 自动生成的</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── xyz</span><br><span class="line">    │   │       └── xijinian</span><br><span class="line">    │   │           └── MainApp.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       └── log4j2.properties</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── xyz</span><br><span class="line">        │       └── xijinian</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure>

<h4 id="war-类型"><a href="#war-类型" class="headerlink" title="war 类型"></a>war 类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── mavensample2.iml → 这个是 IDEA 自动生成的</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── xyz</span><br><span class="line">    │   │       └── xijinian</span><br><span class="line">    │   │           └── HelloServlet.java</span><br><span class="line">    │   ├── resources</span><br><span class="line">    │   │   └── log4j2.properties</span><br><span class="line">    │   └── webapp</span><br><span class="line">    │       ├── WEB-INF</span><br><span class="line">    │       │   └── web.xml</span><br><span class="line">    │       └── index.jsp</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── xyz</span><br><span class="line">        │       └── xijinian</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure>

<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="依赖的配置"><a href="#依赖的配置" class="headerlink" title="依赖的配置"></a>依赖的配置</h4><p>我们上文中写了不少依赖配置示例，但是这些都是简易的，事实上依赖有很多配置项，有时你不得不使用它们：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>...<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>...<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>...<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释一下这些依赖配置的标签</p>
<ul>
<li>groupId、artifactId、version 是依赖的坐标，就不说了</li>
<li>type 是依赖的类型，对应项目坐标定义的 packaging，一般来说不必声明，默认值为 jar</li>
<li>scope 是依赖的范围</li>
<li>optional 标记依赖是否可选</li>
<li>exclusions 用来排除传递性依赖</li>
</ul>
<h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><ul>
<li><p>classpath 的概念</p>
<p>一个项目的运行，需要很多 JAR 包，这些包有的是项目编译的时候用，有的是项目运行的时候用，还有的是项目测试的时候用，所以事实上一个项目具有这三种状况对应的 classpath。不然你上线一个项目还要把很多编译、测试时期使用的 JAR 上传到服务器，浪费服务器的硬盘和上传项目时的带宽，甚至会造成一些不必要的错误。</p>
</li>
<li><p>scope 的可选项</p>
<p>scope 有几个可选的依赖范围，分别是 compile、test、provided、runtime、system 和 import，这几个选项修饰一个 JAR 包所在的 classpath，具体来说如下：</p>
<table>
<thead>
<tr>
<th align="center">依赖范围</th>
<th align="center">编译 classpath</th>
<th align="center">测试 classpath</th>
<th align="center">运行classpath</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">compile</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center">spring-core</td>
</tr>
<tr>
<td align="center">test</td>
<td align="center"></td>
<td align="center">✔️</td>
<td align="center"></td>
<td align="center">JUnit</td>
</tr>
<tr>
<td align="center">provided</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center"></td>
<td align="center">servlet-api</td>
</tr>
<tr>
<td align="center">runtime</td>
<td align="center"></td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center">JDBC 驱动实现</td>
</tr>
<tr>
<td align="center">system</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center"></td>
<td align="center">非 Maven 库文件</td>
</tr>
<tr>
<td align="center">import</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">继承关系中介绍</td>
</tr>
</tbody></table>
</li>
<li><p>传递性依赖</p>
<p>项目依赖了 spring-core，spring-core 依赖了 commons-logging，那可以说项目对 spring-core 是第一直接依赖，spring-core 对 commons-logging 是第二直接依赖，那么项目对 commons-logging 到底是怎样依赖的呢，要给它放在某些 classpath 中嘛？真相是这取决于第一直接依赖和第二直接依赖的范围。下表所示的是 Maven 对此问题定下的规则，最左一列表示第一直接依赖，最上一行表示第二直接依赖：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">compile</th>
<th align="center">test</th>
<th align="center">provided</th>
<th align="center">runtime</th>
</tr>
</thead>
<tbody><tr>
<td align="center">compile</td>
<td align="center">compile</td>
<td align="center">✘</td>
<td align="center">✘</td>
<td align="center">runtime</td>
</tr>
<tr>
<td align="center">test</td>
<td align="center">test</td>
<td align="center">✘</td>
<td align="center">✘</td>
<td align="center">test</td>
</tr>
<tr>
<td align="center">provided</td>
<td align="center">provided</td>
<td align="center">✘</td>
<td align="center">provided</td>
<td align="center">provided</td>
</tr>
<tr>
<td align="center">runtime</td>
<td align="center">runtime</td>
<td align="center">✘</td>
<td align="center">✘</td>
<td align="center">runtime</td>
</tr>
</tbody></table>
</li>
<li><p>依赖调节</p>
<p>想一下这样的情况：</p>
<p>① 项目依赖了 A、B、C；</p>
<p>② A 依赖了 Z-1；</p>
<p>③ B 依赖了 X，X依赖了 Z-2；</p>
<p>③ C 依赖了 Z-3。</p>
<p>问题来了，项目到底应该引入那个版本的 Z 呢？当然不可以全都引入，那会错乱的。Maven 的解决方案是这样的—— Z-1 和 Z-3 的路径比 Z-2 短，所以抛弃 Z-2，至于到底引入 Z-1 还是 Z-3，就看 pom.xml 文件中的定义 A 和 C 的顺序了，它俩谁先被定义，Z 就引入谁的版本。</p>
</li>
</ul>
<h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><p>项目依赖了 A，A 依赖 X 或者 Y，而且 X 和 Y 冲突，A 不能同时依赖它们两个。那项目是依赖 X 还是 Y 呢？</p>
<p>Maven 中遇到这样的情况，A 就应该将 X、Y 都设为自己的可选依赖（即 X、Y 的 <code>&lt;optional&gt;</code> 设为 <code>true</code>），这样项目将 A 设置为依赖的时候，X 和 Y 都不会成为项目本身的依赖。</p>
<p>如果项目也想依赖 X 或者 Y，那就需要显示声明。下面举个例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 被 myproject-master 依赖的 myproject-a --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4-701.jbdc3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- myproject-master --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-master<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="排除传递性依赖"><a href="#排除传递性依赖" class="headerlink" title="排除传递性依赖"></a>排除传递性依赖</h4><p>项目 A 依赖了项目 B，项目 B 依赖了项目 C 的不稳定版本，那么项目 A 岂不是也不稳定了？为此，项目 A 在依赖项目 B 的时候，可以排除对非稳定版 C 的依赖，同时引入一个对稳定版 C 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 被 myproject-a 依赖的 myproject-b --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.4-beta-2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- myproject-a --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><ul>
<li><p>归类依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优化依赖</p>
<ul>
<li><p><code>mvn dependency:list</code></p>
<p> 这个命令可以显示本项目的所有依赖以及对应的依赖范围。</p>
</li>
<li><p><code>mvn dependency:tree</code></p>
<p> 这个命令可以展示依赖之间的关系，看看每一个依赖是通过哪条路径引入的。</p>
</li>
<li><p><code>mvn dependency:analyze</code></p>
<p> 这个命令可以分析出两个重要的 Maven 指标：① Used undeclare dependency —— 项目中我们依赖的，但是没有显式声明的依赖。一般是被第一直接依赖传递过来的第二、三、四…直接依赖们，如果没有显式声明指定它们的版本号，将来升级第一直接依赖时可能会带来一些不稳定的因素；② Unused declared dependency —— 项目中未使用的却显式声明的依赖。这玩意多了可能占用一些不必要的系统资源，但注意！你不能完全相信这个分析结果，它所谓的未使用指的是编译（主代码+测试代码）的时候未使用，而真正执行起（主代码+测试代码）时候所需的依赖，是这个 <strong>maven-dependency-plugin</strong> 插件无法检测的，不可以根据其结果盲目删除“无用的”依赖。</p>
</li>
</ul>
</li>
</ul>
<h3 id="Maven-项目之间的关系"><a href="#Maven-项目之间的关系" class="headerlink" title="Maven 项目之间的关系"></a>Maven 项目之间的关系</h3><h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p>标签 <code>&lt;dependency&gt;</code> 把另一个项目（项目以 JAR 包形式，当然不一定是项目，可能只是一个模块或者类库）引入到当前项目，这是最普通的包管理方法。用两个跟前面不一样的例子，至于 <code>${xxx}</code> 的这种形式其实是引用了 <code>&lt;properties&gt;</code> 标签中定义的“键值对”：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>66.0<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>6.6.66<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><p>继承的目的是为了消除重复的配置 —— 在父项目中定义的很多东西，子项目可以继承，这样可以把一些子项目的共有的配置提取出来。</p>
<p>和 Java 的继承类似，pom 文件的继承也带来了一些问题，譬如你只想做一个字符串的工具类，那么这个子项目何必引入其它子项目都要引入的 spring-core.jar 呢？Maven 通过 <code>&lt;dependencyManagement&gt;</code>、<code>&lt;pluginManagement&gt;</code> 等标签解决了这些问题。简单的说，就是在父项目这些标签中定义的依赖、插件，子项目完全可以不引入，想要引入的部分需在子项目中声明 <code>&lt;dependencies&gt;</code>、<code>&lt;plugins&gt;</code>，而且子项目中只写 <code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code> 就可以了，因为 <code>&lt;version&gt;</code> 直接被父项目中的 <code>&lt;dependencyManagement&gt;</code> 和 <code>&lt;pluginManagement&gt;</code> 接管了，这样就统一了子项目中各种依赖和插件的版本（样例可直接参考公司 xxx-parent 项目的 pom.xml 和 mp-service-yyy 项目的 pom.xml，公司很多子项目可能因为种种原因对一些依赖直接硬写了版本号，不推荐这样做）。</p>
<p>我猜你会说这省略的代码太有限了吧！是的，确实有限，但是为了灵活、为了版本约定，这些都是值得的，就像《重构》那本书里所展现的一样，重构一个项目后，代码往往变得更长了，但同时代码逻辑也更清晰了。</p>
<p>需要注意的是父项目的打包类型必须是 pom，子项目的打包方式可以是 war 或者 jar，如果子项目是其他项目的父项目，那么子项目也需要将打包类型设置为 pom。</p>
<p>子项目关联父类项目使用的是 <code>&lt;parent&gt;</code> 标签，如果子项目和父项目的 <code>&lt;groupId&gt;</code> 和 <code>&lt;version&gt;</code> 相同，那么在子项目中就可以不配置 <code>&lt;groupId&gt;</code> 和 <code>&lt;version&gt;</code>，通过上文可知，子项目中可以看到父项目是谁，但是父项目中却看不到子项目都有谁：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>XXX :: Parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../parent/<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>MP :: Service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>9.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着说一下之前在“依赖范围”小节中没说完的 import 属性，事实上它只在 <code>&lt;dependencyManagement&gt;</code> 元素下有效，使用该范围的依赖通常指向一个 pom 文件，作用是将目标 pom 中的 dependencyManagement 配置导入并合并到当前 pom 的 dependencyManagement 元素中，示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目标 pom --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>My :: Project :: Parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当前 pom --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.myproject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"> this → <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h4><p>聚合的目的是为了快速构建，以 mp-service 为例，其下面有非常多的接口和实现拆分，而每个接口、每个实现都有一个 pom.xml，一个一个去手动启动实在是繁琐，所以直接做了一个聚合的空壳，即 mp-service 项目的 pom.xml 文件，我们可以看看它是怎么做的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mp-service 的 pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../parent/<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>MP :: Service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>9.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mp-service-yyy-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>mp-service-yyy<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用 mp-service-yyy-api 作为被聚合项目得示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.xijinian.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../../parent/<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mp-service-yyy-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>MP :: Service :: yyy :: Api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>9.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="聚合和继承的关系"><a href="#聚合和继承的关系" class="headerlink" title="聚合和继承的关系"></a>聚合和继承的关系</h4><p>事实上聚合和依赖没什么关系，目的也不一样，鉴于网上很多博客乱说，在此澄清一下。</p>
<p>聚合的目的是一次性启动多个项目，继承为了统一控制依赖和插件的版本、同时可以减少那么一丢丢代码。</p>
<p>如果非要说它们有啥相同的地方，那么应该说聚合项目和父项目的 packaging 类型都是 pom 吧…对了还有它俩除了 pom.xml 文件外都没啥内容…</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="三套生命周期"><a href="#三套生命周期" class="headerlink" title="三套生命周期"></a>三套生命周期</h4><p>Maven 拥有三套相互独立的生命周期，它们分别为 clean、default 和 site。clean 生命周期的目的是清理项目，default 生命周期的目的是构建项目，而 site 生命周期的目的是建立项目站点。</p>
<ol>
<li><p>clean 生命周期</p>
<ul>
<li><strong>pre-clean</strong> 执行一些需要在 clean 之前完成的工作</li>
<li><strong>clean</strong> 移除所有上一次构建生成的文件</li>
<li><strong>post-clean</strong> 执行一些需要在 clean 之后完成的工作</li>
</ul>
</li>
<li><p>default 生命周期</p>
<ul>
<li>validate</li>
<li>initialize</li>
<li>generate-sources</li>
<li><strong>process-sources</strong> 一般指将 src/main/resources 中的内容进行变量替换的工作后，复制到项目输出的主 classpath 中</li>
<li>generate-resources</li>
<li>process-resources</li>
<li><strong>compile</strong> 编译项目的主代码，一般指将 src/main/java 中的内容编译输出到项目的主 classpath 中</li>
<li>process-classes</li>
<li>generate-test-sources </li>
<li>*<em>process-test-sources *</em>处理项目测试资源，一般指将 src/test/resources 中的内容进行变量替换的工作后，复制到项目输出的测试 classpath 中</li>
<li>generate-test-resources</li>
<li>process-test-resources</li>
<li><strong>test-compile</strong> 编译项目的测试代码，一般指将 src/test/java 中的内容编译输出到项目的测试 classpath 中</li>
<li>process-test-classes</li>
<li><strong>test</strong> 使用合适的单元测试框架运行测试，这些测试代码不会被打包或部署</li>
<li>prepare-package</li>
<li><strong>package</strong> 接受编译好的代码，打包成可发布的格式，如 JAR</li>
<li>pre-integration-test</li>
<li>integration-test</li>
<li>post-integration-test</li>
<li>verify</li>
<li><strong>install</strong> 将包安装至本地仓库，以让本地其它 Maven 项目依赖</li>
<li><strong>deploy</strong> 将最终的包复制到远程的仓库，供其他开发人员和 Maven 项目使用</li>
</ul>
</li>
<li><p>site 生命周期</p>
<ul>
<li><p><strong>pre-site</strong> 执行一些需要在生成站点文档之前完成的工作</p>
</li>
<li><p><strong>site</strong> 生成项目的站点文档</p>
</li>
<li><p><strong>post-site</strong> 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p>
</li>
<li><p><strong>site-deploy</strong> 将生成的站点文档部署到特定的服务器上</p>
</li>
</ul>
</li>
</ol>
<h4 id="命令行里的生命周期"><a href="#命令行里的生命周期" class="headerlink" title="命令行里的生命周期"></a>命令行里的生命周期</h4><p>上面所述的三个生命周期相互独立，并且每一个生命周期中的所有步骤都是有先后依赖的，举例说明就是 <code>install</code> 之前，项目肯定执行了 <code>validate</code>、<code>initialize</code> … <code>verify</code>，因此其实我们常用的命令并不多，并不需要我们事无巨细地一个一个命令敲，下面说一些常见的命令：</p>
<ul>
<li><p><code>mvn clean</code></p>
</li>
<li><p><code>mvn test</code></p>
</li>
<li><p><code>mvn clean intall</code></p>
<p>这相当于是两个命令，在两套声明周期里运行。</p>
</li>
<li><p><code>mvn clean deploy site-deploy</code></p>
<p>这相当于是三个命令，在三套声明周期里运行。</p>
</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="插件目标"><a href="#插件目标" class="headerlink" title="插件目标"></a>插件目标</h4><p>就像我们上文中在优化依赖时使用的 <strong>maven-dependency-plugin</strong> 插件一样，一个插件可能拥有多个功能，这是出于复用代码的考虑（一个插件的功能大多相似，逻辑重复）。每个<strong>插件目标</strong>我们可以简要理解为插件的一个功能。</p>
<ul>
<li><code>mvn dependency:list</code> →目标→ dependency:list</li>
<li><code>mvn dependency:tree</code> →目标→ dependency:tree</li>
<li><code>mvn dependency:analyze</code> →目标→ dependency:analyze</li>
</ul>
<h4 id="插件绑定"><a href="#插件绑定" class="headerlink" title="插件绑定"></a>插件绑定</h4><p>指 Maven 的生命周期和插件目标相互绑定，因为 Maven 的生命周期只相当于接口，具体的实现还是要插件来完成，当然，<strong>约定大于配置</strong>，我们需要的大部分实现，Maven 都已经偷偷配置好插件（即<a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings" target="_blank" rel="noopener">内置绑定</a>）了。只有你想搞一些特定需求的时候，才需要自己来搞插件。</p>
<h4 id="自定义绑定"><a href="#自定义绑定" class="headerlink" title="自定义绑定"></a>自定义绑定</h4><p>Talk is cheap！直接看看我们应该怎么给生命周期绑定一个自定义插件吧：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excutions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excutions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述代码中，我们将 <strong>maven-source-plugin</strong> 插件的 <strong>jar-no-fork</strong> 目标绑定在了 Maven 生命周期的 verify 阶段，如果不主动去写 <code>&lt;phase&gt;</code> 选项，此插件就绑定到其默认绑定的生命阶段上（前提是插件本身要有默认的绑定阶段）。</p>
<h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><ol>
<li><p>命令行插件配置</p>
<p><code>mvn install -Dmaven.test.skip=true</code></p>
</li>
<li><p>pom 中插件全局配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">grouldId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">grouldId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pom 中插件任务配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>ant-validate<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tasks</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">echo</span>&gt;</span>I'm bound to validate phase.<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tasks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>ant-verify<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tasks</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">echo</span>&gt;</span>I'm bound to verify phase.<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tasks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="获取插件信息"><a href="#获取插件信息" class="headerlink" title="获取插件信息"></a>获取插件信息</h4><ol>
<li><p>我们可以直接在 <a href="http://maven.apache.org/plugins/" target="_blank" rel="noopener">Maven 官方网站</a>上获取相应的插件以及文档</p>
</li>
<li><p>我们可以使用 <strong>maven-help-plugin</strong> 来帮助获取插件的详细信息，譬如我们想获得 <strong>maven-compiler-plugin</strong> 2.1 版本的信息，我们就可以这样写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mvn help:describe-Dplugin = org.apache.maven.plugins:maven-compiler-plugin:2.1</span><br><span class="line"><span class="comment">&lt;!-- 简化为 ↓↑ --&gt;</span></span><br><span class="line">mvn help:describe-Dplugin = org.apache.maven.plugins:maven-compiler-plugin</span><br><span class="line"><span class="comment">&lt;!-- 简化为 ↓↑ --&gt;</span></span><br><span class="line">mvn help:describe-Dplugin = compiler</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果想要获取详细的插件信息，可以加上 detail 参数 --&gt;</span></span><br><span class="line">mvn help:describe-Dplugin = compiler-Ddetail</span><br><span class="line"><span class="comment">&lt;!-- 如果只想要获取插件目标，可以加上 goal 参数 --&gt;</span></span><br><span class="line">mvn help:describe-Dplugin = compiler-Dgoal = compile</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="SSM-相关"><a href="#SSM-相关" class="headerlink" title="SSM 相关"></a>SSM 相关</h3><h4 id="资源拷贝插件"><a href="#资源拷贝插件" class="headerlink" title="资源拷贝插件"></a>资源拷贝插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置-Tomcat-插件"><a href="#配置-Tomcat-插件" class="headerlink" title="配置 Tomcat 插件"></a>配置 Tomcat 插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 控制tomcat端口号 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 项目发布到tomcat后的名称 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- / 相当于把项目发布名称为ROOT --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- /abc --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h4><ol>
<li><p>修改 tomat/conf/tomcat-users.xml，添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 maven 项目的 pom.xml 中 tomcat 插件的 <code>&lt;configuration&gt;</code> 里配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 控制 tomcat 端口号 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 项目发布到 tomcat 后的名称 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- “/” 相当于把项目发布名称为ROOT --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- /abc --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">path</span>&gt;</span>/jqk<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">password</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.139.128:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="打包插件-Assembly"><a href="#打包插件-Assembly" class="headerlink" title="打包插件 Assembly"></a>打包插件 Assembly</h4><ul>
<li>pom 配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定打包描述文件的位置：相对项目根目录的路径 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- assembly打包的描述文件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>assembly/assembly.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">assembly</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该字符会添加到最终 tar.gz 包的名称后面，作为后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 tar.gz 压缩包中是否包含根文件夹 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>assembly/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>assembly/conf<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将所有依赖的 jar 包打包到压缩包中的根目录下的 lib 目录中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此 lib 目录中包含自己开发的项目 jar 包以及第三方 jar 包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>下载<a href="https://github.com/apache/incubator-dubbo/tree/f31fec5c22442ec86018cf4b111544c2456f8e91/dubbo-container/dubbo-container-api/src/main/resources/META-INF/assembly/bin" target="_blank" rel="noopener">模板</a>，把内容复制到 assembly 目录下的对应 bin 文件夹。</p>
<p>详情可以参考一下<a href="https://blog.csdn.net/u011066435/article/details/73977308" target="_blank" rel="noopener">这里</a>。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC IN ACTION</title>
    <url>/2018/05/12/Spring-MVC-IN-ACTION/</url>
    <content><![CDATA[<h3 id="Spring-MVC-起步"><a href="#Spring-MVC-起步" class="headerlink" title="Spring MVC 起步"></a>Spring MVC 起步</h3><h4 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h4><p>请求的第一站是 <code>DispatcherServlet</code>，它就 Spring MVC 的前端控制器，它作为一个单实例的 Servlet 将请求委托给合适的控制器来执行实际的处理，而要查找合适的控制器就要 <code>DispatcherServlet</code> 查询一个或多个handler mapping 来确定请求的下一站在在哪。handler mapping 会根据请求所携带的 URL 信息来进行决策。 一旦选择了合适的控制器，<code>DispatcherServlet</code> 会将请求发送给选中的控制器。到了控制器，请求会卸下其负载（用户提交的信息）并耐心等待控制器处理这些信息。 控制器处理完后将产生的信息（model）打包发回给 <code>DispatcherServlet</code>，同时传递一个视图（view）名。<code>DispatcherServlet</code> 将会使用视图解析器（view resolver）来将逻辑视图名匹配为一个特定的视图实现，最终渲染输出。</p>
<a id="more"></a>
<h4 id="搭建-Spring-MVC-的新方法"><a href="#搭建-Spring-MVC-的新方法" class="headerlink" title="搭建 Spring MVC 的新方法"></a>搭建 Spring MVC 的新方法</h4><p>因 Servlet 3 规范和 Spring 3.1 的增强，扩展 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 的任意类都会自动地配置 <code>DispatcherServlet</code> 和 Spring 应用上下文，Spring 的应用上下文会位于应用程序的 Servlet 上下文之中。 原理：</p>
<p>在 Servlet 3.0 环境中，容器会在类路径中查找实现 <code>javax.servlet.ServletContainerInitializer</code> 接口的类，如有，就用它来配置 Servlet 容器。 Spring 提供了名为 <code>SpringServletContainerInitializer</code> 的实现，这个类反过来又会查找实现了 <code>WebApplicationInitializer</code> 的类并将配置的任务交给它们来完成。而 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 就是 <code>WebApplicationInitializer</code> 的一个基础实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprittrWebInitializer</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">  <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="comment">// 将 DispatcherServlet 映射到 "/"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="comment">// 配置 ContextLoaderListener，加载非 Web Bean，如数据库和中间件等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;RootConfig<span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="comment">// 配置 DispatcherServlet 加载 Web 组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;WebConfig<span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"spittr.web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置 JSP 视图解析器</span></span><br><span class="line">    InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">    resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">    resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置静态资源处理</span></span><br><span class="line">    configurer.enable();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(DataConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span>(<span class="title">basePackages</span></span>=&#123;<span class="string">"spittr"</span>&#125;, </span><br><span class="line">    excludeFilters=&#123;</span><br><span class="line">        <span class="meta">@Filter</span>(type=FilterType.CUSTOM, value=WebPackage<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写基本的控制器"><a href="#编写基本的控制器" class="headerlink" title="编写基本的控制器"></a>编写基本的控制器</h3><h4 id="熟悉-Model-amp-View"><a href="#熟悉-Model-amp-View" class="headerlink" title="熟悉 Model&amp;View"></a>熟悉 Model&amp;View</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/spittles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAX_LONG_AS_STRING = <span class="string">"9223372036854775807"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> SpittleRepository spittleRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SpittleController</span><span class="params">(SpittleRepository spittleRepository)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.spittleRepository = spittleRepository;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Spittle&gt; <span class="title">spittles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> spittleRepository.findSpittles(Long.MAX_VALUE, <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ↑等同↓  </span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">spittles</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Model</span></span><br><span class="line">    model.addAttribute(<span class="string">"spittleList"</span>, </span><br><span class="line">                       spittleRepository.findSpittles(Long.MAX_VALUE, <span class="number">20</span>));</span><br><span class="line">    <span class="comment">// View</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"spittles"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接受请求的输入"><a href="#接受请求的输入" class="headerlink" title="接受请求的输入"></a>接受请求的输入</h3><h4 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Spittle&gt; <span class="title">spittles</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(value=<span class="string">"max"</span>, defaultValue=MAX_LONG_AS_STRING)</span> <span class="keyword">long</span> max,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"count"</span>, defaultValue=<span class="string">"20"</span>)</span> <span class="keyword">int</span> count) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> spittleRepository.findSpittles(max, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路径变量"><a href="#路径变量" class="headerlink" title="路径变量"></a>路径变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spittleId&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">spittle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @PathVariable(<span class="string">"spittleId"</span>)</span> <span class="keyword">long</span> spittleId, <span class="comment">// 名字一样括号可以省略</span></span></span><br><span class="line"><span class="function">    Model model) </span>&#123;</span><br><span class="line">  model.addAttribute(spittleRepository.findOne(spittleId));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="处理表单"><a href="#处理表单" class="headerlink" title="处理表单"></a>处理表单</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="comment">// Errors 参数要紧跟在带有 @Valid 注解的参数后面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(@Valid Spitter spitter, Errors errors)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  spitterRepository.save(spitter);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/spitter/"</span> + spitter.getUsername();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spitter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="meta">@Size</span>(min=<span class="number">5</span>, max=<span class="number">16</span>)</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="meta">@Size</span>(min=<span class="number">5</span>, max=<span class="number">25</span>)</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="meta">@Size</span>(min=<span class="number">2</span>, max=<span class="number">30</span>)</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="meta">@Size</span>(min=<span class="number">2</span>, max=<span class="number">30</span>)</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="meta">@Email</span></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ... constructor getter setter ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object that)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> EqualsBuilder.reflectionEquals(<span class="keyword">this</span>, that, <span class="string">"firstName"</span>, <span class="string">"lastName"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>, <span class="string">"email"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HashCodeBuilder.reflectionHashCode(<span class="keyword">this</span>, <span class="string">"firstName"</span>, <span class="string">"lastName"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>, <span class="string">"email"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> JSR-303 的其他注解可以自行探索</span></span><br><span class="line"><span class="comment"> 此外这里我们使用了 Apache Common Lang 包来实现 equals() 和 hashCode() 方法</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义-ServletDispatcher-配置"><a href="#自定义-ServletDispatcher-配置" class="headerlink" title="自定义 ServletDispatcher 配置"></a>自定义 <code>ServletDispatcher</code> 配置</h4><p>我们之前覆盖了 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 三个方法，但那只是“有意义的最小集”，而不是全部。如，你还可以覆盖 <code>customizeRegistration()</code> 方法。</p>
<p>在 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 将 <code>DispatcherServlet</code> 注册到 Servlet 容器中之后，就会调用 <code>customizeRegistration()</code>，并将注册后得到的 <code>Registration.Dynamic</code> 传递进来，在这里，我们可以对 <code>DispatcherServlet</code> 进行额外的配置。 包括通过调用 <code>setLoadOnStartup()</code> 设置 load-on-startup 优先级， 通过 <code>setInitParameter()</code> 设置初始化参数，通过调用 <code>setMultipartConfig()</code> 配置 Servlet 3.0 对 multipart 的支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(Dynamic registration)</span> </span>&#123;</span><br><span class="line">  registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"/temp/uploads"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加其他的-Servlet-和-Filter"><a href="#添加其他的-Servlet-和-Filter" class="headerlink" title="添加其他的 Servlet 和 Filter"></a>添加其他的 Servlet 和 Filter</h4><p>按照 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 定义，它会创建 <code>DispatcherServlet</code> 和 <code>ContextLoaderListener</code>。如果我们想添加其他内容，就要另想它法。</p>
<p>只是为了注册 Filter 并将其映射到 <code>DispatcherServlet</code>，那么可以直接覆盖 <code>getServletFilters()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Filter[] &#123;<span class="keyword">new</span> MyFilter()&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他情况会复杂一点，联想到之前提过的：</p>
<blockquote>
<p>在 Servlet 3.0 环境中，容器会在类路径中查找实现 <code>javax.servlet.ServletContainerInitializer</code> 接口的类，如有，就用它来配置 Servlet 容器。 Spring 提供了名为 <code>SpringServletContainerInitializer</code> 的实现，这个类反过来又会查找实现了 <code>WebApplicationInitializer</code> 的类并将配置的任务交给它们来完成。</p>
</blockquote>
<p>我们可以直接写一个新 <code>xxxInitializer</code> 继承 <code>WebApplicationInitializer</code>，并且覆盖其 <code>onStartup()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration.Dynamic;</span><br><span class="line"><span class="comment">// 注册一个新的 Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    Dynamic myServlet = servletContext.addServlet(<span class="string">"myServlet"</span>, Myservlet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    myServlet.addMapping(<span class="string">"/custom/**"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterRegistration.Dynamic;</span><br><span class="line"><span class="comment">// 注册一个新的 Filter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    Dynamic myFilter = servletContext.addFilter(<span class="string">"myFilter"</span>, MyFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    myFilter.addMappingForUrlPatterns(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="string">"/custom/*"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在-web-xml-中搭建-SpringMVC"><a href="#在-web-xml-中搭建-SpringMVC" class="headerlink" title="在 web.xml 中搭建 SpringMVC"></a>在 web.xml 中搭建 SpringMVC</h3><h4 id="基本-web-xml"><a href="#基本-web-xml" class="headerlink" title="基本 web.xml"></a>基本 web.xml</h4><p><code>contextConfigLocation</code> 指定了一个 xml，这个文件定义了根应用上下文，会被 <code>ContextLoaderListener</code> 加载，而 <code>DispatcherServlet</code> 也会加载一个上下文，它的 xml 文件是根据 Servlet 名字寻找的，本案例中 Servlet 的名字是 appServlet，所以对应的 xml 文件是 “/WEB-INF/appServlet-context.xml”：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span> = <span class="string">"2.5"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns</span> = <span class="string">"http://java.sun.com/xml/ns/j2ee"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">         org.springframework.web.context.ContextLoaderListener</span><br><span class="line">      <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">         org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">      <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然 <code>DispatcherServlet</code> 加载的 xml 文件也是可以直接指定的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/web-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="web-xml-指引基于-Java-配置的-Spring-MVC"><a href="#web-xml-指引基于-Java-配置的-Spring-MVC" class="headerlink" title="web.xml 指引基于 Java 配置的 Spring MVC"></a>web.xml 指引基于 Java 配置的 Spring MVC</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span> = <span class="string">"2.5"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns</span> = <span class="string">"http://java.sun.com/xml/ns/j2ee"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">         org.springframework.web.context.support.</span><br><span class="line">                                         AnnotationConfigWebApplicationContext</span><br><span class="line">      <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>xyz.xijinian.demo.config.RootConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">         org.springframework.web.context.ContextLoaderListener</span><br><span class="line">      <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">         org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">      <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">            org.springframework.web.context.support.</span><br><span class="line">                                            AnnotationConfigWebApplicationContext</span><br><span class="line">         <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>xyz.xijinian.demo.config.WebConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="处理-multipart-形式的数据"><a href="#处理-multipart-形式的数据" class="headerlink" title="处理 multipart 形式的数据"></a>处理 multipart 形式的数据</h3><h4 id="配置-multipart-解析器"><a href="#配置-multipart-解析器" class="headerlink" title="配置 multipart 解析器"></a>配置 multipart 解析器</h4><ul>
<li><p><code>StandardServletMultipartResolver</code>：依赖于 Servlet 3.0 对 multipart 请求的支持（始于 Spring 3.1），使用它必须设置临时路径：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WebConfig.java</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> StandartServletMultipartResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一 xxxInitializer.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(Dynamic registration)</span> </span>&#123;</span><br><span class="line">  registration.setMultipartConfig(</span><br><span class="line">    <span class="keyword">new</span> MultipartConfigElement(<span class="string">"/temp/uploads"</span>, <span class="number">2097152</span>, <span class="number">4194304</span>, <span class="number">0</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 方式二 web.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/web-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">location</span>&gt;</span>/temp/uploads<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>2097152<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>CommonsMultipartResolver</code>：使用 <code>Jakarta Commons FileUpload</code> 解 析 multipart 请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WebConfig.java</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">  multipartResolver.setUploadTempDir(<span class="keyword">new</span> FileSystemResource(<span class="string">"/tnp/uploads"</span>));</span><br><span class="line">  multipartResolver.setMaxUploadSize(<span class="number">2097152</span>);</span><br><span class="line">  multipartResolver.setMaxInMemorySize(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> multipartResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="接受-MultipartFile"><a href="#接受-MultipartFile" class="headerlink" title="接受 MultipartFile"></a>接受 <code>MultipartFile</code></h4><p>我们本来可以这样接收 <code>@RequestPart(&quot;profilePicture&quot;) byte[] profiePicture</code>，但是这样功能有限。Spring 提供了 <code>MultipartFile</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartFile</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getOriginalFilename</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">byte</span>[] getBytes() <span class="keyword">throws</span> IOException;</span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(File var1)</span> <span class="keyword">throws</span> IOException, IllegalStateException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadImg"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadImg</span><span class="params">(@RequestPart(<span class="string">"image"</span>)</span> MultipartFile image) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ResultObject&lt;JSONObject&gt; resultObject = <span class="keyword">new</span> ResultObject&lt;&gt;();</span><br><span class="line">    String imgUrl = AliyunOssUtil.uploadBroadcastImage(</span><br><span class="line">      image.getInputStream(),</span><br><span class="line">      AliyunOssUtil.generateBroadcastImageName(image.getOriginalFilename())</span><br><span class="line">    );</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"imgUrl"</span>, imgUrl);</span><br><span class="line">    resultObject.setData(jsonObject);</span><br><span class="line">    <span class="keyword">return</span> resultObject.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接受-Part"><a href="#接受-Part" class="headerlink" title="接受 Part"></a>接受 <code>Part</code></h4><p><code>Part</code> 接口与 <code>MultipartFile</code> 并没有太大的差别，通过 <code>Part</code> 参数的形式接受文件上传，就没有必要配置 <code>MultipartResolver</code> 了。只有使用 <code>MultipartFile</code> 的时候， 我们才需要 <code>MultipartResolver</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadImg</span><span class="params">(@RequestPart(<span class="string">"image"</span>)</span> Part image) <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><h4 id="Spring-异常"><a href="#Spring-异常" class="headerlink" title="Spring 异常"></a>Spring 异常</h4><p>特定的 Spring 异常将会自动映射为指定的 HTTP 状态码，我们完全不用管。</p>
<h4 id="异常映射-HTTP-状态码"><a href="#异常映射-HTTP-状态码" class="headerlink" title="异常映射 HTTP 状态码"></a>异常映射 HTTP 状态码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class="string">"Spittle Not Found"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="同-Controller-同异常统一处理"><a href="#同-Controller-同异常统一处理" class="headerlink" title="同 Controller 同异常统一处理"></a>同 Controller 同异常统一处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它能处理同一个 Controller 中所有处理器方法所抛出的 DuplicateSpittleException 异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(DuplicateSpittleException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">String</span> <span class="title">handleDuplicateSpittle</span>() </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"error/duplicate"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局统一异常处理"><a href="#全局统一异常处理" class="headerlink" title="全局统一异常处理"></a>全局统一异常处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWideExceptionHandler</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(DuplicateSpittleException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">String</span> <span class="title">handleDuplicateSpittle</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error/duplicate"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跨重定向传数据"><a href="#跨重定向传数据" class="headerlink" title="跨重定向传数据"></a>跨重定向传数据</h3><ul>
<li><p>URL 模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(@Valid Spitter spitter, Errors errors)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  spitterRepository.save(spitter);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/spitter/"</span> + spitter.getUsername();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line">  </span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Valid Spitter spitter, </span></span></span><br><span class="line"><span class="function"><span class="params">    Errors errors, </span></span></span><br><span class="line"><span class="function"><span class="params">    Model model)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  spitterRepository.save(spitter);</span><br><span class="line">  model.addAttribute(<span class="string">"username"</span>, spitter.getUserName());</span><br><span class="line">  model.addAttribute(<span class="string">"spitterId"</span>, spitter.getId())</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/spitter/&#123;username&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line">  </span><br><span class="line"><span class="string">"/spitter/xijinian?spitterId=42"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 flash 属性</p>
<p>Session 是解决这种问题的好方案，但是 Session 需要我们自己管理对象，Spring 的解决方案是 flash 属性。在重定向执行之前，所有的 flash 属性都会复制到会话中。在重定向后，存在会话中的 flash 属性会被取出，并从会话转移到模型之中。</p>
<p>想要使用 flash 属性，我们就要用 <code>Model</code> 的子接口 <code>RedirectAttributes</code>，它具有 <code>Model</code> 接口的所有功能，除此之外，还有几个方法是用来设置 flash 属性的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/register"</span>, method=POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Valid Spitter spitter, </span></span></span><br><span class="line"><span class="function"><span class="params">    Errors errors, </span></span></span><br><span class="line"><span class="function"><span class="params">    RedirectAttributes model)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"registerForm"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  spitterRepository.save(spitter);</span><br><span class="line">  model.addAttribute(<span class="string">"username"</span>, spitter.getUserName());</span><br><span class="line">  model.addFlashAttribute(<span class="string">"spitterId"</span>, spitter.getId())</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/spitter/&#123;username&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;username&#125;"</span>, method=GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showSpitterProfile</span><span class="params">(@PathVariable String username, Model model)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!model.containsAttribute(<span class="string">"spitter"</span>)) &#123;</span><br><span class="line">    model.addAttribute(spitterRepository.findByUsername(username));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"profile"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Spring IN ACTION</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Bean IN ACTION</title>
    <url>/2018/05/11/Spring-Bean-IN-ACTION/</url>
    <content><![CDATA[<h3 id="自动化装配-Bean"><a href="#自动化装配-Bean" class="headerlink" title="自动化装配 Bean"></a>自动化装配 Bean</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul>
<li>用一个类实现一个接口，并在此类上面标注 <code>@Component</code> 注解</li>
<li>构造一个 Config 类，在上面标注 <code>@Configuration</code> 和 <code>@ComponentScan</code> 注解，意图让 Spring 可以发现此类同包下的 <code>Component</code> 注解</li>
<li>在其他类中，可以直接在最开始定义的接口上标注一个 <code>@Autowired</code> 注解，这样就会把此注解的实现类注入到当前的类中了。</li>
</ul>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul>
<li><p>一个<strong>类</strong>在使用 <code>Component</code> 注解时直接为自己添加一个名字。语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"xiaoHong"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>设置组件扫描的基础包。我们之前说过，构造 Config 类可以让其同包下的 Bean 被 Spring 发现，但是有时候我们想将 Config 类和真正的业务类分开，这是就可以使用注解指定扫描基础包，语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"xyz.xijinian"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConfig</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>超脱的 <code>Autowired</code>。使用 <code>Autowired</code> 的最常见形式是在类的开头把所需要的 Bean 注入进来，但事实上，<code>Autowired</code> 可以出现在构造器、Setter 方法、各种各样的方法上，Spring 会尝试满足方法参数上所声明的依赖，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.person = person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Java 依赖注入规范</p>
<ul>
<li><code>@Named</code> ≈ <code>@Component</code></li>
<li><code>@Inject</code> ≈ <code>@Autowired</code></li>
</ul>
</li>
</ul>
<h3 id="在-Java-中进行显示配置"><a href="#在-Java-中进行显示配置" class="headerlink" title="在 Java 中进行显示配置"></a>在 Java 中进行显示配置</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>所谓的显示配置就是在 JavaConfig 类中不启用 <code>@ComponentScan</code> 注解的时候（依然有 <code>@Configuration</code> 注解），我们可以直接<strong>在 JavaConfig 类中</strong>使用 <code>@Bean</code> 注解来显示声明 Bean。</p>
<blockquote>
<p><code>@Component</code> 是写给类的，然后当类在”基础包”下会被自动扫描，直接被 Spring 装配为 Spring Bean。<br><code>@Bean</code> 是写在 JavaConfig 类中的，你需要显式给出创建 Bean 的方法，所以说 <code>@Bean</code> 注解是手动装配。</p>
</blockquote>
<h4 id="简单的-Bean"><a href="#简单的-Bean" class="headerlink" title="简单的 Bean"></a>简单的 Bean</h4><p>在一个方法上面使用 <code>@Bean</code> 注解的时候，<code>@Bean</code> 注解会告诉 Spring 这个方法将会返回一个对象，该对象要注册为 Spring 应用上下文中的 Bean，方法体包含了最终产生 Bean 实例的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompactDisc <span class="title">sgtPeppers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> sgtPeppers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认情况下，Bean 的 ID 与这个方法名字是一样的，你可以这样来起一个特立独行的名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"lalala"</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="借助-java-Config-来实现注入"><a href="#借助-java-Config-来实现注入" class="headerlink" title="借助 java Config 来实现注入"></a>借助 java Config 来实现注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(sptPeppers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有趣的地方在于，我们在构造 CDPlayer 时，使用了一个”函数”，而此函数我们曾将其声明为 Bean，于是 Spring 会拦截对方法的调用，直接返回 Bean 的实例。</p>
<p>事实上，上面所说的这些代码并不是特别好理解，我们有更优雅的办法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactDisc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这种方式也会自动装配一个 CompactDisc 实例到配置方法中，而且这里甚至不要求将 CompactDisc 声明在 Java Config 里面，它可以来源于其他配置类、XML文件或者是自动装配出来的。不管 CompactDisc 采用什么方式创建，Spring 都会将其传入到配置方法中，并用来创建 CDPlayer Bean。</p>
<h3 id="在-XML-中进行显示配置"><a href="#在-XML-中进行显示配置" class="headerlink" title="在 XML 中进行显示配置"></a>在 XML 中进行显示配置</h3><h4 id="声明一个简单的-Bean"><a href="#声明一个简单的-Bean" class="headerlink" title="声明一个简单的 Bean"></a>声明一个简单的 Bean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"soundsystem.SgtPeppers"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsysyem.SgtPeppers"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在基于 JavaConfig 的配置中，我们总是需要手动直接创建 Bean，但是在 xml 配置文件中，Spring 发现 <code>&lt;bean&gt;</code> 标签时，将会调用 Bean 的默认构造器来创建 Bean。</p>
<h4 id="借助构造器注入初始化-Bean"><a href="#借助构造器注入初始化-Bean" class="headerlink" title="借助构造器注入初始化 Bean"></a>借助构造器注入初始化 Bean</h4><ul>
<li><p>构造器注入 Bean 引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span> <span class="attr">c:_0-ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑当只有一个构造器参数时↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span> <span class="attr">c:_-ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将字面量注入到构造器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先我们给出这个想要构造的类</span></span><br><span class="line"><span class="keyword">package</span> soundsystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlankDisk</span> <span class="keyword">implements</span> <span class="title">CompactDisk</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line">  <span class="keyword">private</span> String artist;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BlankDisc</span><span class="params">(String title, String artist)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.artist = artist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Playing "</span> + title + <span class="string">" by "</span> + artist);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span> <span class="attr">value</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span> <span class="attr">value</span>=<span class="string">"The Beaties"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_title</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_artist</span>=<span class="string">"The Beatles"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_0</span>=<span class="string">"Sgt. pepper's Lonely Hearts"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_1</span>=<span class="string">"The Beatles"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑当只有一个构造器参数时↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span> <span class="attr">c:_</span>=<span class="string">"The Beatles"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>装配集合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span> <span class="attr">value</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span> <span class="attr">value</span>=<span class="string">"The Beaties"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">constructor-args</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当 List 中是对象的时候 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span> <span class="attr">value</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span> <span class="attr">value</span>=<span class="string">"The Beaties"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-args</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"ha1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"ha2"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"ha3"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"ha4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">constructor-args</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 集合可以使 List、Set、Map 甚至是 Properties 类型，现查现用吧，背下来意义不大 --&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h4><p>给 Bean 设置属性和 Bean 的构造器注入非常相似。</p>
<ul>
<li><p>常规用法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"compactDisc"</span> <span class="attr">ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span> <span class="attr">p:compactDisc-ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将字面量注入到属性中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"artist"</span> <span class="attr">value</span>=<span class="string">"The Beaties"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tracks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:title</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:artist</span>=<span class="string">"The Beaties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tracks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>装配集合与 Spring util- 命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"trackList"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hahahaha4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"compactDisc"</span> <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:title</span>=<span class="string">"Sgt. pepper's Lonely Hearts Club Band"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:artist</span>=<span class="string">"The Beaties"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:tracks-ref</span>=<span class="string">"trackList"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring util- 命名空间中还有很多元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:constant</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:property-path</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="导入和混合设置"><a href="#导入和混合设置" class="headerlink" title="导入和混合设置"></a>导入和混合设置</h3><h4 id="在-JavaConfig-中引入-XML-配置"><a href="#在-JavaConfig-中引入-XML-配置" class="headerlink" title="在 JavaConfig 中引入 XML 配置"></a>在 JavaConfig 中引入 XML 配置</h4><ul>
<li><p>拆分 JavaConfig 后，一个 JavaConfig 想要引入另一个 JavaConfig 需要使用 <code>@Import</code> 注解，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactDisc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者直接在一个更高层次的类，同时关联它俩：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;CDPlayerConfig<span class="class">.<span class="keyword">class</span>, <span class="title">CDConfig</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SoundSystemConfig</span> </span>&#123;&#125;<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 JavaConfig 中引入 XML 配置</p>
<p>现在假设 <code>soundsystem.BlankDisc</code> 定义在 xml 文件中，那么需要如此在 JavaConfig 中引入 xml 中的 Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(CDPlayerConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ImportResource("classpath:cd-config.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundSystemConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="在-XML-配置中引入-JavaConfig"><a href="#在-XML-配置中引入-JavaConfig" class="headerlink" title="在 XML 配置中引入 JavaConfig"></a>在 XML 配置中引入 JavaConfig</h4><ul>
<li><p>在一个 xml 文件中引入另一个 xml 文件中的 Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cd-config.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 XML 配置中引入 JavaConfig</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDConfig"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cdPlayer"</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDPlayer"</span> <span class="attr">c:cd-ref</span>=<span class="string">"compactDisc"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>根配置方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"soundsystem.CDConfig"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"cdplayer-config.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="环境与-profile"><a href="#环境与-profile" class="headerlink" title="环境与 profile"></a>环境与 profile</h3><h4 id="类级别"><a href="#类级别" class="headerlink" title="类级别"></a>类级别</h4><p><code>@Profile</code> 注解可以应用在类级别上。它会告诉 Spring 这个配置类中的 bean 只有在响应的 profile 激活时才会创建。</p>
<h4 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h4><p>在 Spring 3.1 中，只能在类级别上使用 <code>@Profile</code> 注解。不过，从 Spring 3.2 开始，也可以在方法级别上使用 <code>@Profile</code> 注解，与 <code>@Bean</code> 注解一同使用。这样的话，就能将这两个 bean 的声明放到同一个配置类之中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>)</span><br><span class="line">  <span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">embeddedDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">        .setType(EmbeddedDatabaseType.H2)</span><br><span class="line">        .addScript(<span class="string">"classpath:schema.sql"</span>)</span><br><span class="line">        .addScript(<span class="string">"classpath:test-data.sql"</span>)</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">jndiDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JndiObjectFactoryBean jndiObjectFactoryBean = <span class="keyword">new</span> JndiObjectFactoryBean();</span><br><span class="line">    jndiObjectFactoryBean.setJndiName(<span class="string">"jdbc/myDS"</span>);</span><br><span class="line">    jndiObjectFactoryBean.setResourceRef(<span class="keyword">true</span>);</span><br><span class="line">    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> (DataSource) jndiObjectFactoryBean.getObject();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="XML-中使用"><a href="#XML-中使用" class="headerlink" title="XML 中使用"></a>XML 中使用</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span><br><span class="line">       xmlns:jee=<span class="string">"http://www.springframework.org/schema/jee"</span></span><br><span class="line">       xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/jee</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/jee/spring-jee.xsd</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/jdbc</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">         http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;beans profile=<span class="string">"dev"</span>&gt;</span><br><span class="line">    &lt;jdbc:embedded-database id=<span class="string">"dataSource"</span> type=<span class="string">"H2"</span>&gt;</span><br><span class="line">      &lt;jdbc:script location=<span class="string">"classpath:schema.sql"</span> /&gt;</span><br><span class="line">      &lt;jdbc:script location=<span class="string">"classpath:test-data.sql"</span> /&gt;</span><br><span class="line">    &lt;/jdbc:embedded-database&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;beans profile=<span class="string">"prod"</span>&gt;</span><br><span class="line">    &lt;jee:jndi-lookup </span><br><span class="line">      id=<span class="string">"dataSource"</span></span><br><span class="line">      lazy-init=<span class="string">"true"</span></span><br><span class="line">      jndi-name=<span class="string">"jdbc/myDatabase"</span></span><br><span class="line">      resource-ref=<span class="string">"true"</span></span><br><span class="line">      proxy-<span class="class"><span class="keyword">interface</span></span>=<span class="string">"javax.sql.DataSource"</span> /&gt;</span><br><span class="line">  &lt;/beans&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h4 id="激活-profile"><a href="#激活-profile" class="headerlink" title="激活 profile"></a>激活 profile</h4><p>Spring 在确定哪个 profile 处于激活状态时，需要依赖两个独立的属性：<code>spring.profiles.active</code> 和 <code>spring.profiles.default</code> 。 如 果 设 置 了 <code>spring.profiles.active</code> 属性的话，那么它的值就会用来确定哪个 <code>profile</code> 是激活的。但如果没有设置 <code>spring.profiles.active</code> 属性的话，那 Spring 将会查找 <code>spring.profiles.default</code> 的 值 。 如 果 <code>spring.profiles.active</code> 和 <code>spring.profiles.default</code> 均没有设置的话，那就没有激活的 profile，因此只会创建那些没有定义在 profile 中的 bean。有多种方式来设置这两个属性：</p>
<ul>
<li>作为 DispatcherServlet 的初始化参数；</li>
<li>作为 Web 应用的上下文参数；</li>
<li>作为 JNDI 条目；</li>
<li>作为环境变量；</li>
<li>作为 JVM 的系统属性；</li>
<li>在集成测试类上，使用 <code>@ActiveProfiles</code> 注解设置。</li>
</ul>
<p>如 — 可以在 web.xml 中设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http:II java.sun.com/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.context.ContextLoaderListener </span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.servlet.DispatcherServlet </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">→     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.default<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">→     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=DataSourceConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ActiveProfiles("dev")</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDataSourceTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldBeEmbeddedDatasource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertNotNull(dataSource);</span><br><span class="line">    JdbcTemplate jdbc = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    List&lt;String&gt; results = jdbc.query(<span class="string">"select id, name from Things"</span>, <span class="keyword">new</span> RowMapper&lt;String&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rs.getLong(<span class="string">"id"</span>) + <span class="string">":"</span> + rs.getString(<span class="string">"name"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    assertEquals(<span class="number">1</span>, results.size());</span><br><span class="line">    assertEquals(<span class="string">"1:A"</span>, results.get(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=DataSourceConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ActiveProfiles("prod")</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionDataSourceTest</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldBeEmbeddedDatasource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// should be null, because there isn't a datasource configured in JNDI</span></span><br><span class="line">    assertNull(dataSource);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="条件化的-Bean"><a href="#条件化的-Bean" class="headerlink" title="条件化的 Bean"></a>条件化的 Bean</h3><h4 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicBean</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@Conditional</span>(MagicExistsCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">MagicBean</span> <span class="title">magicBean</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MagicBean();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">    Environment env = context.getEnvironment();</span><br><span class="line">    <span class="keyword">return</span> env.containsProperty(<span class="string">"magic"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Condition-接口"><a href="#Condition-接口" class="headerlink" title="Condition 接口"></a>Condition 接口</h4><p>在 <code>@Condition</code> 后面的必然是一个实现了 <code>Condition</code> 接口的类，<code>Condition</code> 接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面接口中的参数也是两个接口：</p>
<ul>
<li><p><code>ConditionContext</code></p>
<p>定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 检查 bean 定义</span></span><br><span class="line">  <span class="function">BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 检查 bean 是否存在，甚至探查 bean 的属性</span></span><br><span class="line">  <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 检查环境变量是否存在以及它的值是什么</span></span><br><span class="line">  <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 读取并探查 ResourceLoader 所加载的资源</span></span><br><span class="line">  <span class="function">ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 借助 ClassLoader 加载并检查类是否存在</span></span><br><span class="line">  <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>AnnotatedTypeMetadata</code></p>
<p>定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedTypeMetadata</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断带有 @Bean 注解的方法是不是还有其他特定的注解</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isAnnotated</span><span class="params">(String annotationType)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 检查 @Bean 注解的方法上其他注解的属性</span></span><br><span class="line">  <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String annotationType)</span></span>;</span><br><span class="line">  <span class="function">Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(String annotationType, <span class="keyword">boolean</span> classValuesAsString)</span></span>;</span><br><span class="line">  <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String annotationType)</span></span>;</span><br><span class="line">  <span class="function">MultiValueMap&lt;String, Object&gt; <span class="title">getAllAnnotationAttributes</span><span class="params">(String annotationType, <span class="keyword">boolean</span> classValuesAsString)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>官方示例 — 在 Spring 4.x 重新实现了 @Profile 注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(ProfileCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line">  String[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, </span></span></span><br><span class="line"><span class="function"><span class="params">                         AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context.getEnvironment() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      MultiValueMap&lt;String, Object&gt; attrs =</span><br><span class="line">          metadata.getAllAnnotationAttributes(Profile<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">      <span class="keyword">if</span> (attrs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object value : attrs.get(<span class="string">"value"</span>)) &#123;</span><br><span class="line">          <span class="comment">// 借助 acceptsProfiles() 方法检查 profiles 是否处于激活状态。</span></span><br><span class="line">          <span class="keyword">if</span> (context.getEnvironment().acceptsProfiles(((String[]) value))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="处理自动装配的歧义性"><a href="#处理自动装配的歧义性" class="headerlink" title="处理自动装配的歧义性"></a>处理自动装配的歧义性</h3><h4 id="标示首选的-Bean"><a href="#标示首选的-Bean" class="headerlink" title="标示首选的 Bean"></a>标示首选的 Bean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dessert <span class="title">iceCream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IceCream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"iceCream"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.desserteater.IceCream"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">primary</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="限定自动装配的-Bean"><a href="#限定自动装配的-Bean" class="headerlink" title="限定自动装配的 Bean"></a>限定自动装配的 Bean</h4><p>准确的说，<code>@Qualifier(&quot;iceCream&quot;)</code> 所引用的 bean 要具有 <code>String</code> 类型的“iceCream”作为限定符。如果没有指定其他的限定符的话，所有的 bean 都会给定一个默认的限定符，这个限定符与 bean 的 ID 相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"iceCream"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建自定义的限定符"><a href="#创建自定义的限定符" class="headerlink" title="创建自定义的限定符"></a>创建自定义的限定符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceCream</span> <span class="keyword">implements</span> <span class="title">Dessert</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dessert <span class="title">iceCream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IceCream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoWired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cold"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDessert</span><span class="params">(Dessert dessert)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span> dessert = dessert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用自定义的限定符注解"><a href="#使用自定义的限定符注解" class="headerlink" title="使用自定义的限定符注解"></a>使用自定义的限定符注解</h4><p>可以，但是没必要。</p>
<h3 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h3><h4 id="四种作用域"><a href="#四种作用域" class="headerlink" title="四种作用域"></a>四种作用域</h4><p>Spring 定义了多种作用域，可以基于这些作用域创建 bean，包括：</p>
<ul>
<li>单例(Singleton)：在整个应用中，只创建 bean 的一个实例（Spring 默认）。</li>
<li>原型(Prototype)：每次注入或者通过 Spring 应用上下文获取的时候，都会创建一个新的 bean 实例。</li>
<li>会话(Session)：在 Web 应用中，为每个会话创建一个 bean 实例。</li>
<li>请求(Rquest)：在 Web 应用中，为每个请求创建一个 bean 实例。 </li>
</ul>
<h4 id="单例和原型作用域"><a href="#单例和原型作用域" class="headerlink" title="单例和原型作用域"></a>单例和原型作用域</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotePad</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> NotePad <span class="title">notepad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> NotePad();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"notepad"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.myapp.Notepad"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="会话和请求作用域"><a href="#会话和请求作用域" class="headerlink" title="会话和请求作用域"></a>会话和请求作用域</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(value=WebApplicationContext.SCOPE_SESSION, proxyMode=ScopedProxyMode.INTERFACES)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ShoppingCart <span class="title">cart</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShoppingCart</span><span class="params">(ShoppingCart shoppingCart)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.shoppingCart = shoppingCart;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">因为 StoreService 是一个单例的 bean，会在 Spring 应用上下文加载的时候创建。</span></span><br><span class="line"><span class="comment">当它创建的时候，Spring 会试图将 ShoppingCart bean 注入到 setShoppingCart() 方法中。</span></span><br><span class="line"><span class="comment">但是 ShoppingCart bean 是会话作用域的，此时并不存在。</span></span><br><span class="line"><span class="comment">直到某个用户进入系统，创建了会话之后，才会出现 ShoppingCart 实例。</span></span><br><span class="line"><span class="comment">而且系统中同时会存在很多 ShoppingCart 实例(一个用户一个)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们希望的是当 StoreService 处理购物车功能时，它所使用的 ShoppingCart 实例恰好是当前会话所对应的那一个。</span></span><br><span class="line"><span class="comment">Spring 并不会将实际的 ShoppingCart bean 注入到 StoreService，而会注入一个到 ShoppingCart bean 的代理。</span></span><br><span class="line"><span class="comment">这个代理会暴露与 ShoppingCart 相同的方法，所以 StoreService 会认为它就是一个购物车。</span></span><br><span class="line"><span class="comment">当调用 ShoppingCart 的方法时，代理会对其进行懒解析并将调用委托给会话作用域内真正的 ShoppingCart bean。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">综上：</span></span><br><span class="line"><span class="comment">proxyMode 属性被设置成了 ScopedProxyMode.INTERFACES，这表明这个代理要实现 ShoppingCart 接口，并将调用委托给实现 bean。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">另：</span></span><br><span class="line"><span class="comment">如果 ShoppingCart 是接口而不是类的话，这是可以的(也是最为理想的代理模式)。</span></span><br><span class="line"><span class="comment">但如果 ShoppingCart 是一个具体的类的话，Spring 就没有办法创建基于接口的代理了。</span></span><br><span class="line"><span class="comment">此时，它必须使用 CGLib 来生成基于类的代理。</span></span><br><span class="line"><span class="comment">所以，如果 bean 类型是具体类的话，我们必须要将 proxyMode 属性设置为 ScopedProxyMode.TARGET_CLASS，以此来表明要以生成目标类扩展的方式创建代理。</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<h4 id="xml-中声明作用域代理"><a href="#xml-中声明作用域代理" class="headerlink" title="xml 中声明作用域代理"></a>xml 中声明作用域代理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对类代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.myapp.ShoppingCart"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:scope-proxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对接口代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.myapp.ShoppingCart"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:scope-proxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="运行时值注入"><a href="#运行时值注入" class="headerlink" title="运行时值注入"></a>运行时值注入</h3><h4 id="注入外部的值"><a href="#注入外部的值" class="headerlink" title="注入外部的值"></a>注入外部的值</h4><ol>
<li><p>首先建立一个 app.properties 文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">disc.title</span>=<span class="string">Sgt. Peppers Lonely Hearts Club Band</span></span><br><span class="line"><span class="meta">disc.artist</span>=<span class="string">The Beatles</span></span><br></pre></td></tr></table></figure></li>
<li><p>利用 Environment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/com/soundsystem/app.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressiveConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@AutoWired</span></span><br><span class="line">  Environment env;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BlankDisc <span class="title">disc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BlankDisk(env.getProperty(<span class="string">"disc.title"</span>), env.getProperty(<span class="string">"disc.artist"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Environment 常用方法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String getProperty(String key)</span></span><br><span class="line"><span class="comment">String getProperty(String key, String defaultValue)</span></span><br><span class="line"><span class="comment">T getProperty(String key, Class&lt;T&gt; type)</span></span><br><span class="line"><span class="comment">T getProperty(String key, Class&lt;T&gt; type, T defaultValue)</span></span><br><span class="line"><span class="comment">String[] getActiveProfiles()</span></span><br><span class="line"><span class="comment">String[] getDefaultProfiles()</span></span><br><span class="line"><span class="comment">boolean acceptsProfiles(String... profiles)</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="解析属性占位符"><a href="#解析属性占位符" class="headerlink" title="解析属性占位符"></a>解析属性占位符</h4><ol>
<li><p>xml 中的运用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sgtPeppers"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"soundsystem.BlankDisc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_title</span>=<span class="string">"$&#123;disc.title&#125;"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:_artist</span>=<span class="string">"$&#123;disc.artist&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Java 代码中的运用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlankDisc</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @Value(<span class="string">"$&#123;disc.title&#125;"</span>)</span> String title,</span></span><br><span class="line"><span class="function">      @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;disc.artist&#125;"</span>)</span> String artist) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = title;</span><br><span class="line">  <span class="keyword">this</span>.artist = artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前置条件 — 配置 PropertySourcesPlaceholderConfigurer Bean</p>
<ul>
<li><p>Java 方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">placeholderConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>xml 方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">→ <span class="tag">&lt;<span class="name">context:property-placeholder</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="使用-Spring-表达式语言进行装配"><a href="#使用-Spring-表达式语言进行装配" class="headerlink" title="使用 Spring 表达式语言进行装配"></a>使用 Spring 表达式语言进行装配</h4><ul>
<li><p>字面量</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#&#123;123&#125;</span><br><span class="line">#&#123;12.222&#125;</span><br><span class="line">#&#123;false&#125;</span><br><span class="line">#&#123;9.87E4&#125;</span><br><span class="line">#&#123;'Hello'&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>引用 bean、属性和方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#&#123;sgtPeppers&#125; // 通过 ID 引用其他的 bean</span><br><span class="line">#&#123;sgtPeppers.artist&#125;</span><br><span class="line">#&#123;artistSelector.selectArtist()&#125;</span><br><span class="line">#&#123;artistSelector.selectArtist().toUpperCase()&#125; // 对于被调用方法的返回值来说，同样可以调用它的方法</span><br><span class="line">#&#123;artistSelector.selectArtist()?.toUpperCase()&#125; // “?.”运算符能够在确保它左边所对应的元素不是 null</span><br><span class="line"></span><br><span class="line"><span class="comment">// 助记："?" → “如果不是 null”</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用类型 <code>T()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T(java.lang.Math) <span class="comment">// 如果需要的话，我们甚至可以将其装配到一个 Class 类型的 bean 属性中</span></span><br><span class="line">T(java.lang.Math).PI <span class="comment">// 访问目标类型的常量</span></span><br><span class="line">T(java.lang.Math).random() <span class="comment">// 访问目标类型的静态方法</span></span><br></pre></td></tr></table></figure></li>
<li><p>SpEL 运算符</p>
<table>
<thead>
<tr>
<th>运算符类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算</td>
<td><code>+</code>、<code>-</code>、 <code>*</code> 、<code>/</code>、<code>%</code>、<code>^</code></td>
</tr>
<tr>
<td>比较运算</td>
<td><code>&lt;</code> 、 <code>&gt;</code> 、 <code>==</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> 、 <code>lt</code> 、 <code>gt</code> 、 <code>eq</code> 、 <code>le</code> 、 <code>ge</code></td>
</tr>
<tr>
<td>逻辑运算</td>
<td><code>and</code> 、 <code>or</code> 、 <code>not</code> 、<code>│</code></td>
</tr>
<tr>
<td>条件运算</td>
<td><code>?: (ternary)</code> 、 <code>?: (Elvis)</code></td>
</tr>
<tr>
<td>正则表达式</td>
<td><code>matches</code></td>
</tr>
</tbody></table>
</li>
<li><p>计算正则表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">matches 运算符对 String 类型的文本（作为左边参数）应用正则表达式（作为右边参数）。</span></span><br><span class="line"><span class="comment">matches 的运算结果会返回一个 Boolean 类型的值：如果与正则表达式相匹配，则返回 true；否则返回 false。</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li>
<li><p>计算集合</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#&#123;jukebox.songs[4].title&#125;</span><br><span class="line">#&#123;jukebox.songs[T(java.lang.Math).random() * jukebox.songs.size()].title&#125;</span><br><span class="line">#&#123;'This is a test'[3]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询运算符</span></span><br><span class="line">#&#123;jukebox.songs.?[artist eq 'Aerosmith']&#125; // .?[] 用来对集合进行过滤，得到一个子集</span><br><span class="line">#&#123;jukebox.songs.^[artist eq 'Aerosmith']&#125; // .$[] 在集合中查询第一个匹配项</span><br><span class="line">#&#123;jukebox.songs.$[artist eq 'Aerosmith']&#125; // .$[] 在集合中查询最后一个匹配项</span><br><span class="line"></span><br><span class="line"><span class="comment">// 投影运算符</span></span><br><span class="line">#&#123;jukebox.songs.![title]&#125; // .![] 它会从集合的每个成员中选择特定的属性放到另外一个集合中</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合使用</span></span><br><span class="line">#&#123;jukebox.songs.?[artist eq 'Aerosmith'].![title]&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Spring IN ACTION</tag>
      </tags>
  </entry>
  <entry>
    <title>走入并行的世界</title>
    <url>/2018/05/10/%E8%B5%B0%E5%85%A5%E5%B9%B6%E8%A1%8C%E7%9A%84%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<ul>
<li><strong>同步</strong>和<strong>异步</strong>：同步和异步通常用来形容一次方法调用。同步方法一旦调用开始，就得等调用返回，才能继续后续的行为。异步方法更像是一个消息传递，调用后方法立即返回，整个过程不会阻碍后续的工作，如果异步调用需要返回结果，那么当这个异步调用真实完成时，会通知调用者。</li>
<li><strong>并发</strong>和<strong>并行</strong>：并发是快速切换，快到感觉不到。并行需要硬件的支持。</li>
<li><strong>临界区</strong>：形容一种公共资源，可以被多个线程使用，但是每一次只能有一个线程使用它。<a id="more"></a></li>
<li><strong>阻塞</strong>和<strong>非阻塞</strong>：用来形容多线程之间的相互影响，如一个线程占用临界区不释放，其他想要临界区的线程就会挂起等待，这种现象就叫做阻塞。非阻塞的意思相反，它强调没有一个线程可以妨碍其他线程的执行。</li>
<li><strong>死锁</strong>：彼此相互妨碍。</li>
<li><strong>饥饿</strong>：一个或者多个线程因为种种原因得不到想要的资源。</li>
<li><strong>活锁</strong>：相住了，线程互相谦让资源，却没有任何一个线程能够使用资源。</li>
<li><strong>并发级别</strong>：阻塞、无饥饿、无障碍、无锁、无等待。<ul>
<li><strong>阻塞</strong>：一个线程是阻塞的，那么在其他线程释放资源前，当前线程无法继续执行。</li>
<li><strong>无饥饿</strong>：高优先级线程插队就会使低优先级线程饥饿，而无饥饿是指所有的线程都有机会执行。</li>
<li><strong>无障碍</strong>：线程自由进入临界区，有竞争就回滚数据到没进入临界区之前。一种可行的无障碍实现可以依赖于一个“一致性标记”来实现。</li>
<li><strong>无锁</strong>：无障碍 + 至少保证一个线程有限步内胜出。</li>
<li><strong>无等待</strong>：所有线程都要在有限步完成，并且无饥饿。这是最高级别，难以实现。一个典型的无等待结构是 RCU（Read-Copy-Update）</li>
</ul>
</li>
<li>有关并行的两个定律（$加速比=\frac{优化前系统耗时}{优化后系统耗时}$）：<ul>
<li><strong>Amdahl 定律</strong>（F 表示串行化比例，n 表示处理器个数）：$T_n=T_1(F+\frac{1}{n}(1-F))$</li>
<li><strong>Gustafson 定律</strong>（a 表示串行时间，b 表示并行时间，n 表示处理器个数，$F=\frac{a}{a+nb}$）：$s(n)=\frac{a+nb}{a+b}=n-F(n-1)$</li>
</ul>
</li>
<li>JMM（Java 内存模型）的关键技术点是围绕多线程的原子性、可见性和有序性来建立的。<ul>
<li><strong>原子性</strong>：一个操作是不可中断的。对于32位系统来说，long 型数据的读写不是原子性的，而 int 是。</li>
<li><strong>可见性</strong>：可见性是指一个线程修改了临界区，其他线程能否立即知道这个修改。</li>
<li><strong>有序性</strong>：指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致。指令重拍对于提高CPU的处理性能是十分必要的，虽然这确实可能带来了乱序的问题，但这些牺牲是值得的。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 从入门到还行</title>
    <url>/2018/03/22/CSS-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%98%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="CSS-介绍"><a href="#CSS-介绍" class="headerlink" title="CSS 介绍"></a>CSS 介绍</h2><h3 id="CSS-如何运作"><a href="#CSS-如何运作" class="headerlink" title="CSS 如何运作"></a>CSS 如何运作</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol>
<li>浏览器将 HTML 和 CSS 转化成 DOM（文档对象模型）。DOM 在计算机内存中表示文档。它把文档内容和其样式结合在一起。</li>
<li>浏览器显示 DOM 的内容。</li>
</ol>
<p><img src="https://i.loli.net/2019/03/30/5c9f6be998390.png" alt=""><a id="more"></a></p>
<h4 id="说说-DOM"><a href="#说说-DOM" class="headerlink" title="说说 DOM"></a>说说 DOM</h4><p>DOM 是一种树形结构。标记语言中的每个元素，属性，文本片段都变为一个 DOM 节点。这些节点由它们与其它 DOM 节点的关系来定义。有的元素是某些子节点的父节点，且这些子节点有兄弟（节点）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Let's use:</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Cascading<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Style<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Sheets<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">↓ 转换为 DOM</span><br><span class="line"></span><br><span class="line">P</span><br><span class="line">├─ "Let's use:"</span><br><span class="line">├─ SPAN</span><br><span class="line">|  └─ "Cascading"</span><br><span class="line">├─ SPAN</span><br><span class="line">|  └─ "Style"</span><br><span class="line">└─ SPAN</span><br><span class="line">   └─ "Sheets"</span><br></pre></td></tr></table></figure>

<h4 id="如何应用-CSS"><a href="#如何应用-CSS" class="headerlink" title="如何应用 CSS"></a>如何应用 CSS</h4><ul>
<li><p>外部样式表</p>
<p>就是引用外部 CSS，在 HTML 的 <code>&lt;head&gt;</code> 中添加：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</code></p>
</li>
<li><p>内部样式表</p>
<p>不引用，直接在 HTML 的 <code>&lt;head&gt;</code> 中添加一个 <code>&lt;style&gt;&lt;/style&gt;</code>，并在里面写 CSS 内容。</p>
</li>
<li><p>内联样式</p>
<p>直接在元素后边写 <code>style</code> 属性：<code>&lt;h1 style=&quot;color:blue; border:1px solid black;&quot;&gt;Hello World!&lt;/h1&gt;</code></p>
</li>
</ul>
<h3 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h3><h4 id="属性-属性值"><a href="#属性-属性值" class="headerlink" title="属性:属性值"></a>属性:属性值</h4><p>CSS 有超过 300 个不同的属性以及几乎无穷无尽的属性值。属性和属性值不能任意组合：每个属性都有一个已经定义好的可用属性值范围。如果使用了未知属性，或者给属性赋予了无效值，该声明会被视为无效，浏览器的 CSS 引擎会完全忽略它。在 CSS（和其他网络标准）中，使用美式（而不是英式，如 <code>color</code> 不能写成 <code>colour</code>）拼写作为单词的标准。</p>
<p><img src="https://i.loli.net/2019/03/30/5c9f6ecdc596f.png" alt=""></p>
<h4 id="说两句选择器"><a href="#说两句选择器" class="headerlink" title="说两句选择器"></a>说两句选择器</h4><p>选择器是一种模式，它能在页面上匹配一些元素<strong>。</strong>这将使相关的声明仅被应用到被选择的元素上。选择器可以叠加，进行更精细的选择，每组选择器后都跟随 <code>{}</code>，大括号里面是定义对应的声明。</p>
<p><img src="https://i.loli.net/2019/03/30/5c9f70dc924f0.png" alt=""></p>
<p>一个元素可以被多个选择器所匹配，因此，一个给定的属性可能被多个规则设置多次。 CSS 定义了哪个规则比其它规则更具优先级，则更具优先级的规则必定被应用：这被称为<strong>层叠算法</strong>。</p>
<p>如果链或组中的某个选择器无效，比如使用了未知的伪元素或伪类，整个组的选择器仍然是有效的，除了这个无效的将被忽略的选择器。</p>
<h4 id="CSS-语法-1"><a href="#CSS-语法-1" class="headerlink" title="CSS 语法"></a>CSS 语法</h4><p>CSS 也有自己的”私心”，不甘心只像上面介绍的那么单调。</p>
<ul>
<li><p><strong>@-规则 (At-rules)</strong>：在 CSS 中被用来传递元数据、条件信息或其它描述性信息。它由（<code>@</code>）符号开始，紧跟着一个表明它是哪种规则的描述符，之后是这种规则的语法块，并最终由一个半角分号（<code>;</code>）结束。每种由描述符定义的 <strong>@-规则</strong>，都有其特有的内部语法和语义。一些例子如下：</p>
<ul>
<li><code>@charset</code> 和 <code>@import</code>（元数据）</li>
<li><code>@media</code> 或 <code>@document</code>（条件信息，又被称为<strong>嵌套语句</strong>)</li>
<li><code>@font-face</code>（描述性信息）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'custom.css'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>嵌套语句</strong> — 它是 <strong>@-规则</strong>中的一种，它的语法是 CSS 规则的嵌套块，只有在特定条件匹配时才会应用到文档上。</p>
<ul>
<li><code>@media</code> （只有在运行浏览器的设备匹配其表达条件时才会应用该 <strong>@-规则</strong>的内容）</li>
<li><code>@supports</code>（只有浏览器确实支持被测功能时才会应用该 <strong>@-规则</strong>的内容）</li>
<li><code>@document</code>（只有当前页面匹配一些条件时才会应用该 <strong>@-规则</strong>的内容）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">801px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="CSS-注释"><a href="#CSS-注释" class="headerlink" title="CSS 注释"></a>CSS 注释</h4><p>CSS 的注释不同于 HTML 的 <code>&lt;!-- --&gt;</code>，反而跟 Java 差不多 — <code>/* */</code></p>
<h4 id="CSS-简写"><a href="#CSS-简写" class="headerlink" title="CSS 简写"></a>CSS 简写</h4><p>一些属性比如 <code>font</code>，<code>background</code>，<code>padding</code>，<code>border</code> 和 <code>margin</code> 被称为<strong>简写属性</strong> — 这是由于它们允许你在一行设置多个属性，从而节省时间并使代码更整洁。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 5<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">red</span> <span class="selector-tag">url</span>(<span class="selector-tag">bg-graphic</span><span class="selector-class">.png</span>) 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">repeat-x</span> <span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure>

<h3 id="选择器介绍"><a href="#选择器介绍" class="headerlink" title="选择器介绍"></a>选择器介绍</h3><h4 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h4><ul>
<li><strong>简单选择器（Simple selectors）：</strong>通过元素类型、<code>class</code> 或 <code>id</code> 匹配一个或多个元素。</li>
<li><strong>属性选择器（Attribute selectors）</strong>：通过 属性/属性值 匹配一个或多个元素。</li>
<li><strong>伪类（Pseudo-classes）：</strong>匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是 DOM 树中一父节点的第一个子节点。</li>
<li><strong>伪元素（Pseudo-elements）</strong>: 匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字，或者某个元素之前生成的内容。 </li>
<li><strong>组合器（Combinators）</strong>：这里不仅仅是选择器本身，还有以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，你可以只选择 divs 的直系子节点的段落，或者直接跟在 headings 后面的段落。</li>
<li><strong>多重选择器（Multiple selectors）</strong>：这些也不是单独的选择器；这个思路是将以逗号分隔开的多个选择器放在一个 CSS 规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</li>
</ul>
<h4 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h4><ul>
<li><p>元素选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ID 选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#polite</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: cursive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用选择器</p>
<p>它允许选择在一个页面中的所有元素，由于给每个元素应用同样的规则几乎没有什么实际价值。更常见的做法是与其他选择器结合使用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul>
<li><p>存在和值属性选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[data-vegetable]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 所有具有 "data-vegetable" 属性且属性值刚好为 "liquid" 的元素将被应用金色的背景颜色 */</span></span><br><span class="line"><span class="selector-attr">[data-vegetable=<span class="string">"liquid"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: goldenrod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 所有具有 "data-vegetable" 属性且属性值包含 "spicy" 的元素，都会被应用红色的文本颜色 */</span></span><br><span class="line"><span class="selector-attr">[data-vegetable~=<span class="string">"spicy"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子串值属性选择器</p>
<ul>
<li><code>[attr|=val]</code>：选择 attr 属性的值是 <code>val</code> 或值以 <code>val-</code> 开头的元素（注意，这里的 “-” 不是一个错误，这是用来处理语言编码的）。</li>
<li><code>[attr^=val]</code>：选择 attr 属性的值以 <code>val</code> 开头（包括 <code>val</code>）的元素。</li>
<li><code>[attr$=val]</code>：选择 attr 属性的值以 <code>val</code> 结尾（包括 <code>val</code>）的元素。</li>
<li><code>[attr*=val]</code>：选择 attr 属性的值中包含子字符串 <code>val</code> 的元素（一个子字符串就是一个字符串的一部分而已，例如，”cat “是 字符串” caterpillar“ 的子字符串）。</li>
</ul>
</li>
</ul>
<h4 id="伪类和伪元素选择器"><a href="#伪类和伪元素选择器" class="headerlink" title="伪类和伪元素选择器"></a>伪类和伪元素选择器</h4><ul>
<li><p>伪类选择器</p>
<p>一个 CSS 伪类是一个以冒号 (<code>:</code>) 作为前缀，被添加到一个选择器末尾的关键字，当你希望样式在特定状态下才被呈现到指定的元素时，你可以往元素的选择器后面加上对应的伪类（pseudo-class）。你可能希望某个元素在处于某种状态下呈现另一种样式，例如当鼠标悬停在元素上面时，或者当一个复选框被禁用或被勾选时，又或者当一个元素是它在 DOM 树中父元素的第一个子元素时。</p>
<p>全部的伪类选择器如下：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:active" target="_blank" rel="noopener"><code>:active</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:any" target="_blank" rel="noopener"><code>:any</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:any-link" target="_blank" rel="noopener"><code>:any-link</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked" target="_blank" rel="noopener"><code>:checked</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:default" target="_blank" rel="noopener"><code>:default</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:defined" target="_blank" rel="noopener"><code>:defined</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:dir" target="_blank" rel="noopener"><code>:dir()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:disabled" target="_blank" rel="noopener"><code>:disabled</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty" target="_blank" rel="noopener"><code>:empty</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:enabled" target="_blank" rel="noopener"><code>:enabled</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first" target="_blank" rel="noopener"><code>:first</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-child" target="_blank" rel="noopener"><code>:first-child</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-of-type" target="_blank" rel="noopener"><code>:first-of-type</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:fullscreen" target="_blank" rel="noopener"><code>:fullscreen</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus" target="_blank" rel="noopener"><code>:focus</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-visible" target="_blank" rel="noopener"><code>:focus-visible</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host" target="_blank" rel="noopener"><code>:host</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host()" target="_blank" rel="noopener"><code>:host()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host-context()" target="_blank" rel="noopener"><code>:host-context()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover" target="_blank" rel="noopener"><code>:hover</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:indeterminate" target="_blank" rel="noopener"><code>:indeterminate</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:in-range" target="_blank" rel="noopener"><code>:in-range</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:invalid" target="_blank" rel="noopener"><code>:invalid</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:lang" target="_blank" rel="noopener"><code>:lang()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-child" target="_blank" rel="noopener"><code>:last-child</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-of-type" target="_blank" rel="noopener"><code>:last-of-type</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:left" target="_blank" rel="noopener"><code>:left</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:link" target="_blank" rel="noopener"><code>:link</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not" target="_blank" rel="noopener"><code>:not()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child" target="_blank" rel="noopener"><code>:nth-child()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-child" target="_blank" rel="noopener"><code>:nth-last-child()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-of-type" target="_blank" rel="noopener"><code>:nth-last-of-type()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type" target="_blank" rel="noopener"><code>:nth-of-type()</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-child" target="_blank" rel="noopener"><code>:only-child</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-of-type" target="_blank" rel="noopener"><code>:only-of-type</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:optional" target="_blank" rel="noopener"><code>:optional</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:out-of-range" target="_blank" rel="noopener"><code>:out-of-range</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-only" target="_blank" rel="noopener"><code>:read-only</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-write" target="_blank" rel="noopener"><code>:read-write</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:required" target="_blank" rel="noopener"><code>:required</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:right" target="_blank" rel="noopener"><code>:right</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root" target="_blank" rel="noopener"><code>:root</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:scope" target="_blank" rel="noopener"><code>:scope</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:target" target="_blank" rel="noopener"><code>:target</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:valid" target="_blank" rel="noopener"><code>:valid</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited" target="_blank" rel="noopener"><code>:visited</code></a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这些样式将在任何情况下应用于我们的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们想让被访问过的链接和未被访问的链接看起来一样 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当光标悬停于链接，键盘激活或锁定链接时，我们让链接呈现高亮 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: darkred;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>伪元素选择器</p>
<p>全部的伪元素如下（试验属性的不算）：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after" target="_blank" rel="noopener"><code>::after</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before" target="_blank" rel="noopener"><code>::before</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter" target="_blank" rel="noopener"><code>::first-letter</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line" target="_blank" rel="noopener"><code>::first-line</code></a> | <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection" target="_blank" rel="noopener"><code>::selection</code></a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 所有含有 "href" 属性并且值以 "http" 开始的元素，将会在其内容后增加一个箭头（去表明它是外部链接）*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[href^=http]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'⤴'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>按照规则应该使 <code>(::)</code> 而不是 <code>(:)</code>，从而区分伪类和伪元素。但是，由于在旧版本的 W3C 规范并未对此进行特别区分，因此目前绝大多数的浏览器都支持使用这两种方式表示伪元素。</p>
</blockquote>
</li>
</ul>
<h4 id="组合器与选择器组"><a href="#组合器与选择器组" class="headerlink" title="组合器与选择器组"></a>组合器与选择器组</h4><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">组合器</th>
<th align="left">匹配规则</th>
</tr>
</thead>
<tbody><tr>
<td align="left">选择器组</td>
<td align="left">A, B</td>
<td align="left">匹配满足 A和（或）B 的任意元素</td>
</tr>
<tr>
<td align="left">后代选择器</td>
<td align="left">A B</td>
<td align="left">匹配 B 元素，满足条件：B 是 A 的后代结点</td>
</tr>
<tr>
<td align="left">子选择器</td>
<td align="left">A &gt; B</td>
<td align="left">匹配 B 元素，满足条件：B 是 A 的直接子节点</td>
</tr>
<tr>
<td align="left">相邻兄弟选择器</td>
<td align="left">A + B</td>
<td align="left">匹配 B 元素，满足条件：B 是 A 的下一个兄弟节点</td>
</tr>
<tr>
<td align="left">通用兄弟选择器</td>
<td align="left">A ~ B</td>
<td align="left">匹配 B 元素，满足条件：B 是 A 之后的兄弟节点中的任意一个</td>
</tr>
</tbody></table>
<h3 id="CSS-数值与单位"><a href="#CSS-数值与单位" class="headerlink" title="CSS 数值与单位"></a>CSS 数值与单位</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul>
<li><p>长度和尺寸</p>
<ol>
<li>px — 像素（px）<strong>是一种绝对单位</strong>（<strong>absolute units</strong>）<strong>，</strong> 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的，就像 m（米）。</li>
<li><code>em</code> — em 与当前元素的字体大小相同（更具体地说，一个大写字母 M 的宽度）。CSS 样式被应用之前，浏览器给网页设置的默认基础字体大小是 16 像素，这意味着对一个元素来说 1em 的计算值默认为 16 像素。但是要小心 —em 单位是会继承父元素的字体大小，所以如果在父元素上设置了不同的字体大小，em 的像素值就会变得复杂。<strong>em 是 Web 开发中最常用的相对单位</strong>。</li>
<li><del><code>ex</code>, <code>ch</code> — 分别是小写 x 的高度和数字 0 的宽度。这些并不像 em 那样被普遍使用或很好地被支持。</del></li>
<li><code>rem</code> — REM（root em）和 em 以同样的方式工作，但它总是等于默认基础字体大小的尺寸；继承的字体大小将不起作用，所以这听起来像一个比 em 更好的选择，虽然在旧版本的 IE 上不被支持。</li>
<li><code>vw</code>, <code>vh</code> — 分别是视口宽度的 1/100 和视口高度的 1/100，其次，它不像 rem 那样被广泛支持。</li>
</ol>
<p>使用相对单位是非常有用的 — 你可以相对于你的字体或视口大小来调整 HTML 元素的大小，这意味着，假设整个网站上的文本大小被视力障碍用户调整为原来的两倍，而网站的布局仍将保持正确。</p>
</li>
<li><p>无单位的值</p>
<ol>
<li><code>0</code> — <code>margin: 0;</code></li>
<li><code>line-height</code> — 设置行间距的，对比的是行本身文字的大小。</li>
<li>动画的次数等 — 如  <code>animation-iteration-count: 5;</code></li>
</ol>
</li>
</ul>
<h4 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h4><p>百分比一般都是相对于父容器，父容器即使没有设定这个元素，父容器也应该有默认值，如：默认情况下宽度是视口宽度的 100％，默认情况下的字体大小为 16px。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: 200%;</span><br></pre></td></tr></table></figure>

<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>现代计算机中可用的标准颜色系统是 24 位，通过不同的红、绿、蓝通道，每个通道有 256（2^(24/3)）种不同的值，从而显示出大约 1670 万（256 x 256 x 256 = 16,777,216）种不同的颜色。</p>
<ul>
<li><p>关键字</p>
<p>CSS 中最简单、最古老的颜色类型就是颜色关键词。这些都是代表特定颜色值的特定字符串。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>十六进制</p>
<p>每对十六进制数代表一个通道（红色、绿色或者蓝色），允许我们指定 256 个可用值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>RGB</p>
<p>一个 RGB 值是一个函数 — <code>rgb()</code> 给定的三个参数，分别表示红色，绿色和蓝色通道的颜色值，这与十六进制值的工作方式大致相同。区别在于，RGB 中每个通道不是由两个十六进制数字表示的，而是由 0 到 255 之间的十进制数表示的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>,<span class="number">176</span>,<span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HSL</p>
<p><code>hsl()</code> 函数接受三个表示<strong>色调</strong>、<strong>饱和度</strong>以及<strong>明度</strong>的参数。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">240</span>,<span class="number">100%</span>,<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>RGBA 和 HSLA</p>
<p>就是 RGB 和 HSL 加了一个 Alpha 通道参数（即透明度）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">240</span>,<span class="number">100%</span>,<span class="number">50%</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Opacity — 不透明度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 与设置某个特定颜色的透明度相比，这会设置所有选定元素以及它们的孩子节点的不透明度。*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="坐标位置"><a href="#坐标位置" class="headerlink" title="坐标位置"></a>坐标位置</h4><h3 id="层叠与继承"><a href="#层叠与继承" class="headerlink" title="层叠与继承"></a>层叠与继承</h3><p>CSS 就叫做层叠样式表，可想而知层叠的重要性。多个选择器作用于同一个元素，称为层叠，这些选择器是有优先级的，在层叠中需要考虑三个方面：</p>
<ol>
<li>重要性（Importance）</li>
<li>专用性（Specificity）</li>
<li>源代码次序（Source order）</li>
</ol>
<h4 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h4><p>重要性是最重要的，<code>!important</code> 无敌，因为它会破坏层叠的各种规则，所以尽量不要用，当然有时不得不用，因为一个 CSS 声明的重要性取决于它被指定在什么样式表内 — 相互冲突的声明将按以下顺序适用，后一种将覆盖先前的声明：</p>
<ol>
<li>在用户代理样式表的声明（例如：浏览器在没有其他声明的默认样式）</li>
<li>用户样式表中的普通声明（由用户设置的自定义样式）</li>
<li>作者样式表中的普通声明（这是我们设置的样式，Web 开发人员）</li>
<li>作者样式表中的重要声明</li>
<li>用户样式表中的重要声明</li>
</ol>
<p>Web 开发者的样式表覆盖用户的样式表是合理的，所以设计可以保持预期，但是有时候用户有很好的理由来重写 web 开发人员样式，如上所述，这可以通过在用户的规则中使用 <code>!important</code>。</p>
<blockquote>
<p>重载 <code>!important</code> 声明的方法：在后面的源码或者是一个拥有更高专用性的源码中包含相同的 <code>!important</code> 声明。</p>
</blockquote>
<h4 id="专用性"><a href="#专用性" class="headerlink" title="专用性"></a>专用性</h4><p>由于 <code>!important</code> 属性实际上不怎么用，所以专用性可能是更常用的规则了，它采用了一种积分策略，谁的分多，谁的选择器就生效：</p>
<ol>
<li>千位：如果声明是在 <code>style</code> 属性中该列加 1 分（这样的声明没有选择器，所以它们的专用性总是 1000）。</li>
<li>百位：在整个选择器中每包含一个 ID 选择器就在该列中加 1 分。</li>
<li>十位：在整个选择器中每包含一个类选择器、属性选择器、或者伪类就在该列中加 1 分。</li>
<li>个位：在整个选择器中每包含一个元素选择器或伪元素就在该列中加 1 分。</li>
</ol>
<h4 id="源代码次序"><a href="#源代码次序" class="headerlink" title="源代码次序"></a>源代码次序</h4><p>虽然上两条规则解决了 99.99% 的问题，但是万一偏偏就那么巧，两个选择器得了一样的积分，谁真正起作用呢？<strong>后面的规则将战胜先前的规则</strong>。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>当多个 CSS 规则匹配相同的元素时，它们都被应用到该元素中。只有在这之后，任何相互冲突的属性才会被评估，以确定哪种风格会战胜其他类型。</p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>应用于某个元素的一些属性值将由该元素的子元素继承，而有些则不会。</p>
<ul>
<li>例如，对 <code>font-family</code> 和 <code>color</code> 进行继承是有意义的，因为这使得您可以很容易地设置一个站点范围的基本字体，方法是应用一个字体到 <code>html</code> 元素；然后，您可以在需要的地方覆盖单个元素的字体。如果要在每个元素上分别设置基本字体，那就太麻烦了。</li>
<li>再如，让 <code>margin</code>，<code>padding</code>，<code>border</code> 和 <code>background-image</code> 不被继承是有意义的。想象一下，如果在容器元素上设置这些属性并让它们由每个子元素继承，那么样式/布局会发生混乱，然后必须在每个单独的元素上取消它们！</li>
</ul>
<p>哪些属性默认被继承哪些不被继承大部分符合常识。如果你想确定，你可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference" target="_blank" rel="noopener">CSS 参考资料</a>。</p>
<h4 id="控制继承"><a href="#控制继承" class="headerlink" title="控制继承"></a>控制继承</h4><p>CSS 为处理继承提供了四种特殊的通用属性值：</p>
<ul>
<li><code>inherit</code> — 该值将应用到选定元素的属性值设置为与其父元素一样。</li>
<li><code>initial</code> — 该值将应用到选定元素的属性值设置为与浏览器默认样式表中该元素设置的值一样。如果浏览器默认样式表中没有设置值，并且该属性是自然继承的，那么该属性值就被设置为 <code>inherit</code>。</li>
<li><code>unset</code> — 该值将属性重置为其自然值，即如果属性是自然继承的，那么它就表现得像 <code>inherit</code>，否则就是表现得像 <code>initial</code>。</li>
<li><code>revert</code> — 如果当前的节点没有应用任何样式，则将该属性恢复到它所拥有的值。换句话说，属性值被设置成自定义样式所定义的属性（如果被设置），否则属性值被设置成用户代理的默认样式。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Default <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"inherit"</span>&gt;</span>Inherit the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"initial"</span>&gt;</span>Reset the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"unset"</span>&gt;</span>Unset the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inherit</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.initial</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: initial</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.unset</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: unset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   Output：<img src="https://i.loli.net/2019/03/31/5c9fa77783c85.png" alt=""></p>
<h3 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h3><h4 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h4><ul>
<li><p><code>width</code> 和 <code>height</code></p>
<p><code>width</code> 和 <code>height</code> 设置内容框（content box）的宽度和高度。内容框是框内容显示的区域 — 包括框内的文本内容，以及表示嵌套子元素的其它框。</p>
<blockquote>
<p><strong>注意</strong> : 还有其他属性可以更巧妙地处理内容的大小 — 设置大小约束而不是绝对的大小。这些属性包括 <code>min-width</code>、<code>max-width</code>、<code>min-height</code> 和 <code>max-height</code>。</p>
</blockquote>
</li>
<li><p><code>padding</code></p>
<p><strong>padding</strong> 表示一个 CSS 框的<strong>内边距</strong> — 这一层位于内容框的外边缘与边界的内边缘之间。该层的大小可以通过简写属性 <code>padding</code> 一次设置所有四个边，或用 <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code> 和 <code>padding-left</code> 属性一次设置一个边。</p>
</li>
<li><p><code>border</code><br>CSS 框的<strong>边框</strong>（border）是一个分隔层，位于内边距的外边缘以及外边距的内边缘之间。边框的默认大小为 0 — 从而让它不可见，不过我们可以设置边界的厚度、风格和颜色让它出现。<code>border</code> 简写属性可以让我们一次设置所有四个边，例如 <code>border: 1px solid black;</code> — 但这个简写可以被各种普通书写的更详细的属性所覆盖。</p>
</li>
<li><p><code>border-top</code>，<code>border-right</code>，<code>border-bottom</code>，<code>border-left</code><br>分别设置某一边的边界厚度／风格／颜色。</p>
</li>
<li><p><code>border-width</code>，<code>border-style</code>，<code>border-color</code><br>分别仅设置边界的厚度／风格／颜色，并应用到全部四边边界。<br>你也可以单独设置某一个边的三个不同属性，如 <code>border-top-width</code>，<code>border-top-style</code>，<code>border-top-color</code> 等。 </p>
</li>
<li><p><code>margin</code></p>
<p>外边距（margin）代表 CSS 框周围的外部区域，称为<strong>外边距</strong>，它在布局中推开其它 CSS 框。其表现与 padding 很相似；简写属性为 <code>margin</code>，单个属性分别为 <code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code> 和 <code>margin-left</code>。</p>
</li>
</ul>
<p><strong>注意</strong>: 外边距有一个特别的行为被称作外边距塌陷（margin collapsing）：当两个框彼此接触时，它们的间距将取两个相邻外边界的最大值，而非两者的总和。 </p>
<p><img src="https://i.loli.net/2019/03/31/5c9fa98b34d88.png" alt=""></p>
<h4 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h4><ul>
<li><p>溢流</p>
<p>当你使用绝对的值设置了一个框的大小（如，固定像素的宽/高），允许的大小可能不适合放置内容，这种情况下内容会从盒子溢流。我们使用 <code>overflow</code> 属性来控制这种情况的发生。它有一些可能的值，但是最常用的是：</p>
<ul>
<li><p><code>visible</code>：当内容过多，溢流的内容被显示在盒子的外边（默认）</p>
</li>
<li><p><code>auto</code>：当内容过多，溢流的内容被隐藏，然后出现滚动条来让我们滚动查看所有的内容。</p>
</li>
<li><p><code>hidden</code>：当内容过多，溢流的内容被隐藏。</p>
</li>
</ul>
</li>
<li><p>背景裁剪</p>
<p>框的背景是由颜色和图片组成的，它们堆叠在一起（<code>background-color</code>、<code>background-image</code>）。它们被应用到一个盒子里，然后被画在盒子的下面。默认情况下，背景延伸到了边界外沿。这通常是 OK 的，但是在一些情况下比较讨厌（假使你有一个平铺的背景图，你只想要它延伸到内容的边沿会怎么做？），该行为可以通过设置盒子的 <code>background-clip</code> 属性来调整，它有三个的值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width  </span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height </span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border </span>: <span class="number">20px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin </span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-size    </span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-image   </span>: <span class="built_in">url</span>(<span class="string">'https://mdn.mozillademos.org/files/11947/ff-logo.png'</span>);</span><br><span class="line">  <span class="attribute">background-color   </span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.default</span>     &#123;<span class="attribute">background-clip</span>: border-box;&#125;</span><br><span class="line"><span class="selector-class">.padding-box</span> &#123;<span class="attribute">background-clip</span>: padding-box;&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> &#123;<span class="attribute">background-clip</span>: content-box;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>轮廓</p>
<p>最后，还有重要的一点，一个框的 <code>outline</code> 是一个看起来像是边界但又不属于盒模型的东西。它的行为和边界差不多，但是并不改变盒的尺寸（更准确的说，轮廓被勾画于在框边界之外，外边距区域之内）</p>
</li>
</ul>
<h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p><code>display</code> 属性有很多的属性值。我们这里关注三个最常见的类型：<code>block</code>、<code>inline</code> 和 <code>inline-block</code>：</p>
<ul>
<li>块是定义为堆放在其他盒上的盒（例如：其内容会独占一行），而且可以设置它的宽高，之前所有对于框模型的应用适用于块。</li>
<li>行内元素是相反的，它随着文档的文字流动（例如：它将会和周围的文字和其他行内元素出现在同一行，而且它的内容会像一段中的文字一样随着文字部分的流动而打乱），对行内元素设置宽高无效，设置 <code>padding</code>、<code>margin</code> 和 <code>border</code> 都会更新周围文字的位置，但是对于周围的的块不会有影响。</li>
<li>行内块状元素像是上述两种的集合：它不会重新另起一行，会像行内框一样随着周围文字而流动，而且他能够设置宽高，并且像块框一样保持了其块特性的完整性，它不会在段落行中断开。（在下面的示例中，行内块状框会放在第二行文本上，因为第一行没有足够的空间，并且不会突破两行。然而，如果没有足够的空间，行内框会在多条线上断裂，而它会失去一个框的形状）。</li>
</ul>
<h3 id="CSS-除错"><a href="#CSS-除错" class="headerlink" title="CSS 除错"></a>CSS 除错</h3><p>使用 <a href="http://jigsaw.w3.org/css-validator/" target="_blank" rel="noopener">W3C CSS Validation Service</a> — 对于一个大型的样式表，首先要通过这个服务来消除任何基本的语法错误，然后再依赖浏览器开发人员工具来确定其他问题。</p>
<h2 id="样式化文字"><a href="#样式化文字" class="headerlink" title="样式化文字"></a>样式化文字</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><p>前景色（通常指文本，不过也包含一些其他东西，或者是使用 <code>text-decoration</code> 「<code>underline overline</code>」属性放置在文本下方或上方的线）</p>
<h4 id="字体种类"><a href="#字体种类" class="headerlink" title="字体种类"></a>字体种类</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网页安全字体"><a href="#网页安全字体" class="headerlink" title="网页安全字体"></a>网页安全字体</h4><table>
<thead>
<tr>
<th align="left">字体名称</th>
<th align="left">字体类型</th>
<th align="left">注意</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Arial</td>
<td align="left">sans-serif</td>
<td align="left">通常认为最佳做法还是添加 Helvetica 作为 Arial 的首选替代品，尽管它们的字体面几乎相同，但 Helvetica 被认为具有更好的形状，即使Arial更广泛地可用。</td>
</tr>
<tr>
<td align="left">Courier New</td>
<td align="left">monospace</td>
<td align="left">某些操作系统有一个 Courier New 字体的替代（可能较旧的）版本叫 Courier。使用Courier New 作为 Courier 的首选替代方案，被认为是最佳做法。</td>
</tr>
<tr>
<td align="left">Georgia</td>
<td align="left">serif</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Times New Roman</td>
<td align="left">serif</td>
<td align="left">某些操作系统有一个 Times New Roman 字体的替代（可能较旧的）版本叫 Times。使用Times 作为 Times New Roman 的首选替代方案，被认为是最佳做法。</td>
</tr>
<tr>
<td align="left">Trebuchet MS</td>
<td align="left">sans-serif</td>
<td align="left">您应该小心使用这种字体——它在移动操作系统上并不广泛。</td>
</tr>
<tr>
<td align="left">Verdana</td>
<td align="left">sans-serif</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="默认字体"><a href="#默认字体" class="headerlink" title="默认字体"></a>默认字体</h4><p>CSS 定义了 5 个常用的字体名称:  <code>serif</code>、<code>sans-serif</code>、<code>monospace</code>、<code>cursive</code> 和 <code>fantasy</code>，这些都是非常通用的，当使用这些通用名称时，使用的字体完全取决于每个浏览器，而且它们所运行的每个操作系统也会有所不同。这是一种糟糕的情况，浏览器会尽力提供一个看上去合适的字体。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>serif</code></td>
<td align="left">有衬线的字体 （衬线一词是指字体笔画尾端的小装饰，存在于某些印刷体字体中）</td>
</tr>
<tr>
<td align="left"><code>sans-serif</code></td>
<td align="left">没有衬线的字体。</td>
</tr>
<tr>
<td align="left"><code>monospace</code></td>
<td align="left">每个字符具有相同宽度的字体，通常用于代码列表。</td>
</tr>
<tr>
<td align="left"><code>cursive</code></td>
<td align="left">用于模拟笔迹的字体，具有流动的连接笔画。</td>
</tr>
<tr>
<td align="left"><code>fantasy</code></td>
<td align="left">用来装饰的字体</td>
</tr>
</tbody></table>
<h4 id="字体栈"><a href="#字体栈" class="headerlink" title="字体栈"></a>字体栈</h4><p>由于你无法保证你想在你的网页上使用的字体的可用性（甚至一个网络字体可能由于某些原因而出错），你可以提供一个<strong>字体栈</strong>（<strong>font stack</strong>），这样的话，浏览器就有多种字体可以选择了。只需包含一个 <code>font-family</code> 属性，其值由几个用逗号分离的字体名称组成。在字体栈的最后提供一个合适的通用的字体名称是个不错的办法，这样的话，即使列出的字体都无法使用，浏览器至少可以提供一个还算合适的选择。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Trebuchet MS"</span>, Verdana, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 有一些字体名称不止一个单词，比如 <code>Trebuchet MS</code>，那么就需要用引号包裹。</p>
</blockquote>
<h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><ol>
<li><p><code>px</code>：将像素的值赋予给你的文本。这是一个绝对单位，它导致了在任何情况下，页面上的文本所计算出来的像素值都是一样的。</p>
</li>
<li><p><code>em</code>：<code>1em</code> 等于我们设计的当前元素的父元素上设置的字体大小 （确切来说是指在父元素中的大写字母 M 的宽度) 。如果你有大量设置了不同字体大小的嵌套元素，这可能会变得棘手，但它是可行的。你可以使用 <code>em</code> 调整任何东西的大小，不只是文本。你可以有一个单位全部都使用 <code>em</code> 的网站，这样维护起来会很简单。</p>
</li>
<li><p><code>rem</code>：这个单位的效果和 <code>em</code> 差不多，除了 <code>1rem</code> 等于 HTML 中的根元素的字体大小，而不是父元素。这可以让你更容易计算字体大小，但是遗憾的是， <code>rem</code> 不支持 Internet Explorer 8 和以下的版本。如果你的项目需要支持较老的浏览器，你可以坚持使用 <code>em</code> 或 <code>px</code>，或者使用 polyfill。</p>
<blockquote>
<p>polyfill 是一块用来为旧浏览器提供它没有原生支持的较新的功能的代码（通常是 Web 上的 JavaScript）。</p>
<p>比如说 polyfill 可以让 IE7 使用 Silverlight 插件来模拟 HTML Canvas 元素的功能、模拟 CSS 实现 rem 单位的支持、模拟 <code>text-shadow</code> 或其他任何你想要的功能。</p>
</blockquote>
</li>
</ol>
<h4 id="字体常用"><a href="#字体常用" class="headerlink" title="字体常用"></a>字体常用</h4><ul>
<li><p><code>font-style</code></p>
<p>用来打开和关闭文本 italic。可能的值如下：</p>
<ul>
<li><code>normal</code>：将文本设置为普通字体</li>
<li><code>italic</code>：如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 <code>oblique</code> 状态来模拟 <code>italics</code>。</li>
<li><code>oblique</code>：将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。</li>
</ul>
</li>
<li><p><code>font-weight</code></p>
<p>设置文字的粗体大小。这里有很多值可选（<code>light</code> | <code>normal</code> | <code>bold</code> | <code>extrabold</code> | <code>black</code>），一些字体只提供 <code>normal</code> 和 <code>bold</code> 两种值，我们一般也只用这两个值。</p>
<ul>
<li><code>normal</code>、<code>bold</code>：普通或者<strong>加粗</strong>的字体粗细</li>
<li><code>lighter</code>、<code>bolder</code>： 将当前元素的粗体设置为比其父元素粗体更细或更粗一步。</li>
<li><code>100</code>–<code>900</code>：数值粗体值，如果需要，可提供比上述关键字更精细的粒度控制。</li>
</ul>
</li>
<li><p><code>text-transform</code></p>
<p>允许你设置要转换的字体。值包括：</p>
<ul>
<li><code>none</code>：防止任何转型。</li>
<li><code>uppercase</code>：将所有文本转为大写。</li>
<li><code>lowercase</code>：将所有文本转为小写。</li>
<li><code>capitalize</code>：转换所有单词让其首字母大写。</li>
<li><code>full-width</code>：将所有字形转换成固定宽度的正方形，主要是将表意字符和拉丁文字书写进一个方形里，并允许它们按照一般的东亚文字（比如中文或日文）对齐。</li>
</ul>
</li>
<li><p><code>text-decoration</code></p>
<p>设置/取消字体上的文本装饰（你将主要使用此方法在设置链接时取消设置链接上的默认下划线）可用值为：</p>
<ul>
<li><code>none</code>：取消已经存在的任何文本装饰。</li>
<li><code>underline</code>：文本下划线.</li>
<li><code>overline</code>：文本上划线</li>
<li><code>line-through</code>：穿过文本的线</li>
</ul>
<p>你应该注意到 <code>text-decoration</code> 可以一次接受多个值，比如 <code>text-decoration: underline overline</code>。同时注意 <code>text-decoration</code> 是一个缩写形式，它由 <code>text-decoration-line</code>、<code>text-decoration-style</code> 和 <code>text-decoration-color</code> 构成。</p>
</li>
</ul>
<h4 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h4><p><code>text-shadow</code> 有如下几个参数：</p>
<p>水平偏移（必需）、垂直便宜（必需）、模糊半径（默认 0）、阴影的颜色（默认文字颜色）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: 4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多种阴影 */</span></span><br><span class="line"><span class="selector-tag">text-shadow</span>: <span class="selector-tag">-1px</span> <span class="selector-tag">-1px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#aaa</span>,</span><br><span class="line">             0<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>),</span><br><span class="line">             4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.7</span>),</span><br><span class="line">             0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 7<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.4</span>);</span><br></pre></td></tr></table></figure>

<h4 id="文本布局风格"><a href="#文本布局风格" class="headerlink" title="文本布局风格"></a>文本布局风格</h4><ul>
<li><p>文本对齐</p>
<p><code>text-align</code> 常用的可选属性有 <code>left</code>、<code>right</code>、<code>center</code>、<code>justify</code>，值得注意的是 <code>justify</code> 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。你需要仔细使用，它可以看起来很可怕。特别是当应用于其中有很多长单词的段落时。如果你要使用这个，你也应该考虑一起使用别的东西，比如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/hyphens" target="_blank" rel="noopener"><code>hyphens</code></a>，打破一些更长的词语。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>行高</p>
<p><code>line-height</code> 属性设置文本每行之间的高，可以接受大多数单位，不过也可以设置一个无单位的值，作为乘数，通常这种是比较好的做法。无单位的值乘以 <code>font-size</code> 来获得 <code>line-height</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字母和单词间距</p>
<p>不解释了，直接看代码吧：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="其他常用样式"><a href="#其他常用样式" class="headerlink" title="其他常用样式"></a>其他常用样式</h4><ul>
<li><p>Font 样式</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant" target="_blank" rel="noopener"><code>font-variant</code></a>: 在小型大写字母和普通文本选项之间切换。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-kerning" target="_blank" rel="noopener"><code>font-kerning</code></a>: 开启或关闭字体间距选项。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-feature-settings" target="_blank" rel="noopener"><code>font-feature-settings</code></a>: 开启或关闭不同的 <a href="https://en.wikipedia.org/wiki/OpenType" target="_blank" rel="noopener">OpenType</a> 字体特性。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant-alternates" target="_blank" rel="noopener"><code>font-variant-alternates</code></a>: 控制给定的自定义字体的替代字形的使用。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant-caps" target="_blank" rel="noopener"><code>font-variant-caps</code></a>: 控制大写字母替代字形的使用。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant-east-asian" target="_blank" rel="noopener"><code>font-variant-east-asian</code></a>: 控制东亚文字替代字形的使用, 像日语和汉语。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant-ligatures" target="_blank" rel="noopener"><code>font-variant-ligatures</code></a>: 控制文本中使用的连写和上下文形式。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant-numeric" target="_blank" rel="noopener"><code>font-variant-numeric</code></a>: 控制数字，分式和序标的替代字形的使用。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant-position" target="_blank" rel="noopener"><code>font-variant-position</code></a>: 控制位于上标或下标处，字号更小的替代字形的使用。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size-adjust" target="_blank" rel="noopener"><code>font-size-adjust</code></a>: 独立于字体的实际大小尺寸，调整其可视大小尺寸。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-stretch" target="_blank" rel="noopener"><code>font-stretch</code></a>: 在给定字体的可选拉伸版本中切换。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-underline-position" target="_blank" rel="noopener"><code>text-underline-position</code></a>: 指定下划线的排版位置，通过使用 <code>text-decoration-line</code> 属性的<code>underline</code> 值。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-rendering" target="_blank" rel="noopener"><code>text-rendering</code></a>: 尝试执行一些文本渲染优化。</li>
</ul>
</li>
<li><p>文本布局样式</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-indent" target="_blank" rel="noopener"><code>text-indent</code></a>: 指定文本内容的第一行前面应该留出多少的水平空间。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-overflow" target="_blank" rel="noopener"><code>text-overflow</code></a>: 定义如何向用户表示存在被隐藏的溢出内容。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space" target="_blank" rel="noopener"><code>white-space</code></a>: 定义如何处理元素内部的空白和换行。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break" target="_blank" rel="noopener"><code>word-break</code></a>: 指定是否能在单词内部换行。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/direction" target="_blank" rel="noopener"><code>direction</code></a>: 定义文本的方向 (这取决于语言，并且通常最好让HTML来处理这部分，因为它是和文本内容相关联的。)</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/hyphens" target="_blank" rel="noopener"><code>hyphens</code></a>: 为支持的语言开启或关闭连字符。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-break" target="_blank" rel="noopener"><code>line-break</code></a>: 对东亚语言采用更强或更弱的换行规则。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align-last" target="_blank" rel="noopener"><code>text-align-last</code></a>: 定义一个块或行的最后一行，恰好位于一个强制换行前时，如何对齐。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-orientation" target="_blank" rel="noopener"><code>text-orientation</code></a>: 定义行内文本的方向。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-wrap" target="_blank" rel="noopener"><code>word-wrap</code></a>: 指定浏览器是否可以在单词内换行以避免超出范围。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/writing-mode" target="_blank" rel="noopener"><code>writing-mode</code></a>: 定义文本行布局为水平还是垂直，以及后继文本流的方向。</li>
</ul>
</li>
</ul>
<h4 id="Font-简写"><a href="#Font-简写" class="headerlink" title="Font 简写"></a>Font 简写</h4><p>许多字体的属性也可以通过 <code>font</code> 的简写方式来设置 . 这些是按照以下顺序来写的：<code>font-style</code>、<code>font-variant</code>、<code>font-weight</code>、<code>font-stretch</code>、<code>font-size</code>、<code>line-height</code> 和 <code>font-family</code>。如果你想要使用 <code>font</code> 的简写形式，在所有这些属性中，只有 <code>font-size</code> 和 <code>font-family</code> 是一定要指定的。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>font-size</code> 和 <code>line-height</code> 属性之间必须放一个正斜杠。</p>
</blockquote>
<h3 id="样式化列表"><a href="#样式化列表" class="headerlink" title="样式化列表"></a>样式化列表</h3><h4 id="列表特定样式"><a href="#列表特定样式" class="headerlink" title="列表特定样式"></a>列表特定样式</h4><ul>
<li><code>项目符号点</code>样式</li>
<li><code>项目符号点</code>位置</li>
<li>使用自定义<code>项目符号点</code>图片</li>
</ul>
<p>以上三点综合起来看就是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: square;</span><br><span class="line">  <span class="attribute">list-style-position</span>: inside;</span><br><span class="line">  <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(example.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓ 简写</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: square <span class="built_in">url</span>(example.png) inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不十分推荐使用 <code>list-style-image</code>，这个属性在控制项目符号的位置，大小等方面是有限的。最好使用 <code>background</code> 系列属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(star.svg);</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">1.6rem</span> <span class="number">1.6rem</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="有序项目符号点的计数"><a href="#有序项目符号点的计数" class="headerlink" title="有序项目符号点的计数"></a>有序项目符号点的计数</h4><ul>
<li><p><code>start</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toast pitta, leave to cool, then slice down the edge.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fry the halloumi in a shallow, non-stick pan, until browned on both sides.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wash and chop the salad.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fill pitta with salad, humous, and fried halloumi.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reversed</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"4"</span> <span class="attr">reversed</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toast pitta, leave to cool, then slice down the edge.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fry the halloumi in a shallow, non-stick pan, until browned on both sides.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wash and chop the salad.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fill pitta with salad, humous, and fried halloumi.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>value</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>Toast pitta, leave to cool, then slice down the edge.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>Fry the halloumi in a shallow, until browned on both sides.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span>Wash and chop the salad.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">"8"</span>&gt;</span>Fill pitta with salad, humous, and fried halloumi.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="样式化链接"><a href="#样式化链接" class="headerlink" title="样式化链接"></a>样式化链接</h3><h4 id="链接状态"><a href="#链接状态" class="headerlink" title="链接状态"></a>链接状态</h4><ul>
<li><strong>Link (没有访问过的)</strong>：这是链接的默认状态，当它没有处在其他状态的时候，它可以使用 <code>:link</code> 伪类来应用样式。</li>
<li><strong>Visited</strong>：这个链接已经被访问过了(存在于浏览器的历史纪录), 它可以使用 <code>:visited</code> 伪类来应用样式。</li>
<li><strong>Hover</strong>：当用户的鼠标光标刚好停留在这个链接，它可以使用 <code>:hover</code> 伪类来应用样式。</li>
<li><strong>Focus</strong>：一个链接当它被选中的时候 (比如通过键盘的 Tab  移动到这个链接的时候，或者使用编程的方法来选中这个链接 <code>HTMLElement.focus()</code> 它可以使用 <code>:focus</code> 伪类来应用样式。</li>
<li><strong>Active</strong>：一个链接当它被激活的时候 (比如被点击的时候)，它可以使用 <code>:active</code> 伪类来应用样式。</li>
</ul>
<h4 id="将样式应用到链接"><a href="#将样式应用到链接" class="headerlink" title="将样式应用到链接"></a>将样式应用到链接</h4><p>顺序是重要的，因为链接的样式是建立在另一个样式之上的，比如第一个规则的样式会应用到所有后续的样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 帮助记忆 LoVe Fears HAte */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在链接里包含图标"><a href="#在链接里包含图标" class="headerlink" title="在链接里包含图标"></a>在链接里包含图标</h4><p>Show you code：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">"http"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://mdn.mozillademos.org/files/external-link-52.png'</span>) no-repeat <span class="number">100%</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">16px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">19px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样式化链接为按钮"><a href="#样式化链接为按钮" class="headerlink" title="样式化链接为按钮"></a>样式化链接为按钮</h4><p>这是个常见需求，做个简单示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">19.5%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0.625%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;     </span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Web-字体"><a href="#Web-字体" class="headerlink" title="Web 字体"></a>Web 字体</h3><h4 id="使用-Web-字体"><a href="#使用-Web-字体" class="headerlink" title="使用 Web 字体"></a>使用 Web 字体</h4><p>首先，要在 CSS 的开始处写一个 <code>@font-face</code> 块，它指定要下载的字体文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"myFont"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"myFont.ttf"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个下面，你可以使用 <code>@font-face</code> 中指定的字体种类名称来将你的定制字体应用到你喜欢的任何东西上：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"myFont"</span>, <span class="string">"Bitstream Vera Serif"</span>, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="font-face-的细节"><a href="#font-face-的细节" class="headerlink" title="@font-face 的细节"></a><code>@font-face</code> 的细节</h4><p>从一个小例子看起：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'ciclefina'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'fonts/cicle_fina-webfont.eot'</span>); <span class="comment">/* IE9 Compat Modes */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'fonts/cicle_fina-webfont.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/cicle_fina-webfont.woff2'</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>), <span class="comment">/* Modern Browsers */</span></span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/cicle_fina-webfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="comment">/* Modern Browsers */</span></span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/cicle_fina-webfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="comment">/* Safari, Android, iOS */</span></span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/cicle_fina-webfont.svg#ciclefina'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>); <span class="comment">/* Legacy iOS */</span></span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'zantrokeregular'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'fonts/zantroke-webfont.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'fonts/zantroke-webfont.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/zantroke-webfont.woff2'</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/zantroke-webfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/zantroke-webfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">'fonts/zantroke-webfont.svg#zantrokeregular'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* General setup */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Typography */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'zantrokeregular'</span>, serif;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.6rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0.1rem</span>;</span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'ciclefina'</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从哪里获取这么多格式的同一个字体？<a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="noopener">从这里</a>。</p>
<h4 id="使用在线字体服务"><a href="#使用在线字体服务" class="headerlink" title="使用在线字体服务"></a>使用在线字体服务</h4><p>如 Google Fonts，很简单，能打开就能会，就不讲了吧。</p>
<h2 id="样式化区块"><a href="#样式化区块" class="headerlink" title="样式化区块"></a>样式化区块</h2><h3 id="再谈-CSS-盒模型"><a href="#再谈-CSS-盒模型" class="headerlink" title="再谈 CSS 盒模型"></a>再谈 CSS 盒模型</h3><h4 id="回顾盒模型"><a href="#回顾盒模型" class="headerlink" title="回顾盒模型"></a>回顾盒模型</h4><ul>
<li><p>一些值得记忆的点</p>
<ul>
<li>盒子的高度不适用百分比长度；盒子的高度总是会和内容框的高度相同，除非另外给它设置了一个绝对高度（例如，像素或者 em）。这比把页面上每个盒子的高度默认设置为视口高度的 100% 更方便。</li>
<li>边界（border）也会忽略百分比宽度设置。</li>
<li>外边距（margin）有一个特殊的行为，称为外边距塌陷：当两个盒子挨在一起时，二者之间的距离为两个挨着的外边距中最大的那个值，而不是二者的和。</li>
</ul>
</li>
<li><p>溢流 — <code>overflow</code>[<code>auto</code>、<code>hidden</code>、<code>visible</code>]</p>
</li>
<li><p>背景裁剪 — <code>backgroud-clip</code>[<code>border-box</code>、<code>padding-box</code>、<code>content-box</code>]</p>
</li>
<li><p>轮廓 — <code>outline</code> — 看起来像边框，但是它不是盒模型的一部分。它表现得像边框，但是是画在盒子之上，不会修改盒子的大小（具体来说，ouline 是画在边框之外，外边距区域之内）。</p>
</li>
</ul>
<h4 id="盒子的高级特性"><a href="#盒子的高级特性" class="headerlink" title="盒子的高级特性"></a>盒子的高级特性</h4><ul>
<li><p>设置宽和高的约束</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1280px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">480px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完全改变盒模型</p>
<p><code>box-sizing</code>[<code>border-box</code>、<code>content-box</code>]</p>
<p><img src="https://i.loli.net/2019/04/01/5ca1868e90eff.png" alt=""></p>
</li>
</ul>
<h4 id="盒子显示类型"><a href="#盒子显示类型" class="headerlink" title="盒子显示类型"></a>盒子显示类型</h4><p><code>display</code>[<code>block</code>、<code>inline</code>、<code>inline-block</code>]</p>
<ul>
<li>块是定义为堆放在其他盒上的盒（例如：其内容会独占一行），而且可以设置它的宽高。</li>
<li>行内元素是相反的，它随着文档的文字流动（例如：它将会和周围的文字和其他行内元素出现在同一行，而且它的内容会像一段中的文字一样随着文字部分的流动而打乱），对行内元素设置宽高无效，设置 <code>padding</code>、<code>margin</code> 和 <code>border</code> 都会更新周围文字的位置，但是对于周围的的块不会有影响。</li>
<li>行内块状元素像是上述两种的集合：它不会直接重新另起一行，会像行内框一样随着周围文字而流动，而且他能够设置宽高，并且像块一样保持了其块特性的完整性，它不会在段落行中破碎支离。（对应的，如果没有足够的空间，行内元素会在段落行上断裂，从而失去一个框的形状）。</li>
<li><code>display: table</code> — 允许你像处理 table 布局那样处理非 table 元素，而不是滥用HTML的 <code>&lt;table&gt;</code> 标签。</li>
<li><code>display: flex</code> — 允许你处理一些困扰 CSS 已久的传统布局问题，例如布置一系列弹性等宽容器或者垂直居中内容。</li>
<li><code>display: grid</code> — 给出一种简单实现 CSS 网格系统的方式，而传统上它依赖于一些棘手难以处理的 CSS 网格框架。</li>
</ul>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>默认情况下，元素的背景是指，在元素内容、内边距和边界下层的区域。说说常用的属性：</p>
<ul>
<li><code>background-color</code>：为背景设置一个纯色。</li>
<li><code>background-image</code>：指定在元素的背景中出现的背景图像。可以是静态文件，也可以是生成的渐变色。</li>
<li><code>background-repeat</code>：指定背景是否应该被重复（平铺）。</li>
<li><code>background-position</code>：指定背景应该出现在元素背景中的位置。</li>
<li><code>background-attachment</code>：当内容滚动时，指定元素背景的行为，例如，它是滚动的内容，还是固定的？</li>
<li><code>background</code>：在一行中指定以上五个属性的缩写。</li>
<li><code>background-size</code>：允许动态调整背景图像的大小。</li>
</ul>
<h4 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h4><ul>
<li><p><code>background-color</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* background properties */</span></span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>background-image</code>、<code>background-position</code>、<code>background-repeat</code></p>
<ul>
<li><p><code>background-repeat</code></p>
<ul>
<li><code>no-repeat</code>：图像将不会重复：它只会显示一次。</li>
<li><code>repeat-x</code>：图像将在整个背景中水平地重复。</li>
<li><code>repeat-y</code>：图像会在背景下垂直地重复。</li>
<li><code>repeat</code>：图像将在整个背景中水平和竖直地重复。</li>
</ul>
</li>
<li><p><code>background-position</code></p>
<ul>
<li>像 <code>px</code> 这样的绝对值 — 比如 <code>background-position: 200px 25px</code></li>
<li>像 <code>rem</code> 这样的相对值 — 比如 <code>background-position: 20rem 2.5rem</code></li>
<li>百分比 — 比如 <code>background-position: 90% 25%</code></li>
<li>关键字 — 比如 <code>background-position: right center</code><br>这两个值是直观的，可以分别取值比如 <code>left</code>，<code>center</code>，<code>right</code> 和 <code>top</code>，<code>center</code>，<code>bottom</code>。</li>
</ul>
</li>
<li><p>综合运用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://mdn.mozillademos.org/files/<span class="number">13026</span>/fire-ball-icon.png);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">99%</span> center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h4><p>线性渐变是通过 <code>linear-gradient()</code> 函数传入的，它是一个 <code>background-image</code> 属性的值。函数至少需要用逗号分隔的三个参数——背景中渐变的方向，开始的颜色和结尾的颜色。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, orange, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个渐变将从上到下，从顶部的橙色开始，然后平稳过渡到底部的黄色。可以使用关键字来指定方向 （<code>to bottom</code>，<code>to right</code>， <code>to bottom right</code>等）， 或角度值（<code>0deg</code> 相当于 <code>to top</code>，<code>90deg</code> 相当于 <code>to right</code>，直到 <code>360deg</code>，它再次相当于 <code>to top</code>）。</p>
<p>你也可以在颜色定义的渐变中指定其他的点——这些被称为颜色站点<strong>（color stops）</strong>，浏览器会计算出每一组颜色站点之间的颜色渐变。比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, yellow, orange <span class="number">40%</span>, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h4><p><code>background-attachment</code></p>
<ul>
<li><code>scroll</code>：会使元素的背景在页面滚动时滚动。如果元素内容滚动了，背景并不会滚动，当页面滚动时它才滚动。</li>
<li><code>fixed</code>：会使元素的背景相对于视口固定。因此不管当页面还是元素内容滚动时，它都不会滚动。</li>
<li><code>local</code>：当您滚动元素时，背景会随之滚动。</li>
</ul>
<h4 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, yellow, #dddd00 <span class="number">50%</span>, orange);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">99%</span> center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓ 简写</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow <span class="built_in">linear-gradient</span>(to bottom, yellow, #dddd00 <span class="number">50%</span>, orange) no-repeat <span class="number">99%</span> center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多个背景"><a href="#多个背景" class="headerlink" title="多个背景"></a>多个背景</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(https://mdn.moz.org/files/fire-ball-icon.png) no-repeat <span class="number">99%</span> center,</span><br><span class="line">  <span class="built_in">linear-gradient</span>(to bottom, yellow, #dddd00 <span class="number">50%</span>, orange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">myimage</span><span class="selector-class">.png</span>);</span><br><span class="line"><span class="selector-tag">background-size</span>: 16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I have a red border!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用写法"><a href="#常用写法" class="headerlink" title="常用写法"></a>常用写法</h4><ul>
<li><code>border-top</code>、<code>border-right</code>、<code>border-bottom</code>、<code>border-left</code>：设置边界一侧的宽度，样式和颜色。</li>
<li><code>border-width</code>、<code>border-style</code>、<code>border-color</code>：设置边界宽度、样式或颜色，但是会设置边界的四个边。 </li>
<li>你还可以单独设置其中一侧边界属性：<code>border-top-width</code>、<code>border-top-style</code>、<code>border-top-color</code> 等。</li>
</ul>
<h4 id="边界半径"><a href="#边界半径" class="headerlink" title="边界半径"></a>边界半径</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">border-radius</span>: 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 0;</span><br></pre></td></tr></table></figure>

<p>还可以创建椭圆形角（x 半径与 y 半径不同），两个不同的半径用正斜杠（/）分隔：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border-radius: 10px/20px;</span><br><span class="line">border-radius: 10px 30px/20px 40px;</span><br></pre></td></tr></table></figure>

<p>还可以使用普通写法属性，分别设置框的每个角的边界半径：<code>border-top-left-radius</code>，<code>border-top-right-radius</code>，<code>border-bottom-left-radius</code> 和 <code>border-bottom-right-radius</code>。</p>
<h4 id="边界图像"><a href="#边界图像" class="headerlink" title="边界图像"></a>边界图像</h4><p>想要使用的边框图像如下：</p>
<p><img src="https://mdn.mozillademos.org/files/13060/border-image.png" alt=""></p>
<p>代码这么写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f66</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="comment">/* border-related properties */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">20px</span> solid black;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">  <span class="attribute">border-image-source</span>: <span class="built_in">url</span>(https://mdn.mozillademos.org/files/<span class="number">13060</span>/border-image.png);</span><br><span class="line">  <span class="attribute">border-image-slice</span>: <span class="number">40</span>;</span><br><span class="line">  <span class="attribute">border-image-repeat</span>: round;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>border-image-*</code> 的三行可以简写如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">border-image</span><span class="selector-class">.png</span>) 40 <span class="selector-tag">round</span>;</span><br></pre></td></tr></table></figure>

<h3 id="样式化表格"><a href="#样式化表格" class="headerlink" title="样式化表格"></a>样式化表格</h3><ul>
<li><p>使您的表格标记尽可能简单，并且保持灵活性，例如使用百分比，这样设计就更有响应性。</p>
</li>
<li><p>使用 <code>table-layout:fixed</code> 创建更可预测的表布局，可以通过在标题 <code>width</code> 中设置 <code>width</code> 来轻松设置列的宽度。</p>
</li>
<li><p>使用 <code>border-collapse:collapse</code> 使表元素边框合并，生成一个更整洁、更易于控制的外观。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">35%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code> 和 将表格分割成逻辑块，并提供额外的应用 CSS 的地方。</p>
</li>
<li><p>使用斑马线来让其他行更容易阅读。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff33cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(even)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e495e4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>text-align</code> 直线对齐 <code>th</code> 和 <code>td</code> 文本，使内容更整洁、更易于跟随。</p>
</li>
</ul>
<h3 id="高级盒模型"><a href="#高级盒模型" class="headerlink" title="高级盒模型"></a>高级盒模型</h3><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.simple</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>第一个长度值是水平偏移量（<strong>horizontal offset</strong> ）— 即向右的距离，阴影被从原始的框中偏移(如果值为负的话则为左)。</li>
<li>第二个长度值是垂直偏移量（<strong>vertical offset</strong>）— 即阴影从原始盒子中向下偏移的距离(或向上，如果值为负)。</li>
<li>第三个长度的值是模糊半径（<strong>blur radius</strong>）— 在阴影中应用的模糊度。</li>
<li>颜色值是阴影的基本颜色（<strong>base color</strong>）。</li>
</ol>
<h4 id="多个阴影"><a href="#多个阴影" class="headerlink" title="多个阴影"></a>多个阴影</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.multiple</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> black,</span><br><span class="line">              <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> black,</span><br><span class="line">              <span class="number">3px</span> <span class="number">3px</span> <span class="number">1px</span> red,</span><br><span class="line">              <span class="number">4px</span> <span class="number">4px</span> <span class="number">1px</span> red,</span><br><span class="line">              <span class="number">5px</span> <span class="number">5px</span> <span class="number">1px</span> black,</span><br><span class="line">              <span class="number">6px</span> <span class="number">6px</span> <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="盒子内部阴影"><a href="#盒子内部阴影" class="headerlink" title="盒子内部阴影"></a>盒子内部阴影</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom right, #<span class="number">777</span>, #ddd);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> black,</span><br><span class="line">              inset <span class="number">2px</span> <span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">              inset -<span class="number">2px</span> -<span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom right, #<span class="number">888</span>, #eee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> black,</span><br><span class="line">              inset <span class="number">2px</span> <span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">              inset -<span class="number">2px</span> -<span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h4><p>在 <code>filter</code> 属性中通过 <code>-webkit-</code> 前缀包含了一个版本信息，这被称为一个 Vendor Prefix，有时会被浏览器使用，以在一个新特性完整实现之前，当它与无前缀版本没有冲突的时候支持并实验这个特性。Vendor prefixes 永远都不被指望着被 web 开发人员使用，但是它们有时候确实会被在产品页面中使用，即当实验性的特性确实被需要时。在下面这个实例中，Chrome/Safari/Opera 目前要求这些属性的  <code>-webkit-</code>版本，而 Edge 和 Firefox 则使用后者，无前缀版本。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.filter</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">5px</span> <span class="number">5px</span> <span class="number">1px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>));</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">5px</span> <span class="number">5px</span> <span class="number">1px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Blend-modes"><a href="#Blend-modes" class="headerlink" title="Blend modes"></a>Blend modes</h4><p>不说了，我也没太看懂。想要搞懂可以去<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-blend-mode" target="_blank" rel="noopener">这里</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/mix-blend-mode" target="_blank" rel="noopener">这里</a>。</p>
<h4 id="webkit-background-clip-text"><a href="#webkit-background-clip-text" class="headerlink" title="-webkit-background-clip: text"></a>-webkit-background-clip: text</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS filters examples<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    html &#123;</span><br><span class="line">      font-family: impact, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h2 &#123;</span><br><span class="line">      width: 250px;</span><br><span class="line">      height: 250px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 250px;</span><br><span class="line">      font-size: 75px;</span><br><span class="line">      display: inline-block;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">colorful-heart</span><span class="selector-class">.png</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">center</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.text-clip</span> &#123;</span></span><br><span class="line">      -webkit-background-clip: text;</span><br><span class="line">      -webkit-text-fill-color: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>WOW<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"text-clip"</span>&gt;</span>WOW<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS-排版概述"><a href="#CSS-排版概述" class="headerlink" title="CSS 排版概述"></a>CSS 排版概述</h2><h3 id="介绍-CSS-布局"><a href="#介绍-CSS-布局" class="headerlink" title="介绍 CSS 布局"></a>介绍 CSS 布局</h3><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><p>浮动 — <code>float</code> 属性有四个可能的值：</p>
<ul>
<li><code>left</code> — 将元素浮动到左侧。</li>
<li><code>right</code> — 将元素浮动到右侧。</li>
<li><code>none</code> — 默认值, 不浮动。</li>
<li><code>inherit</code> — 继承父元素的浮动属性。</li>
</ul>
<p>简单演示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定位技术"><a href="#定位技术" class="headerlink" title="定位技术"></a>定位技术</h4><p>有四种主要的定位 <code>pisition</code> 类型需要我们了解：</p>
<ul>
<li><strong>静态定位（Static positioning）</strong>是每个元素默认的属性 — 它表示将元素放在文档布局流的默认位置。</li>
<li><strong>相对定位（Relative positioning）</strong>允许我们相对元素在正常的文档流中的位置移动它。</li>
<li><strong>绝对定位（Absolute positioning）</strong>将元素完全从页面的正常布局流中移出，可以理解为它在另一个图层中。由此可以将元素相对于页面的 <code>&lt;html&gt;</code> 元素边缘固定，或者相对于离元素最近的祖先元素（ancestor element）来定位。</li>
<li><strong>固定定位（Fixed positioning）</strong>与绝对定位非常类似，它是将一个元素相对浏览器视口固定，而不是相对其他元素。</li>
</ul>
<p>简单示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.positioned</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CSS-表格"><a href="#CSS-表格" class="headerlink" title="CSS 表格"></a>CSS 表格</h4><p>一个简单小例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>First of all, tell us your name and age.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fname"</span>&gt;</span>First name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fname"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lname"</span>&gt;</span>Last name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"lname"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"age"</span>&gt;</span>Age:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">label</span>, <span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-caption;</span><br><span class="line">  <span class="attribute">caption-side</span>: bottom;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h4><p>传统的老式布局方法，如 <code>float</code> 和 <code>position</code>，都不够灵活、不够有弹性。如果你想要：</p>
<ul>
<li>垂直中心盒子的内容（不仅仅是文本 — <code>line-height</code> 将会失效）。</li>
<li>制作几列有相同的高度包含不同数量内容的列，不使用固定的高度，或用背景图像伪装。</li>
<li>在一行中创建几个盒子，占用相同数量的可用空间，不管有多少个，并且如果它们有内边距，外边距等就应用它。</li>
</ul>
<p>上面的例子几乎不可能通过常规的 CSS 实现——弹性盒子（<code>flexbox</code>）是为了让这些东西更容易实现而被发明的。</p>
<h3 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h3><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h3 id="弹性盒子-1"><a href="#弹性盒子-1" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3>]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 从入门到还行</title>
    <url>/2018/03/21/HTML-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%98%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="HTML-基石"><a href="#HTML-基石" class="headerlink" title="HTML 基石"></a>HTML 基石</h2><h3 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h3><h4 id="什么是-HTML"><a href="#什么是-HTML" class="headerlink" title="什么是 HTML"></a>什么是 HTML</h4><p>HTML(HyperText Markup Language) 不是一种编程语言，它是一种标记语言，用于告诉您的浏览器如何构造您访问的网页。它可以像Web开发人员希望的那样复杂或简单。</p>
<h4 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h4><ul>
<li><p>构成</p>
<p> <img src="https://i.loli.net/2019/01/13/5c3ac5988dadb.png" alt=""><a id="more"></a></p>
</li>
<li><p>嵌套元素</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My cat is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> grumpy.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>块级元素和内联元素</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>fourth<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>fifth<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>sixth<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>first<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>second<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>third<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>空元素</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p>布尔属性</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有时你会看到没有值的属性，它是合法的。这些属性被称为布尔属性，他们只能有跟它的属性名一样的属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">↓↑</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引号不可省略</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这样的话，title 就是 “The” 了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">https://www.mozilla.org/</span> <span class="attr">title</span>=<span class="string">The</span> <span class="attr">Mozilla</span> <span class="attr">homepage</span>&gt;</span>favorite website<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>单引号还是双引号？</p>
<p> 顺心意。</p>
</li>
</ul>
<h4 id="HTML-简单示例"><a href="#HTML-简单示例" class="headerlink" title="HTML 简单示例"></a>HTML 简单示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;!DOCTYPE html&gt; 声明文档类型。</span></span><br><span class="line"><span class="comment">&lt;html&gt; 元素包裹了整个完整的页面，是一个根元素。</span></span><br><span class="line"><span class="comment">&lt;head&gt; 元素是一个容器，它包含了所有你想包含在 HTML 页面中但不想在 HTML 页面中显示的内容。</span></span><br><span class="line"><span class="comment">&lt;meta charset="utf-8"&gt; 这个元素设置文档使用 utf-8 字符集编码，毫无疑问要使用它，这能避免很多问题。</span></span><br><span class="line"><span class="comment">&lt;title&gt; 设置页面标题，出现在浏览器标签上。</span></span><br><span class="line"><span class="comment">&lt;body&gt; 元素包含了你访问页面时所有显示在页面上的内容，文本，图片，音频，游戏等等。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>In HTML, you define a paragraph using the <span class="tag">&lt;<span class="name">p</span>&gt;</span> element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>In HTML, you define a paragraph using the <span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span> element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>常用转义字符</p>
<table>
<thead>
<tr>
<th>原义字符</th>
<th>等价字符引用</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td>“</td>
<td><code>&amp;quot;</code></td>
</tr>
<tr>
<td>‘</td>
<td><code>&amp;apos;</code></td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm not inside a comment<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;p&gt;I am!&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-中的-head"><a href="#HTML-中的-head" class="headerlink" title="HTML 中的 head"></a>HTML 中的 head</h3><h4 id="head-的作用"><a href="#head-的作用" class="headerlink" title="head 的作用"></a>head 的作用</h4><p>之前就说过：<code>&lt;head&gt;</code> 元素是一个容器，它包含了所有你想包含在 HTML 页面中但不想在 HTML 页面中显示的内容。</p>
<h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><ul>
<li><p>元数据就是 描述数据的数据，在 HTML 中就是指 <code>&lt;meta&gt;</code> 元素，如我们在 <code>&lt;head&gt;</code> 中添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="symbol">&amp;lt;</span>title<span class="symbol">&amp;gt;</span> element<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>许多 <code>&lt;meta&gt;</code> 元素包含了 name 和 content 属性——其中 name 属性指定了 meta 元素的类型；而 content 属性说明该元素包含了什么类型的信息，指定了实际的元数据内容。举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Chris Mills"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"The MDN Learning Area aims to provide</span></span></span><br><span class="line"><span class="tag"><span class="string">complete beginners to the Web with all they need to know to get</span></span></span><br><span class="line"><span class="tag"><span class="string">started with developing web sites and applications."</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这两个 meta 元素看起来意义不大，但是在某些内容管理系统能够自动获取页面信息，然后用于某种目的。譬如 Google、譬如 Facebook。</p>
</li>
<li><p>真实的例子</p>
<ol>
<li><p>在 Google 搜索引擎中 <code>&lt;meta&gt;</code> 元素的使用</p>
<ul>
<li><p>搜索 “MDN Web Docs”，界面是这样子的：</p>
<p> <img src="https://i.loli.net/2019/01/13/5c3b471c68470.png" alt=""></p>
</li>
<li><p>原理，Google 提取了 MDN 的 description：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"The MDN Web Docs site provides information about Open Web technologies including HTML, CSS, and APIs for both Web sites and progressive web apps. It also has some developer-oriented documentation for Mozilla products, such as Firefox Developer Tools."</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS：在谷歌搜索里，在主页面链接下面，你将看到一些相关子页面 — 这些是站点链接，这些其实是在 <a href="http://www.google.com/webmasters/tools/" target="_blank" rel="noopener">Google’s webmaster tools</a> 中配置的，它带来一种可以使你的站点对搜索引擎更友好的方式。</p>
</li>
</ul>
</li>
<li><p>在 Facebook 上花式链接的运用</p>
<ul>
<li><p>在 Facebook 上分享 <a href="https://developer.mozilla.org/zh-CN/docs/learn" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/learn</a> 这个链接是这样子的：</p>
<p> <img src="https://i.loli.net/2019/01/13/5c3b44e999244.png" alt=""></p>
</li>
<li><p>原理——MDN 实现了 Facebook 编写的元数据协议：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"学习 Web 开发"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"https://developer.mozilla.org/zh-CN/docs/learn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"MDN 的这部分内容并不能让您从“新手”变成“专家”，但可以让您对 Web 开发从“一窍不通”到“感觉不错”。这样您就有足够能力自行学习 MDN 的其他部分，也足以学习需要基础知识的中级甚至是进阶资源。"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>这种例子实际上还有很多，比如 Twitter 也拥有自己的类型的专有元数据协议，都大同小异：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:title"</span> <span class="attr">content</span>=<span class="string">"学习 Web 开发"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:url"</span> <span class="attr">content</span>=<span class="string">"https://developer.mozilla.org/zh-CN/docs/learn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:description"</span> <span class="attr">content</span>=<span class="string">"MDN 的这部分内容并不能让您从“新手”变成“专家”，但可以让您对 Web 开发从“一窍不通”到“感觉不错”。这样您就有足够能力自行学习 MDN 的其他部分，也足以学习需要基础知识的中级甚至是进阶资源。"</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h4 id="增加自定义图标"><a href="#增加自定义图标" class="headerlink" title="增加自定义图标"></a>增加自定义图标</h4><ul>
<li><p>添加常规网站图标的两种方式</p>
<ol>
<li><p>将其保存在与网站的索引页相同的目录中，以 .ico 格式保存（大多数浏览器将支持更通用的格式，如 .gif 或 .png，但使用 ICO 格式将确保它能在如 Internet Explorer 6 一样久远的浏览器显示）</p>
</li>
<li><p>将以下行添加到 HTML <code>&lt;head&gt;</code> 中以引用它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>其他</p>
<ol>
<li><p>iPad</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- third-generation iPad with high-resolution Retina display: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"https://developer.cdn.mozilla.net/static/img/favicon144.a6e4162070f4.png"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPhone with high-resolution Retina display: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"https://developer.cdn.mozilla.net/static/img/favicon114.0e9fabd44f85.png"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- first- and second-generation iPad: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"72x72"</span> <span class="attr">href</span>=<span class="string">"https://developer.cdn.mozilla.net/static/img/favicon72.8ff9d87c82a0.png"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"https://developer.cdn.mozilla.net/static/img/favicon57.a2490b9a2d76.png"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- basic favicon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"https://developer.cdn.mozilla.net/static/img/favicon32.e02854fdcf73.png"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>……</p>
</li>
</ol>
</li>
</ul>
<h4 id="应用-CSS-和-JavaScript"><a href="#应用-CSS-和-JavaScript" class="headerlink" title="应用 CSS 和 JavaScript"></a>应用 CSS 和 JavaScript</h4><p>使用 CSS 让网页更加炫酷，使用 JavaScript 让网页有交互功能，这些应用在网页中很常见，它们分别使用 <code>&lt;link&gt;</code> 元素以及 <code>&lt;script&gt;</code> 元素。</p>
<ul>
<li><p>使用 <code>&lt;link&gt;</code> 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"my-css-file.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>&lt;script&gt;</code> 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"my-js-file.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="为文档设定主语言"><a href="#为文档设定主语言" class="headerlink" title="为文档设定主语言"></a>为文档设定主语言</h4><p>如果你的 HTML 文档的语言设置好了，那么你的 HTML 文档就会被搜索引擎更有效地索引（例如，允许它在特定于语言的结果中正确显示），对于那些使用屏幕阅读器的视障人士也很有用（例如，法语和英语中都有 “six” 这个单词，但是发音却完全不同）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Japanese example: <span class="tag">&lt;<span class="name">span</span> <span class="attr">lang</span>=<span class="string">"jp"</span>&gt;</span>ご飯が熱い。<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-文字基础"><a href="#HTML-文字基础" class="headerlink" title="HTML 文字基础"></a>HTML 文字基础</h3><h4 id="最常用的表意元素"><a href="#最常用的表意元素" class="headerlink" title="最常用的表意元素"></a>最常用的表意元素</h4><ul>
<li><code>&lt;h1&gt;</code> 第一级标题，<code>&lt;h2&gt;</code> 第二级标题……<code>&lt;h6&gt;</code> 第六级标题，在可用的六个标题级别中，您应该旨在每页使用不超过三个，否则看起来眼花缭乱。如果可能，建议将内容分散在多个页面上。</li>
<li><code>&lt;p&gt;</code> 段落，<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code> 无序列表，<code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code> 有序列表，<code>&lt;em&gt;</code> 强调，<code>&lt;strong&gt;</code> 非常重要。</li>
</ul>
<p>这些带语义的表意元素其实并没有什么特殊的，但是很多浏览器在实现的时候就给了它们一个默认的样式，譬如 <code>&lt;em&gt;</code> 通常是斜体，<code>&lt;strong&gt;</code> 通常是粗体，<code>&lt;h1&gt;</code> 总是很大，然而这些都不重要，换言之，我们不应该依赖它们，我们更应该自己写好看的 CSS 文件定义样式。还有最重要的——我们决不能贪图浏览器给这些表意元素的默认样式实现，以至于干出“用 <code>&lt;strong&gt;</code> 来给文字加粗”、“用 <code>&lt;em&gt;</code> 给文字倾斜效果”这种事，因为表意元素是有语义的。如果你只想要加粗、斜体……这些特效，HTML 提供了一些其他的无语义的元素，它们被称为<strong>表象元素</strong>，不过，它们也不应该用来定义样式。</p>
<h4 id="最常用的表象元素"><a href="#最常用的表象元素" class="headerlink" title="最常用的表象元素"></a>最常用的表象元素</h4><ul>
<li><code>&lt;i&gt;</code> <em>斜体</em></li>
<li><code>&lt;b&gt;</code> <strong>粗体</strong></li>
<li><code>&lt;u&gt;</code> <u>下划线</u></li>
</ul>
<p>事实上，我们不仅不应该依赖带语义标签的样式，甚至也不能依赖表象元素提供的样式，因为，它们的样式都是由各个浏览器厂商实现的，不统一且不够个性化。如果我们真的想定义样式，我们应该使用 CSS。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><a href="https://www.w3.org/TR/html52/index.html" target="_blank" rel="noopener">在 HTML5 中，<code>&lt;i&gt;</code>、<code>&lt;b&gt;</code> 之流也被赋予了语义</a>： <code>&lt;i&gt;</code> 元素代表在普通文本中具有不同语态或语气的一段文本，某种程度上表明一段不同特性的文本，比如一个分类学名称，一个技术术语，一个外语习语，一个音译，一个想法，或者西方文本中的一艘船名……；<code>&lt;b&gt;</code> 元素代表侧重实用目的而不带有任何额外重要性也不暗示不同语态或语气的一段文本，比如一段文本摘要中的关键词、一段审查中的产品名称、文本驱动软件中的可执行语句或者一篇文章的导语……</p>
<p>不过这些不是那么重要了，反正你还是要自己写 CSS。</p>
<p>再说说 <code>&lt;u&gt;</code> 吧，下划线在 Web 中总是凸显着一种“可点击”的气质，所以这玩意乱用会被骂的，在 HTML5 规范中描述“尽量不要用 <code>&lt;u&gt;</code>，总有更好的选择”。如果一定要用下划线，那最好用 CSS 给 <code>&lt;u&gt;</code> 定义一个“一看就不是普通超链接”的下划线样式。</p>
<h3 id="建立超链接"><a href="#建立超链接" class="headerlink" title="建立超链接"></a>建立超链接</h3><h4 id="使用-title-属性添加支持信息（鼠标悬停出现）"><a href="#使用-title-属性添加支持信息（鼠标悬停出现）" class="headerlink" title="使用 title 属性添加支持信息（鼠标悬停出现）"></a>使用 title 属性添加支持信息（鼠标悬停出现）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm creating a link to</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mozilla.org/en-US/"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">title</span>=<span class="string">"The best place to find more information about Mozilla's</span></span></span><br><span class="line"><span class="tag"><span class="string">            mission and how to contribute"</span>&gt;</span>the Mozilla homepage<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="块级链接"><a href="#块级链接" class="headerlink" title="块级链接"></a>块级链接</h4><p>你可以将一些内容转换为链接，甚至是块级元素。如果你想要将一个图像转换为链接，你只需把图像放到 <code>&lt;a&gt;&lt;/a&gt;</code> 标签中间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mozilla.org/en-US/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mozilla-image.png"</span> <span class="attr">alt</span>=<span class="string">"mozilla logo that links to the mozilla homepage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="指向本机的地址（相对链接）"><a href="#指向本机的地址（相对链接）" class="headerlink" title="指向本机的地址（相对链接）"></a>指向本机的地址（相对链接）</h4><p>这个就跟使用 Linux 差不多，本目录下直接写“文件名”，子目录下直接写“子目录/文件名”，上一级目录就写“../文件名”，父目录是兄弟目录就写“../兄弟目录/文件名 ”</p>
<h4 id="文档片段"><a href="#文档片段" class="headerlink" title="文档片段"></a>文档片段</h4><p>超链接可以链接到 html 文档的特定部分（被称为<strong>文档片段</strong>），而不仅仅是文件的顶部。要做到这一点你必须首先分配一个<strong><code>id</code>属性</strong>的元素到链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"Mailing_address"</span>&gt;</span>Mailing address<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他页面来引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Want to write us a letter? Use our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"contacts.html#Mailing_address"</span>&gt;</span>mailing address<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 同页面引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#Mailing_address"</span>&gt;</span>company mailing address<span class="tag">&lt;/<span class="name">a</span>&gt;</span> can be found at the bottom of this page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="电子邮件链接"><a href="#电子邮件链接" class="headerlink" title="电子邮件链接"></a>电子邮件链接</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:nowhere@mozilla.org"</span>&gt;</span>Send email to nowhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:"</span>&gt;</span>Send email to nowhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">         subject=The%20subject%20of%20the%20email <span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">         body=The%20body%20of%20the%20email"</span>&gt;</span></span><br><span class="line">  Send mail</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="链接的最佳实践"><a href="#链接的最佳实践" class="headerlink" title="链接的最佳实践"></a>链接的最佳实践</h4><ol>
<li><p>用清晰的链接措辞</p>
</li>
<li><p>尽可能使用相对链接（不然会浪费网络等硬件资源，速度慢）</p>
</li>
<li><p>链接到非 HTML 资源，要留下清晰的指示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.example.com/large-report.pdf"</span>&gt;</span></span><br><span class="line">  Download the sales report (PDF, 10MB)</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.example.com/video-stream/"</span>&gt;</span></span><br><span class="line">  Watch the video (stream opens in separate tab, HD quality)</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.example.com/car-game"</span>&gt;</span></span><br><span class="line">  Play the car game (requires Flash)</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在下载链接时使用下载属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=en-US"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">download</span>=<span class="string">"firefox-latest-64bit-installer.exe"</span>&gt;</span></span><br><span class="line">  Download Latest Firefox for Windows (64-bit) (English, US)</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="高级文字格式"><a href="#高级文字格式" class="headerlink" title="高级文字格式"></a>高级文字格式</h3><p>我们在前面的章节 <strong>HTML 文字基础</strong>中学了一些最最基础的元素，接下来说一些不那么常见但是很有用的元素。</p>
<h4 id="描述列表"><a href="#描述列表" class="headerlink" title="描述列表"></a>描述列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 请注意：一个术语&lt;dt&gt;可以同时有多个描述&lt;dd&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>soliloquy<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>In drama, where a character speaks to themselves, representing their inner thoughts or</span><br><span class="line">    feelings and in the process relaying them to the audience (but not to other characters.)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>monologue<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>In drama, where a character speaks their thoughts out loud to share them with the audience and</span><br><span class="line">    any other characters present.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>aside<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>In drama, where a character shares a comment only with the audience for humorous or dramatic</span><br><span class="line">    effect. This is usually a feeling, thought or piece of additional background information.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>In drama, where a character shares a comment only with the audience for humorous or dramatic</span><br><span class="line">    effect. This is usually a feeling, thought or piece of additional background information.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul>
<li><p>块引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    The <span class="tag">&lt;<span class="name">strong</span>&gt;</span>HTML <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>blockquote<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> Element<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> (or <span class="tag">&lt;<span class="name">em</span>&gt;</span>HTML Block </span><br><span class="line">    Quotation Element<span class="tag">&lt;/<span class="name">em</span>&gt;</span>) indicates that the enclosed text is an extended quotation.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>行内引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  The quote element — <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>q<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> — is</span><br><span class="line">  <span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q"</span>&gt;</span></span><br><span class="line">    intended for short quotations that don't require paragraph breaks.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引文</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>According to the</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cite</span>&gt;</span>MDN blockquote page<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span>:</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    The <span class="tag">&lt;<span class="name">strong</span>&gt;</span>HTML <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>blockquote<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> Element<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    (or <span class="tag">&lt;<span class="name">em</span>&gt;</span>HTML Block Quotation Element<span class="tag">&lt;/<span class="name">em</span>&gt;</span>) indicates that the enclosed </span><br><span class="line">    text is an extended quotation.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The quote element — <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>q<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> — is</span><br><span class="line">  <span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q"</span>&gt;</span></span><br><span class="line">    intended for short quotations that don't require paragraph breaks.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line">  --</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cite</span>&gt;</span>MDN q page<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">总结：blockquote 元素要 cite 属性（默认样式是缩进），</span></span><br><span class="line"><span class="comment">     q 元素要 cite 属性(默认的样式是加双引号)，</span></span><br><span class="line"><span class="comment">     cite 元素自带斜体效果。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h4><ul>
<li><p>abbr</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>We use <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"Hypertext Markup Language"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> to structure our web documents.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I think <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"Reverend"</span>&gt;</span>Rev.<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> Green did it in the kitchen with the chainsaw.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><del>acronym(专用于首字母缩略词而不是缩略语)</del></p>
</li>
</ul>
<h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><ul>
<li><p><code>&lt;address&gt;</code> 元素是为了标记编写HTML文档的人的联系方式，而不是任何其他的内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Page written by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../authors/chris-mills/"</span>&gt;</span>Chris Mills<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h4><ul>
<li><p><code>sup</code> 和 <code>sub</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My birthday is on the 25<span class="tag">&lt;<span class="name">sup</span>&gt;</span>th<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> of May 2001.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Caffeine's chemical formula is C<span class="tag">&lt;<span class="name">sub</span>&gt;</span>8<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>10<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>N<span class="tag">&lt;<span class="name">sub</span>&gt;</span>4<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="展示计算机代码"><a href="#展示计算机代码" class="headerlink" title="展示计算机代码"></a>展示计算机代码</h4><ul>
<li><code>&lt;code&gt;</code>：用于标记计算机通用代码。</li>
<li><code>&lt;pre&gt;</code>：对保留的空格（通常是代码块）——如果您在文本中使用缩进或多余的空白，浏览器将忽略它，您将不会在呈现的页面上看到它。但是，如果您将文本包含在 <code>&lt;pre&gt;&lt;/pre&gt;</code> 标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。</li>
<li><code>&lt;var&gt;</code>：用于标记具体变量名。</li>
<li><code>&lt;kbd&gt;</code>：用于标记输入电脑的键盘（或其他类型）输入。</li>
<li><code>&lt;samp&gt;</code>：用于标记计算机程序的输出。</li>
</ul>
<h4 id="标记时间和日期"><a href="#标记时间和日期" class="headerlink" title="标记时间和日期"></a>标记时间和日期</h4><ul>
<li><p>可能的日期表现方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">20 January 2016</span><br><span class="line">20th January 2016</span><br><span class="line">Jan 20 2016</span><br><span class="line">20/06/16</span><br><span class="line">06/20/16</span><br><span class="line">The 20th of next month</span><br><span class="line">20e Janvier 2016</span><br><span class="line">2016年1月20日</span><br><span class="line">And so on</span><br></pre></td></tr></table></figure>
</li>
<li><p>可被机器识别的日期格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Standard simple date --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2016-01-20"</span>&gt;</span>20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Just year and month --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2016-01"</span>&gt;</span>January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Just month and day --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"01-20"</span>&gt;</span>20 January<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Just time, hours and minutes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"19:30"</span>&gt;</span>19:30<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- You can do seconds and milliseconds too! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"19:30:01.856"</span>&gt;</span>19:30:01.856<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Date and time --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2016-01-20T19:30"</span>&gt;</span>7.30pm, 20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Date and time with timezone offset--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2016-01-20T19:30+01:00"</span>&gt;</span>7.30pm, 20 January 2016 is 8.30pm in France<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Calling out a specific week number--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2016-W04"</span>&gt;</span>The fourth week of 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="文档与网站架构"><a href="#文档与网站架构" class="headerlink" title="文档与网站架构"></a>文档与网站架构</h3><h4 id="结构化-HTML"><a href="#结构化-HTML" class="headerlink" title="结构化 HTML"></a>结构化 HTML</h4><ul>
<li>标题：<code>&lt;header&gt;</code></li>
<li>导航栏：<code>&lt;nav&gt;</code></li>
<li>主要内容：<code>&lt;main&gt;</code> 具有代表性的内容段落主题可以使用 <code>&lt;section&gt;</code>、<code>&lt;article&gt;</code> 和 <code>&lt;div&gt;</code> 元素</li>
<li>侧栏：<code>&lt;aside&gt;</code>；经常嵌套在 <code>&lt;main&gt;</code> 中</li>
<li>页脚：<code>&lt;footer&gt;</code></li>
</ul>
<h4 id="没有语义的装饰元素"><a href="#没有语义的装饰元素" class="headerlink" title="没有语义的装饰元素"></a>没有语义的装饰元素</h4><ul>
<li><code>&lt;div&gt;</code></li>
<li><code>&lt;span&gt;</code></li>
</ul>
<h4 id="换行与水平分割线"><a href="#换行与水平分割线" class="headerlink" title="换行与水平分割线"></a>换行与水平分割线</h4><ul>
<li><code>&lt;br&gt;</code></li>
<li><code>&lt;hr&gt;</code></li>
</ul>
<h4 id="详细标准"><a href="#详细标准" class="headerlink" title="详细标准"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Sections_and_Outlines_of_an_HTML5_document" target="_blank" rel="noopener">详细标准</a></h4><h3 id="HTML-除错"><a href="#HTML-除错" class="headerlink" title="HTML 除错"></a>HTML 除错</h3><p>HTML 可以自由的运行，是因为在 Web 创建之初，它的宗旨就是：允许人们获取他们发布的内容比确保所有语法完全正确更重要。如果当初 Web 在一开始就更加严格的话，也许 Web 就不会像今天这样流行了。</p>
<p>也就是说 HTML 的错误相对来说其实并不好检查，MDN 的推荐是这个网站 <a href="https://validator.w3.org/" target="_blank" rel="noopener">Markup Validation Service</a>，我们平时可以在编辑器中使用一些插件来排查错误。</p>
<h2 id="多媒体与嵌入"><a href="#多媒体与嵌入" class="headerlink" title="多媒体与嵌入"></a>多媒体与嵌入</h2><h3 id="HTML-中的图片"><a href="#HTML-中的图片" class="headerlink" title="HTML 中的图片"></a>HTML 中的图片</h3><h4 id="图片的标准写法"><a href="#图片的标准写法" class="headerlink" title="图片的标准写法"></a>图片的标准写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dinosaur.jpg"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">"The head and torso of a dinosaur skeleton;</span></span></span><br><span class="line"><span class="tag"><span class="string">              it has a large head with long sharp teeth"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">height</span>=<span class="string">"341"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">title</span>=<span class="string">"A T-Rex on display in the Manchester University Museum"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-img-gt-的属性"><a href="#lt-img-gt-的属性" class="headerlink" title="&lt;img&gt; 的属性"></a><code>&lt;img&gt;</code> 的属性</h4><ul>
<li><code>alt</code> — 如果图片没加载出来，留底的文字；</li>
<li><code>width</code> — 图片的宽度；</li>
<li><code>height</code> — 图片的高度；</li>
<li><code>title</code> — 鼠标悬停在图片上面时，弹出的提示文字（<code>title</code> 有很多易访问性问题，用到它的时候较少）。</li>
</ul>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>如果你需要改变图片的尺寸，你应该使用 CSS 而不是 HTML。</p>
<h4 id="使用-lt-figure-gt-元素"><a href="#使用-lt-figure-gt-元素" class="headerlink" title="使用 &lt;figure&gt; 元素"></a>使用 <code>&lt;figure&gt;</code> 元素</h4><p>经常的，我们需要给图片配上一段说明文字，大概一些人喜欢用 <code>&lt;p&gt;</code> 元素直接给 <code>&lt;img&gt;</code> 元素配文，然而从语义上来说，不能说明 <code>&lt;p&gt;</code>  和 <code>&lt;img&gt;</code> 元素之间的关系，这或许会给视障用户们造成很多阻碍。这种情况下我们可以使用 HTML5 带给我们的 <code>&lt;figure&gt;</code> 和 <code>&lt;figcaption&gt;</code> 元素。</p>
<p> <code>&lt;figure&gt;</code> 的寓意是用紧凑、易于掌握的方式表达你的意图，而其中的  <code>&lt;figcaption&gt;</code> 元素时为主要内容提供重要的补充说明 — 这也就意味着，这两个元素不是 <code>&lt;img&gt;</code> 元素的私人保姆，你可以用它们“照顾”一段代码、音视频、方程、表格等等等。</p>
<p>写一个代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/dinosaur.jpg"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">alt</span>=<span class="string">"The head and torso of a dinosaur skeleton;</span></span></span><br><span class="line"><span class="tag"><span class="string">            it has a large head with long sharp teeth"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">width</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">height</span>=<span class="string">"341"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>A T-Rex on display in the Manchester University Museum.<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS-背景图片"><a href="#CSS-背景图片" class="headerlink" title="CSS 背景图片"></a>CSS 背景图片</h4><p>你也可以使用 CSS 把图片嵌入网站中（JavaScript也行，不过那是另外一个故事了），这个 CSS 属性 <code>background-image</code> 和另其他 <code>background-*</code> 属性是用来放置背景图片的。比如，为页面中的所有段落设置一个背景图片，你可以这样做：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"images/dinosaur.jpg"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS 背景图片可以更好地控制图片和设置图片的位置，但是这样插入的图片完全没有语义上的意义，它们不能有任何备选文本，也不能被屏幕阅读器识别。总而言之，如果图像对您的内容里有意义，则应使用HTML图像。 如果图像纯粹是装饰，则应使用CSS背景图片。</p>
<h3 id="视频和音频内容"><a href="#视频和音频内容" class="headerlink" title="视频和音频内容"></a>视频和音频内容</h3><h4 id="lt-video-gt-元素"><a href="#lt-video-gt-元素" class="headerlink" title="&lt;video&gt; 元素"></a><code>&lt;video&gt;</code> 元素</h4><ul>
<li><p>一个简单的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"rabbit320.webm"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Your browser doesn't support HTML5 video.</span><br><span class="line">    Here is a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"rabbit320.webm"</span>&gt;</span>link to the video<span class="tag">&lt;/<span class="name">a</span>&gt;</span> instead.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性解读</p>
<ol>
<li><code>src</code> — 文件的位置；</li>
<li><code>controls</code> — 用户必须能够控制视频和音频的回放功能，且这些媒体应该包括开始和停止，以及调整音量的功能；</li>
<li><code>p</code> — 当浏览器不支持 <code>&lt;video&gt;</code> 元素的时候，它将会显示出来。</li>
</ol>
</li>
<li><p>多格式支持</p>
<p>视频和音频都有不同的格式，如下：</p>
<ul>
<li>WebM 容器通常包括了 Ogg Vorbis 音频和 VP8/VP9 视频。主要在 FireFox 和 Chrome 当中支持。</li>
<li>MP4 容器通常包括 AAC 以及 MP3 音频和 H.264 视频。主要在 Internet Explorer 和 Safari 当中支持。</li>
<li>老式的 Ogg 容器往往支持 Ogg Vorbis  音频和 Ogg Theora 视频。主要在 Firefox 和 Chrome 当中支持，不过这个容器已经被更强大的 WebM 容器所取代。</li>
</ul>
<p>浏览器并不全支持相同的 codecs（解码音视频用的），所以你得使用几个不同格式的文件来兼容不同的浏览器。如果你使用的格式都得不到浏览器的支持，那么媒体文件将不会播放。</p>
<p>解决办法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"rabbit320.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"rabbit320.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Your browser doesn't support HTML5 video. Here is a </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"rabbit320.mp4"</span>&gt;</span>link to the video<span class="tag">&lt;/<span class="name">a</span>&gt;</span> instead.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子当中，浏览器将会检查 <code>&lt;source&gt;</code> 标签，并且播放第一个与其自身 codec 相匹配的媒体。你的视频应当包括 WebM 和 MP4 两种格式，这两种在目前已经足够支持大多数平台和浏览器。每个 <code>&lt;source&gt;</code> 标签页含有一个 <code>type</code>属性，这个属性是可选的，但是建议你添加上这个属性 — 它包含了视频文件的 MIME types ，同时浏览器也会通过检查这个属性来迅速的跳过那些不支持的格式。如果你没有添加 type 属性，浏览器会尝试加载每一个文件，直到找到一个能正确播放的格式，这样会消耗掉大量的时间和资源。</p>
</li>
<li><p>其他属性解读</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span></span></span><br><span class="line"><span class="tag">       <span class="attr">poster</span>=<span class="string">"poster.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"rabbit320.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"rabbit320.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Your browser doesn't support HTML5 video. Here is a </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"rabbit320.mp4"</span>&gt;</span>link to the video<span class="tag">&lt;/<span class="name">a</span>&gt;</span> instead.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>width</code>、<code>height</code> — 你可以用属性控制视频的尺寸，也可以用 CSS 来控制视频尺寸。无论使用哪种方式，视频都会保持它原始的长宽比 — 也叫做纵横比。如果你设置的尺寸没有保持视频原始长宽比，那么视频边框将会拉伸，而未被视频内容填充的部分，将会显示默认的背景颜色；</li>
<li><code>autoplay</code> — 是否自动播放；</li>
<li><code>loop</code> — 是否循环；</li>
<li><code>muted</code> — 静音；</li>
<li><code>poster</code> — 封面；</li>
<li><code>preload</code> — 缓冲，有三个值：<code>none</code>（不缓冲）、<code>auto</code>（页面加载后缓冲）、<code>metadata</code>（仅缓冲文件的元数据）。</li>
</ul>
</li>
</ul>
<h4 id="lt-audio-gt-元素"><a href="#lt-audio-gt-元素" class="headerlink" title="&lt;audio&gt; 元素"></a><code>&lt;audio&gt;</code> 元素</h4><ul>
<li><p>一个简单的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"viper.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"viper.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Your browser doesn't support HTML5 audio. </span><br><span class="line">    Here is a <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"viper.mp3"</span>&gt;</span>link to the audio<span class="tag">&lt;/<span class="name">a</span>&gt;</span> instead.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;audio&gt;</code> 标签与 <code>&lt;video&gt;</code> 标签的使用方式几乎完全相同，区别在于它没有视觉部件，因此它不支持 <code>width/height</code> 属性，也不支持 <code>poster</code> 属性。</p>
</li>
</ul>
<h4 id="显示字幕"><a href="#显示字幕" class="headerlink" title="显示字幕"></a>显示字幕</h4><p>WebVTT 是一个格式，用来编写文本文件，这个文本文件包含了众多的字符串，这些字符串会带有一些元数据，它们可以用来描述这个字符串将会在视频中显示的时间，甚至可以用来描述这些字符串的样式以及定位信息。这些字符串叫做 <strong>cues</strong> ，你可以根据不同的需求来显示不同的样式最常见的如下：</p>
<ul>
<li><p>subtitle</p>
<p>通过添加翻译字幕，来帮助那些听不懂外国语言的人们理解音频当中的内容。</p>
</li>
<li><p>captions</p>
<p>同步翻译对白，或是描述一些有重要信息的声音，来帮助那些不能听音频的人们理解音频中的内容。</p>
</li>
<li><p>timed descriptions</p>
<p>将文字转换为音频，用于服务那些有视觉障碍的人。</p>
</li>
</ul>
<p>让其与 HTML 媒体一起显示，你需要做如下工作：</p>
<ol>
<li><p>以 .vtt 后缀名保存文件。</p>
</li>
<li><p>用 <code>&lt;track&gt;</code> 标签链接 .vtt 文件， <code>&lt;track&gt;</code> 标签需放在 <code>&lt;audio&gt;</code> 或 <code>&lt;video&gt; 标签当中</code>，同时需要放在所有 <code>&lt;source&gt;</code> 标签之后。使用 <code>kind</code> 属性来指明是哪一种类型，如 subtitles 、 captions 、 descriptions。然后，使用 <code>srclang</code> 来告诉浏览器你是用什么语言来编写的 subtitles。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"example.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"example.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">"subtitles"</span> <span class="attr">src</span>=<span class="string">"subtitles_en.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Apps/Fundamentals/Audio_and_video_delivery/Adding_captions_and_subtitles_to_HTML5_video" target="_blank" rel="noopener">更多细节</a></p>
</li>
</ol>
<h3 id="其他嵌入技术"><a href="#其他嵌入技术" class="headerlink" title="其他嵌入技术"></a>其他嵌入技术</h3><h4 id="lt-iframe-gt-元素"><a href="#lt-iframe-gt-元素" class="headerlink" title="&lt;iframe&gt; 元素"></a><code>&lt;iframe&gt;</code> 元素</h4><p>这个元素就是一个网页嵌入另一个网页的内容时使用的</p>
<ul>
<li><p>一个 YouTube 的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"315"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/xQxThJHJclU"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allow</span>=<span class="string">"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性</p>
<ul>
<li><p><code>allowfullscreen</code></p>
<p>如果设置，<code>&lt;iframe&gt;</code> 则可以通过全屏 API 设置为全屏模式；</p>
</li>
<li><p><code>frameborder</code></p>
<p>如果设置为“1”，则会告诉浏览器在此框架和其他框架之间绘制边框，这是默认行为。设置为“0”是删除边框，不推荐这样设置，因为在 CSS 中可以更好地实现相同的效果 — <code>border: none;</code>；</p>
</li>
<li><p><code>src</code></p>
<p>该属性指向要嵌入本文档资源的 URL 路径；</p>
</li>
<li><p><code>width</code> 和 <code>height</code></p>
<p>这些属性指定您想要的 iframe 的宽度和高度；</p>
</li>
<li><p>备选内容</p>
<p>与 <code>video</code> 等其他类似元素相同，您可以在 <code>&lt;iframe&gt;&lt;/iframe&gt;</code> 标签之间包含备选内容，如果浏览器不支持 <code>&lt;iframe&gt;</code>，将会显示备选内容。当然现在您几乎不可能遇到任何不支持 <code>&lt;iframe&gt;</code> 的浏览器；</p>
</li>
<li><p><code>sandbox</code></p>
<p>我们应该<strong>只</strong>给嵌入式内容<strong>所需的权限</strong> — 允许包含在其里的代码以适当的方式执行或者用于测试，但不能对其他代码库（意外或恶意）造成任何损害。默认情况下，您应该使用没有参数的 <code>sandbox</code> 属性来强制执行所有可用的限制。如果绝对需要，您可以逐个添加权限（<code>sandbox=&quot;xxx&quot;</code>）— 其中重要的一点是，你<em>永远不</em>应该同时添加 <code>allow-scripts</code> 和 <code>allow-same-origin</code> 到你的 <code>sandbox</code> 属性中，因为这样嵌入式内容可以绕过阻止站点执行脚本的同源安全策略，并使用 JavaScript 完全关闭沙盒。</p>
</li>
</ul>
<h4 id="配置-CSP-指令"><a href="#配置-CSP-指令" class="headerlink" title="配置 CSP 指令"></a>配置 CSP 指令</h4><ul>
<li><p><code>X-Frame-Options</code> </p>
<p>HTTP 响应头是用来给浏览器指示允许一个页面可否在 <code>&lt;frame&gt;</code>，<code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别的网站中，从而避免了点击劫持 （clickjacking）的攻击。</p>
<p><code>X-Frame-Options</code> 有三个值：</p>
<ul>
<li><p><code>DENY</code></p>
<p>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</p>
</li>
<li><p><code>SAMEORIGIN</code></p>
<p>表示该页面可以在相同域名页面的 frame 中展示。</p>
</li>
<li><p><code>ALLOW-FROM uri</code></p>
<p>表示该页面可以在指定来源的 frame 中展示。</p>
</li>
</ul>
</li>
<li><p>想要配置 CSP 就要在对应的服务器中进行配置</p>
<ul>
<li><p>配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 ‘site’ 的配置中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Header always append X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 nginx 发送 <code>X-Frame-Options</code> 响应头，把下面这行添加到 ‘http’, ‘server’ 或者 ‘location’ 的配置中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br></pre></td></tr></table></figure>
</li>
<li><p>…</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="lt-embed-gt-和-lt-object-gt"><a href="#lt-embed-gt-和-lt-object-gt" class="headerlink" title="&lt;embed&gt; 和 &lt;object&gt;"></a><code>&lt;embed&gt;</code> 和 <code>&lt;object&gt;</code></h4><p><code>&lt;embed&gt;</code>和 <code>&lt;object&gt;</code> 元素的功能不同于<code>&lt;iframe&gt;</code> — 这些元素是用来嵌入多种类型的外部内容的通用嵌入工具，其中包括像 Java 小程序和 Flash，PDF（可在浏览器中显示为一个 PDF 插件）这样的插件技术（插件是一种对浏览器原生无法读取的内容提供访问权限的软件），甚至像视频，SVG 和图像的内容。</p>
<p>然而，这些都是过去式了，HTML5 原生的功能就很强大，<code>&lt;embed&gt;</code>和 <code>&lt;object&gt;</code> 元素再见吧，请再也不要使用。</p>
<h3 id="在网页中添加矢量图片"><a href="#在网页中添加矢量图片" class="headerlink" title="在网页中添加矢量图片"></a>在网页中添加矢量图片</h3><h4 id="什么是矢量图"><a href="#什么是矢量图" class="headerlink" title="什么是矢量图"></a>什么是矢量图</h4><p>在网上，你会和两种类型的图片打交道 — 位图和矢量图：位图使用像素网格来定义，矢量图使用算法来定义。</p>
<h4 id="什么是-SVG"><a href="#什么是-SVG" class="headerlink" title="什么是 SVG"></a>什么是 SVG</h4><p>SVG 是用于描述矢量图像的 XML 语言。</p>
<h4 id="SVG-的优点"><a href="#SVG-的优点" class="headerlink" title="SVG 的优点"></a>SVG 的优点</h4><ul>
<li>矢量图像中的文本仍然可访问（这也有利于 SEO）。</li>
<li>SVG 可以很好地适应样式/脚本，因为图像的每个组件都是可以通过 CSS 或 JavaScript 编写样式的元素。</li>
</ul>
<h4 id="SVG-的缺点"><a href="#SVG-的缺点" class="headerlink" title="SVG 的缺点"></a>SVG 的缺点</h4><ul>
<li>SVG 非常容易变得复杂，这意味着文件大小会增加；复杂的 SVG 也会在浏览器中占用很长的处理时间。</li>
<li>SVG 可能比栅格图像更难创建，具体取决于您尝试创建哪种图像。</li>
<li>旧版浏览器不支持SVG，因此如果您需要在网站上支持旧版本的 IE，则可能不适合（SVG 从 IE9 开始得到支持）。</li>
</ul>
<h4 id="将-SVG-添加到页面"><a href="#将-SVG-添加到页面" class="headerlink" title="将 SVG 添加到页面"></a>将 SVG 添加到页面</h4><ol>
<li><p>快捷方式：<code>&lt;img&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"equilateral.svg"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">"triangle with all three sides equal"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">height</span>=<span class="string">"87px"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">"100px"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>优点</p>
<ul>
<li>快速，熟悉的图像语法与 <code>alt</code> 属性中提供的内置文本等效。</li>
<li>可以通过在 <code>&lt;a&gt;</code> 元素嵌套 <code>&lt;img&gt;</code>，使图像轻松地成为超链接。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>无法使用 JavaScript 操作图像。</li>
<li>如果要使用 CSS 控制 SVG 内容，则必须在 SVG 代码中包含内联 CSS 样式（从 SVG 文件调用的外部样式表不起作用）。</li>
<li>不能用 CSS 伪类来重设图像样式（如<code>:focus</code>）。</li>
</ul>
</li>
<li><p>处理 HTML 引入 SVG 时的兼容问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"equilateral.png"</span> <span class="attr">alt</span>=<span class="string">"triangle with equal sides"</span> <span class="attr">srcset</span>=<span class="string">"equilateral.svg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这种情况下，仅支持 SVG 的浏览器会加载 SVG，较旧的浏览器将加载 PNG。</p>
</li>
<li><p>处理 CSS 引入 SVG 背景图片时的兼容问题</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">fallback</span><span class="selector-class">.png</span>") <span class="selector-tag">no-repeat</span> <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>("<span class="selector-tag">image</span><span class="selector-class">.svg</span>");</span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">contain</span>;</span><br></pre></td></tr></table></figure>

<p>像上面描述的 <code>&lt;img&gt;</code> 方法一样，使用 CSS 背景图像插入 SVG 意味着它不能被 JavaScript 操作，并且也受到相同的 CSS 限制。</p>
</li>
</ul>
</li>
<li><p>直接在 HTML 中引入 SVG 代码</p>
<ul>
<li><p>一个极其简单的示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"green"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优点</p>
<ul>
<li>将 SVG 内联减少 HTTP 请求，可以减少加载时间。</li>
<li>您可以为 SVG 元素分配 <code>class</code> 和 <code>id</code>，并使用 HTML 文档中的 CSS 样式规则，内联 SVG 是唯一可以让您在 SVG 图像上使用 CSS 交互（如<code>:focus</code>）和 CSS 动画的方法。实际上，您可以使用任何 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute#Presentation_attributes" target="_blank" rel="noopener">SVG外观属性</a> 作为 CSS 属性。</li>
<li>您可以通过将 SVG 标记包在 <code>&lt;a&gt;</code> 元素中，使其成为超链接。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>这种方法只适用于在一个地方使用的 SVG，多次使用会导致资源密集型维护。</li>
<li>额外的 SVG 代码会增加 HTML 文件的大小。</li>
<li>浏览器不能像缓存普通图片一样缓存内联 SVG。</li>
<li>您可能会在 <code>&lt;foreignObject&gt;</code> 元素中包含回退，但支持 SVG 的浏览器仍然会下载任何后备图像。你需要考虑仅仅为支持过时的浏览器，而增加额外开销是否真的值得。</li>
</ul>
</li>
</ul>
</li>
<li><p>使用 <code>&lt;iframe&gt;</code> 嵌入 SVG</p>
<ul>
<li><p>快速回顾</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"triangle.svg"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"triangle.png"</span> <span class="attr">alt</span>=<span class="string">"Triangle with three unequal sides"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>缺点</p>
<ul>
<li>如你所知，<code>iframe</code> 有一个回退机制，如果浏览器不支持 <code>iframe</code>，则只会显示回退。</li>
<li>此外，除非 SVG 和您当前的网页具有相同的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E6%BA%90" target="_blank" rel="noopener">origin</a>（只有当协议，域名和端口都匹配时，才认为两个对象具有相同的源），否则你不能在主页面上使用 JavaScript 来操纵 SVG。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><h4 id="强制采用真实视图"><a href="#强制采用真实视图" class="headerlink" title="强制采用真实视图"></a>强制采用真实视图</h4><p>有些手机浏览器会提供不真实的视图宽度，然后加载比浏览器真实视图的宽度大的宽度的网页，然后再缩小加载的页面，这样的做法对响应式图片或其他设计，没有任何帮助。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">→ <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Responsive HTML images demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="分辨率切换"><a href="#分辨率切换" class="headerlink" title="分辨率切换"></a>分辨率切换</h4><ol>
<li><p>不同的图像显示尺寸，不同的分辨率</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"elva-fairy-320w.jpg 320w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-480w.jpg 480w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-800w.jpg 800w"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>=<span class="string">"(max-width: 320px) 280px,</span></span></span><br><span class="line"><span class="tag"><span class="string">            (max-width: 480px) 440px,</span></span></span><br><span class="line"><span class="tag"><span class="string">            800px"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">"elva-fairy-800w.jpg"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">"Elva dressed as a fairy"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>srcset</code> 定义了我们允许浏览器选择的图像集，以及每个图像的大小（<code>set</code> 在这里是集合的意思）；</p>
<p><code>sizes</code> 定义了一组媒体条件（例如屏幕宽度），并且指明当某些媒体条件为真时，什么样的图像显示尺寸是最佳；</p>
<p><code>src</code> 是备胎。</p>
<p>有了这些属性，浏览器会：</p>
<p>① 查看设备宽度；</p>
<p>② 检查 <code>sizes</code> 列表中哪个媒体条件是第一个为真；</p>
<p>③ 查看给予该媒体查询的槽大小；</p>
<p>④ 加载 <code>srcset</code> 列表中引用的最接近所选的槽大小的图像。</p>
</li>
<li><p>相同的图像显示尺寸，不同的分辨率</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"elva-fairy-320w.jpg,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-480w.jpg 1.5x,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-640w.jpg 2x"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">"elva-fairy-640w.jpg"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">"Elva dressed as a fairy"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你支持多种分辨率显示，但希望每个人在屏幕上看到的图片的实际尺寸是相同的，你可以让浏览器通过 <code>srcset</code> 和 <code>x</code> 语法结合。因此，如果访问页面的设备具有标准/低分辨率显示，一个设备像素表示一个 CSS 像素，<code>elva-fairy-320w.jpg</code> 会被加载（<code>1x</code> 是默认值，所以你不需要写出来）；如果设备有高分辨率，两个或更多的设备像素表示一个CSS 像素，<code>elva-fairy-640w.jpg</code> 会被加载。</p>
</li>
<li><p>更改显示的图像以适应不同的图像显示尺寸</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width:799px)"</span> <span class="attr">srcset</span>=<span class="string">"elva-480w-close-portrait.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width:800px)"</span> <span class="attr">srcset</span>=<span class="string">"elva-800w.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"elva-800w.jpg"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">alt</span>=<span class="string">"Chris standing up holding his daughter Elva"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样的代码允许我们在宽屏和窄屏上都能显示合适的图片，<strong>注意</strong>：你应该仅仅当在艺术方向场景下使用 <code>media</code> 属性；当你使用 <code>media</code> 时，不要在 <code>sizes</code> 属性中也提供媒体条件。</p>
</li>
</ol>
<h4 id="Why-not-JavaScript-amp-CSS"><a href="#Why-not-JavaScript-amp-CSS" class="headerlink" title="Why not JavaScript&amp;CSS?"></a>Why not JavaScript&amp;CSS?</h4><p>你不能先加载好 <code>img</code> 元素后，再用 JavaScript 检测视图的宽度，接着再动态替换最佳尺寸的照片，这样的做法对于响应式图像的理念来说，是背道而驰的。</p>
<h4 id="大胆使用现代图像格式"><a href="#大胆使用现代图像格式" class="headerlink" title="大胆使用现代图像格式"></a>大胆使用现代图像格式</h4><p>有很多令人激动的新图像格式（例如 WebP 和 JPEG-2000）可以在有高质量的同时有较低的文件大小。然而，浏览器对其的支持参差不齐。<code>&lt;picture&gt;</code> 可以让我们能继续满足老式浏览器的需要。你可以在 <code>type</code> 属性中提供 MIME 类型，这样浏览器就能立即拒绝其不支持的文件类型：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> <span class="attr">srcset</span>=<span class="string">"pyramid.svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">srcset</span>=<span class="string">"pyramid.webp"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"pyramid.png"</span> <span class="attr">alt</span>=<span class="string">"regular pyramid built from four equilateral triangles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>不要使用 <code>media</code> 属性，除非你需要艺术方向；</li>
<li>在 <code>&lt;source&gt;</code> 元素中，你只可以引用在 <code>type</code> 中声明的文件类型；</li>
<li>像之前一样，如果必要，你可以在 <code>srcset</code> 和 <code>sizes</code> 中使用逗号分割的列表。</li>
</ul>
<h2 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML 表格"></a>HTML 表格</h2><h3 id="HTML-表格基础"><a href="#HTML-表格基础" class="headerlink" title="HTML 表格基础"></a>HTML 表格基础</h3><h4 id="lt-tr-gt-和-lt-td-gt"><a href="#lt-tr-gt-和-lt-td-gt" class="headerlink" title="&lt;tr&gt; 和 &lt;td&gt;"></a><code>&lt;tr&gt;</code> 和 <code>&lt;td&gt;</code></h4><p><code>&lt;tr&gt;</code> 就是 “table row”，<code>&lt;td&gt;</code> 就是 “table data”，所以一个常见的简单表格是这样写的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hi, I'm your first cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>I'm your second cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>I'm your third cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>I'm your fourth cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-th-gt-是标题"><a href="#lt-th-gt-是标题" class="headerlink" title="&lt;th&gt; 是标题"></a><code>&lt;th&gt;</code> 是标题</h4><p><code>&lt;th&gt;</code> 就是 “table header”，用法和 <code>&lt;td&gt;</code> 一样，都是用在 <code>&lt;tr&gt;</code> 元素之中。</p>
<h4 id="单元格跨越"><a href="#单元格跨越" class="headerlink" title="单元格跨越"></a>单元格跨越</h4><p>通过 colspan（跨列）和 rawspan（跨行）属性进行跨越，举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>Hippopotamus<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>Horse<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mare<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Stallion<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h4><ol>
<li><p>笨方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Data 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"background-color: yellow"</span>&gt;</span>Data 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Calcutta<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"background-color: yellow"</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Robots<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"background-color: yellow"</span>&gt;</span>Jazz<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>colgroup&gt;col</code> 来快速选择</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">"background-color: yellow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Data 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Data 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Calcutta<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Robots<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jazz<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="表格高级特性和可访问性"><a href="#表格高级特性和可访问性" class="headerlink" title="表格高级特性和可访问性"></a>表格高级特性和可访问性</h3><h4 id="lt-caption-gt"><a href="#lt-caption-gt" class="headerlink" title="&lt;caption&gt;"></a><code>&lt;caption&gt;</code></h4><p>给表格增加一个标题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Dinosaurs in the Jurassic period<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="表格中的常用结构"><a href="#表格中的常用结构" class="headerlink" title="表格中的常用结构"></a>表格中的常用结构</h4><ul>
<li><code>&lt;thead&gt;</code> 放置在头部的位置，因为它通常代表第一行，第一行中往往都是每列的标题，但是不是每种情况都是这样的。如果你使用了 <code>colgroup&gt;col</code> 元素，那么 <code>&lt;thead&gt;</code> 元素就需要放在它们的下面。</li>
<li><code>&lt;tfoot&gt;</code> 放置在底部的位置，一般是最后一行，往往是对前面所有行的总结。你也直接紧挨着 <code>&lt;thead&gt;</code> 放，不影响浏览器对其位置的渲染。</li>
<li><code>&lt;tbody&gt;</code> 放置在 <code>&lt;thead&gt;</code> 的下面或者是 <code>&lt;tfoot&gt;</code> 的下面。</li>
</ul>
<p>做一个简单的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>How I chose to spend my money<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Purchase<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Location<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Evaluation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cost (€)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span>SUM<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>48<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Haircut<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hairdresser<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>12/09<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Great idea<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Lasagna<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Restaurant<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>12/09<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Regrets<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="嵌套表格"><a href="#嵌套表格" class="headerlink" title="嵌套表格"></a>嵌套表格</h4><p>嵌套表格的效果很差，不推荐使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>title1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>title2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>title3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"nested"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>cell6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="视障用户的表格增强"><a href="#视障用户的表格增强" class="headerlink" title="视障用户的表格增强"></a>视障用户的表格增强</h4><p>办法是 — 使用行标题和列标题：</p>
<ul>
<li><p>scope 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Purchase<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Location<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Evaluation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Cost (€)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"row"</span>&gt;</span>Haircut<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hairdresser<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>12/09<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Great idea<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scope 还有两个可选的值：colgroup 和 rowgroup，这些用于位于多个列或行的顶部的标题</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>id 和标题属性（这种方法实在是太鸡儿繁琐了，一般上面那种就够了，除非特别复杂、重要的表格）</p>
<ol>
<li><p>为每个 <code>&lt;th&gt;</code> 元素添加一个 <code>id</code>（不能重复）。</p>
</li>
<li><p>为每个 <code>&lt;td&gt;</code> 元素添加一个 <code>headers</code> 属性，每个 <code>headers</code> 属性需要包含 th 元素的 <code>id</code> 。 如果这个单元格是属于一个 th 元素下的，那么就需要包含 th 元素的 id 的值，如果属于多个 th 元素，那么可以用空格分隔这些 id。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">id</span>=<span class="string">"purchase"</span>&gt;</span>Purchase<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">id</span>=<span class="string">"location"</span>&gt;</span>Location<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">id</span>=<span class="string">"date"</span>&gt;</span>Date<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">id</span>=<span class="string">"evaluation"</span>&gt;</span>Evaluation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">id</span>=<span class="string">"cost"</span>&gt;</span>Cost (€)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">id</span>=<span class="string">"haircut"</span>&gt;</span>Haircut<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">headers</span>=<span class="string">"location haircut"</span>&gt;</span>Hairdresser<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">headers</span>=<span class="string">"date haircut"</span>&gt;</span>12/09<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">headers</span>=<span class="string">"evaluation haircut"</span>&gt;</span>Great idea<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">headers</span>=<span class="string">"cost haircut"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h2><h3 id="走进表单"><a href="#走进表单" class="headerlink" title="走进表单"></a>走进表单</h3><h4 id="简单表单示例"><a href="#简单表单示例" class="headerlink" title="简单表单示例"></a>简单表单示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/my-handling-form-page"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mail"</span>&gt;</span>E-mail:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"mail"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"msg"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Send your message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-form-gt"><a href="#lt-form-gt" class="headerlink" title="&lt;form&gt;"></a><code>&lt;form&gt;</code></h4><p>action 属性就是当你 submit 的时候，将表单内容发送的网址目标；method 属性表示你使用什么 HTTP 协议。</p>
<h4 id="lt-label-gt"><a href="#lt-label-gt" class="headerlink" title="&lt;label&gt;"></a><code>&lt;label&gt;</code></h4><p>这个元素太普通了，没啥特殊的地方，注意一下上面代码中的 for 吧，其关联的是其他组件（如 input、textarea）的 id，显著的好处是，你点击一个 label 的时候，光标直接会聚焦在此 label for 的组件上。</p>
<h4 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a><code>&lt;input&gt;</code></h4><p>对于 input 元素来说，type 是非常重要的属性，因为它定义了 input 的行为方式。</p>
<p>可以用 value 属性来定义它（<code>input type=&quot;text&quot;</code>）的默认值：<code>&lt;input type=&quot;text&quot; value=&quot;your name&quot;/&gt;</code></p>
<h4 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="&lt;textarea&gt;"></a><code>&lt;textarea&gt;</code></h4><p>想定义这个元素的默认值就非常简单了，直接往 <code>&gt;&lt;</code> 里面塞进去就行。</p>
<h4 id="lt-button-gt"><a href="#lt-button-gt" class="headerlink" title="&lt;button&gt;"></a><code>&lt;button&gt;</code></h4><p>button 元素接受 <code>submit</code>、<code>reset</code> 或者 <code>button</code> 三个值中的一个：</p>
<ul>
<li>单击 <code>submit</code> 按钮，发送表单的数据到 form 元素的 <code>action</code> 属性所定义的网页；</li>
<li>单击 <code>reset</code> 按钮，将所有表单小部件重新设置为它们的默认值 — 这用户体验被认为是糟糕的；</li>
<li>单击 <code>button</code> 按钮，不会发生任何事…这听起来很傻，但是用 JavaScript 构建定制按钮时非常有用。 </li>
</ul>
<h4 id="lt-fieldset-gt"><a href="#lt-fieldset-gt" class="headerlink" title="&lt;fieldset&gt;"></a><code>&lt;fieldset&gt;</code></h4><p><code>fieldset</code> 元素是一种方便的用于创建具有相同目的的小部件组的方式，出于样式和语义目的。你可以在 <code>&lt;fieldset&gt;</code> 开口标签后加上一个 <code>legend</code> 元素来给 <code>fieldset</code> 标上标签。<code>legend</code> 的文本内容正式地描述 <code>fieldset</code> 的用途，它是包含在 <code>&lt;fieldset&gt;</code> 里的。当阅读下面这个表格时，屏幕阅读器将会读第一个小部件“Fruit juice size small”，“Fruit juice size medium”为第二个，“Fruit juice size large”为第三个。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Fruit juice size<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"size"</span> <span class="attr">id</span>=<span class="string">"size_1"</span> <span class="attr">value</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"size_1"</span>&gt;</span>Small<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"size"</span> <span class="attr">id</span>=<span class="string">"size_2"</span> <span class="attr">value</span>=<span class="string">"medium"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"size_2"</span>&gt;</span>Medium<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"size"</span> <span class="attr">id</span>=<span class="string">"size_3"</span> <span class="attr">value</span>=<span class="string">"large"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"size_3"</span>&gt;</span>Large<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="用于表单的-HTML-结构"><a href="#用于表单的-HTML-结构" class="headerlink" title="用于表单的 HTML 结构"></a>用于表单的 HTML 结构</h4><p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">form</span><br><span class="line">  h1</span><br><span class="line">  p</span><br><span class="line">  section</span><br><span class="line">    h2</span><br><span class="line">    fieldset</span><br><span class="line">      legent</span><br><span class="line">      ul&gt;(li&gt;label&gt;input[type&#x3D;radio])*2</span><br><span class="line">    (p&gt;label+input[type&#x3D;text])*3</span><br><span class="line">  section</span><br><span class="line">    h2</span><br><span class="line">    p&gt;label+select&gt;option*3</span><br><span class="line">    (p&gt;label+input[type&#x3D;text])*2</span><br><span class="line">  section</span><br><span class="line">    p&gt;button[type&#x3D;submit]</span><br><span class="line">form</span><br></pre></td></tr></table></figure>

<h3 id="原生表单挂件"><a href="#原生表单挂件" class="headerlink" title="原生表单挂件"></a>原生表单挂件</h3><h4 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h4><table>
<thead>
<tr>
<th>属性名称</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>autofocus</code></td>
<td>false</td>
<td>这个布尔属性允许您指定当页面加载后某个元素自动具有输入焦点。<br>文档中只有一个与表单相关的元素可以指定这个属性。</td>
</tr>
<tr>
<td><code>disabled</code></td>
<td>false</td>
<td>这个布尔属性表示用户不能与元素交互，此元素可以继承。</td>
</tr>
<tr>
<td><code>form</code></td>
<td></td>
<td>小部件与之相关联的表单元素，属性值必需是同个文档中某个 form 元素 <code>id</code> 属性。<br>理论上，它允许你在 form 元素之外设置一个表单小部件。<br>然而，在实践中，没有任何支持该特性的浏览器。</td>
</tr>
<tr>
<td><code>name</code></td>
<td></td>
<td>元素的名称 — 这是用于表单数据提交的。</td>
</tr>
<tr>
<td><code>value</code></td>
<td></td>
<td>元素的初始值。</td>
</tr>
</tbody></table>
<h4 id="文本输入域"><a href="#文本输入域" class="headerlink" title="文本输入域"></a>文本输入域</h4><ul>
<li><p>文本域通用规范</p>
<ul>
<li>它们可以被标记为 <code>readonly</code>（用户不能修改输入值）甚至是 <code>disabled</code>（输入值不会与表单的其余部分一起发送）。</li>
<li>它们可以有一个 <code>placeholder</code>，这是文本输入框中出现的文本，用来简略描述输入框的目的。</li>
<li>它们可以被限制在 <code>size</code>（框的物理尺寸）和 <code>maxlength</code>（可以输入的最大字符数）。</li>
<li>如果浏览器支持的话，他们可以从 <code>spellcheck</code>（拼写检查）中获益。</li>
</ul>
</li>
<li><p>单行文本域 <code>&lt;input&gt;</code></p>
<p>单行文本域只有一个真正的约束：如果您输入带有换行符的文本，浏览器会在发送数据之前删除这些换行符。</p>
<ol>
<li><p>E-mail 地址域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>密码域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>搜索域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>电话号码域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">id</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>URL 域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">id</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>多行文本域 <code>&lt;textarea&gt;</code></p>
<ul>
<li><p>简单示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述是一个典型的 <code>textarea</code> 组件，在大多数浏览器中，文本区域在右下角有一个拖放操作，允许用户调整它的大小。这种调整能力可以通过使用 CSS 设置文本区域的 <code>resize</code> 性质为 <code>none</code> 来关闭。</p>
</li>
<li><p><code>textarea</code> 元素常用属性</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>cols</code></td>
<td><code>20</code></td>
<td>文本控件的可见宽度，平均字符宽度。</td>
</tr>
<tr>
<td><code>rows</code></td>
<td></td>
<td>控制的可见文本行数。</td>
</tr>
<tr>
<td><code>wrap</code></td>
<td><code>soft</code></td>
<td>表示控件是如何包装文本的。值：<code>hard</code> 或 <code>soft</code>（<code>hard</code> 在超过宽度时，强制插入换行符）</td>
</tr>
</tbody></table>
</li>
<li><p>注意</p>
<p><code>textarea</code> 只接受文本内容 — 这意味着将任何 HTML 内容放入 <code>textarea</code> 中都呈现为纯文本内容。</p>
</li>
</ul>
</li>
</ul>
<h4 id="下拉内容"><a href="#下拉内容" class="headerlink" title="下拉内容"></a>下拉内容</h4><ul>
<li><p>单选框 <code>&lt;select&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"simple"</span> <span class="attr">name</span>=<span class="string">"simple"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"groups"</span> <span class="attr">name</span>=<span class="string">"groups"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"fruits"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"vegetables"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Eggplant<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Potato<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果一个 &lt;option&gt; 元素设置了 value 属性，那么当提交表单时该属性的值就会被发送。</span></span><br><span class="line"><span class="comment">如果忽略了 value 属性，则使用 &lt;option&gt; 元素的内容作为选择框的值。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span> <span class="attr">id</span>=<span class="string">"multi"</span> <span class="attr">name</span>=<span class="string">"multi"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自动补全输入框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myFruit"</span>&gt;</span>What's your favorite fruit?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"myFruit"</span> <span class="attr">id</span>=<span class="string">"myFruit"</span> <span class="attr">list</span>=<span class="string">"mySuggestion"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"mySuggestion"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blackberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blueberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lychee<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Peach<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 因为有一些浏览器不支持 datalist，所以下面这种方法也可以试试 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原理：支持 datalist 标签的浏览器只会注意到 option，而不支持的则当做 select 列表处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myFruit"</span>&gt;</span>What is your favorite fruit? (With fallback)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"myFruit"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">list</span>=<span class="string">"fruitList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"fruitList"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"suggestion"</span>&gt;</span>or pick a fruit<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"suggestion"</span> <span class="attr">name</span>=<span class="string">"altFruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blackberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blueberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lychee<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Peach<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="可选中项"><a href="#可选中项" class="headerlink" title="可选中项"></a>可选中项</h4><ul>
<li><p>单选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span> <span class="attr">id</span>=<span class="string">"soup"</span> <span class="attr">name</span>=<span class="string">"meal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当 name 属性一样的时候，只有一个可以被 checked --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>What is your favorite meal?<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"soup"</span>&gt;</span>Soup<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span> <span class="attr">id</span>=<span class="string">"soup"</span> <span class="attr">name</span>=<span class="string">"meal"</span> <span class="attr">value</span>=<span class="string">"soup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"curry"</span>&gt;</span>Curry<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"curry"</span> <span class="attr">name</span>=<span class="string">"meal"</span> <span class="attr">value</span>=<span class="string">"curry"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pizza"</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"pizza"</span> <span class="attr">name</span>=<span class="string">"meal"</span> <span class="attr">value</span>=<span class="string">"pizza"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> <span class="attr">id</span>=<span class="string">"carrots"</span> <span class="attr">name</span>=<span class="string">"carrots"</span> <span class="attr">value</span>=<span class="string">"carrots"</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>之前讲过，重复一遍 — button 元素接受 <code>submit</code>、<code>reset</code> 或者 <code>button</code> 三个值中的一个：</p>
<ul>
<li>单击 <code>submit</code> 按钮，发送表单的数据到 form 元素的 <code>action</code> 属性所定义的网页；</li>
<li>单击 <code>reset</code> 按钮，将所有表单小部件重新设置为它们的默认值 — 这用户体验被认为是糟糕的；</li>
<li>单击 <code>button</code> 按钮，不会发生任何事…这听起来很傻，但是用 JavaScript 构建定制按钮时非常有用。 </li>
</ul>
<h4 id="高级表单那件选择器部件"><a href="#高级表单那件选择器部件" class="headerlink" title="高级表单那件选择器部件"></a>高级表单那件选择器部件</h4><ul>
<li><p>数字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"2"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>滑块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"beans"</span> <span class="attr">id</span>=<span class="string">"beans"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"500"</span> <span class="attr">step</span>=<span class="string">"10"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日期时间选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"myDate"</span>&gt;</span>When are you available this summer?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"myDate"</span> <span class="attr">min</span>=<span class="string">"2013-06-01"</span> <span class="attr">max</span>=<span class="string">"2013-08-31"</span> <span class="attr">id</span>=<span class="string">"myDate"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拾色器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"color"</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="其他小部件"><a href="#其他小部件" class="headerlink" title="其他小部件"></a>其他小部件</h4><ul>
<li><p>文件选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>隐藏内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"timestamp"</span> <span class="attr">name</span>=<span class="string">"timestamp"</span> <span class="attr">value</span>=<span class="string">"1286705410"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>图像按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">alt</span>=<span class="string">"Click me!"</span> <span class="attr">src</span>=<span class="string">"my-img.png"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"30"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进度条</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"75"</span>&gt;</span>75/100<span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>仪表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"75"</span> <span class="attr">low</span>=<span class="string">"33"</span> <span class="attr">high</span>=<span class="string">"66"</span> <span class="attr">optimum</span>=<span class="string">"50"</span>&gt;</span>75<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 速览</title>
    <url>/2017/12/29/MyBatis-%E9%80%9F%E8%A7%88/</url>
    <content><![CDATA[<h3 id="MySQL-基本命令回顾"><a href="#MySQL-基本命令回顾" class="headerlink" title="MySQL 基本命令回顾"></a>MySQL 基本命令回顾</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">CREATE DATABASE &#39;database_name&#39; DEFAULT CHARACTER SET utf8mb4</span><br><span class="line"></span><br><span class="line"># 建表</span><br><span class="line">CREATE TABLE &#39;table_name&#39; (</span><br><span class="line">  &#39;column_name&#39; &#39;type&#39; &#39;restrict&#39; AUTO_INCREMENT COMMENT &#39;remark&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="MyBatis-最简化配置"><a href="#MyBatis-最简化配置" class="headerlink" title="MyBatis 最简化配置"></a>MyBatis 最简化配置</h3><ol>
<li><p>第一步当然是制作全局 XML 文件，名字没什么要求，比如可以叫做——<code>mybatis-config.xml</code>，放在 src 目录下面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这个 XML Mapper 下面就说--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"xyz/xijinian/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二步，新建 <code>xyz/xijinian/mybatisdemo/mapper/BlogMapper.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xyz.xijinian.mapper.BlogMapper"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">     select * from Blog where id = #&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用 XML 文件构建 <code>SqlSessionFactory</code>，不过首先要先构建 <code>SqlSessionFactoryBuilder</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 <code>SqlSessionFactory</code> 生产 <code>SqlSession</code>：</p>
<ul>
<li><p>老方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Blog blog = (Blog)session.selectOne(<span class="string">"xyz.xijinian.mapper.BlogMapper.selectBlog"</span>, <span class="number">101</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>最佳实践</p>
<ul>
<li><p><code>SqlSessionFactoryBuilder</code> 实例的最佳作用域是方法作用域（也就是局部方法变量），最好不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情。</p>
</li>
<li><p><code>SqlSessionFactory</code> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p>
</li>
<li><p>每个线程都应该有它自己的 <code>SqlSession</code> 实例。<code>SqlSession</code> 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。每次收到的 HTTP 请求，就打开一个 <code>SqlSession</code>；返回一个响应，就关闭它。这个关闭操作是很重要的，可以在 <code>finally</code> 中关闭。</p>
</li>
<li><p>映射器接口的实例是从 <code>SqlSession</code> 中获得的。因此从技术层面讲，任何映射器实例的最大作用域是和请求它们的 <code>SqlSession</code> 相同的。但实际上，映射器实例的最佳作用域是方法作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// do work</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="三种查询方式"><a href="#三种查询方式" class="headerlink" title="三种查询方式"></a>三种查询方式</h3><ol>
<li><p><code>selectList()</code> 返回值为 <code>List</code> 的泛型类型的对象</p>
<ul>
<li><p>对应的 xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultType</span>=<span class="string">"xyz.xijinian.pojo.Flower"</span>&gt;</span></span><br><span class="line">   select id,name name123,price,production from flower</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Flower&gt; list = session.selectList(<span class="string">"xyz.xijinian.mapper.FlowerMapper.selAll"</span>);</span><br><span class="line"><span class="keyword">for</span> (Flower flower : list) &#123;</span><br><span class="line">   System.out.println(flower.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>selectOne()</code> 返回值 <code>Object</code> 类型的对象</p>
<ul>
<li><p>对应的 xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"calCount"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">   select count(*) from flower</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = session.selectOne(<span class="string">"xyz.xijinian.mapper.FlowerMapper.calCount"</span>);</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>selectMap()</code> 返回值 <code>Map</code></p>
<ul>
<li><p>对应的 xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getMap"</span> <span class="attr">resultType</span>=<span class="string">"xyz.xijinian.pojo.Flower"</span>&gt;</span></span><br><span class="line">   select id,name name123,price,production from flower</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Object, Object&gt; map = session.selectMap(<span class="string">"xyz.xijinian.mapper.getMap"</span>, <span class="string">"name123"</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>简化 xml 配置</p>
<h4 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h4><p><code>@XXXX(属性名=值)</code></p>
<blockquote>
<p>值的分类（如果注解只需要给一个属性赋值，且这个属性是默认属性，那么可以省略属性名）：<br>① 基本类型 —— <code>@XXXX(属性名=值)</code><br>② 数组类型 —— <code>@XXXX(属性名={值,值})</code><br>③ 引用类型 —— <code>@XXXX(属性名=@值)</code></p>
</blockquote>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>从当前资源出发找到其他资源</p>
<h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>从根目录（服务器根目录或项目根目录）出发找到其他资源（只要以 “/” 开头的都是绝对路径）</p>
<blockquote>
<p><strong>注意</strong>：如果是请求转发，“/” 表示项目根目录，其他重定向 <code>&lt;img/&gt; 、&lt;script/&gt;、&lt;style/&gt;、location.href</code> 等 “/” 都表示服务器根目录（tomcat/webapps 文件夹）。如果客户端请求的控制器转发到 JSP 后，JSP 中如果使用相对路径，则需要按照控制器的路径去找其他资源。</p>
</blockquote>
<h3 id="在-MyBatis-中使用-Log4J"><a href="#在-MyBatis-中使用-Log4J" class="headerlink" title="在 MyBatis 中使用 Log4J"></a>在 MyBatis 中使用 Log4J</h3><h4 id="导入相关-JAR"><a href="#导入相关-JAR" class="headerlink" title="导入相关 JAR"></a>导入相关 JAR</h4><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ol>
<li><p>在 src 下新建 log4j.properties（路径和名称都不允许改变）</p>
</li>
<li><p>log4j.rootCategory=DEBUG, CONSOLE ,LOGFILE </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">DEBUG,CONSOLE,LOGFILE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%C %d&#123;YYYY-MM-dd hh:mm:ss&#125; %m %n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.File</span>=<span class="string">E:/my.log</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%C %m %L %n</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出级别</p>
<p>fatal（致命错误）&gt; error（错误）&gt; warn（警告）&gt; info（普通信息）&gt; debug（调试信息）</p>
</li>
<li><p>常见表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%C 包名+类名</span><br><span class="line">%d&#123;YYYY-MM-dd HH:mm:ss&#125; 时间</span><br><span class="line">%L 行号</span><br><span class="line">%m 信息</span><br><span class="line">%n 换行</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>&lt;settings&gt;</code> 标签中开启 Log4J</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出指定位置日志</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">ERROR,CONSOLE,LOGFILE</span></span><br><span class="line"><span class="comment"># 包级别</span></span><br><span class="line"><span class="meta">log4j.logger.xyz.xijinian.mapper</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="comment"># 类级别</span></span><br><span class="line"><span class="meta">log4j.logger.xyz.xijinian.mapper.FlowerMapper</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="comment"># 方法级别</span></span><br><span class="line"><span class="meta">log4j.logger.xyz.xijinian.mapper.FlowerMapper.selByName</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>SqlSession</code> 的 <code>selectList()</code> 、<code>selectOne()</code> 的第二个参数和 <code>selectMap()</code> 的第三个参数都表示方法的参数，也就是 <code>parameterType</code>，在 XxxMapper.xml 中可以通过 <code>#{}</code> 来获取参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selById"</span> <span class="attr">resultType</span>=<span class="string">"xyz.xijinian.pojo.People"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from people where id=#&#123;0&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> <code>#{}</code> 获取参数的方式：<br> ① 使用索引，从 0 开始，<code>#{0}</code> 表示第一个参数<br> ② 使用 <code>#{param1}</code> 获取第一个参数<br> ③ 如果只有一个参数（基本数据类型或 <code>String</code>），MyBatis 对 <code>#{}</code> 里面内容没有要求，只要写内容即可<br> ④ 如果参数是对象，就用 <code>#{属性名}</code> （前提：对应的属性必须有 <code>get/set</code> 方法）<br> ⑤ 如果参数是 map，就用写成 <code>#{key}</code></p>
</blockquote>
<h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{} 和 ${} 的区别"></a><code>#{}</code> 和 <code>${}</code> 的区别</h4><ul>
<li><code>#{}</code> 获取参数的内容支持索引获取，也支持 <code>param1</code> 这种获取指定位置参数的形式，并且 SQL 语句使用 “?” 占位符</li>
<li><code>${}</code> 字符串拼接不使用 “?”，默认找 <code>${内容}</code> 内容的 <code>get/set</code> 方法，如果内容是数字，就直接带入一个字面量</li>
</ul>
<h4 id="XML-文件中的转义字符"><a href="#XML-文件中的转义字符" class="headerlink" title="XML 文件中的转义字符"></a>XML 文件中的转义字符</h4><p>操作 XML 文件时，如果允许用户输入 “&lt; “、”&gt;”、”/“、”” 等内容，当渲染 XML 时这些内容就会破坏 XML 的结构，为了防止此事，我们可以使用 <code>[CDATA[%s]]</code>，这其中的字符串不会被当做标签解析。</p>
<h4 id="“-”-的陷阱"><a href="#“-”-的陷阱" class="headerlink" title="“?” 的陷阱"></a>“?” 的陷阱</h4><p>SQL 不允许在 “?” 关键字前后进行数学运算，如需计算可在 Java 代码中计算出结果后再传递到 XxxMapper.xml 中。</p>
<h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><h4 id="系统内置别名"><a href="#系统内置别名" class="headerlink" title="系统内置别名"></a>系统内置别名</h4><p>把类型全小写</p>
<h4 id="给某个类起别名"><a href="#给某个类起别名" class="headerlink" title="给某个类起别名"></a>给某个类起别名</h4><ol>
<li><p>在全局配置文件中定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"xyz.xijinian.pojo.People"</span> <span class="attr">alias</span>=<span class="string">"peo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 XxxMapper.xml  中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">resultType</span>=<span class="string">"peo"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"> select * from people limit #&#123;pageStart&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="给某个包起别名"><a href="#给某个包起别名" class="headerlink" title="给某个包起别名"></a>给某个包起别名</h4><ol>
<li><p>在全局配置文件中定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"xyz.xijinian.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 XxxMapper.xml  中直接通过类名引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">resultType</span>=<span class="string">"people"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select * from people limit #&#123;pageStart&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="MyBatis-的增删改"><a href="#MyBatis-的增删改" class="headerlink" title="MyBatis 的增删改"></a>MyBatis 的增删改</h3><h4 id="实现新增"><a href="#实现新增" class="headerlink" title="实现新增"></a>实现新增</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"ins"</span> <span class="attr">parameterType</span>=<span class="string">"People"</span>&gt;</span></span><br><span class="line">    insert into people values(default,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> index = session.insert(<span class="string">"a.b.ins"</span>, p);</span><br><span class="line"><span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"失败"</span>); </span><br><span class="line">&#125;</span><br><span class="line">session.commit();</span><br></pre></td></tr></table></figure>

<h4 id="实现删除"><a href="#实现删除" class="headerlink" title="实现删除"></a>实现删除</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"del"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from people where id = #&#123;0&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> del = session.delete(<span class="string">"a.b.del"</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (del &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">session.commit();</span><br></pre></td></tr></table></figure>

<h4 id="实现修改"><a href="#实现修改" class="headerlink" title="实现修改"></a>实现修改</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"upd"</span> <span class="attr">parameterType</span>=<span class="string">"People"</span>&gt;</span></span><br><span class="line">    update people set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">People peo = <span class="keyword">new</span> People();</span><br><span class="line">peo.setId(<span class="number">3</span>);</span><br><span class="line">peo.setName(<span class="string">"王五"</span>);</span><br><span class="line"><span class="keyword">int</span> index = session.update(<span class="string">"a.b.upd"</span>, peo);</span><br><span class="line"><span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">"成功"</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">session.commit();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyBatis 底层是对 JDBC 的封装，其默认是关闭了 JDBC 的自动提交功能</p>
<p>JDBC 中 executeUpdate() 执行新增、删除、修改的 SQL 返回值都是 int，表示受影响的行数<br>MyBatis 中 &lt;insert&gt;、&lt;delete&gt;、&lt;update&gt; 标签没有 resultType 属性，因为其认为返回值都是 int</p>
<p>在 <code>openSession()</code> 时 Mybatis 会在创建 SqlSession 同时创建一个 Transaction（事务对象），同时 autoCommit 都为 false，<code>session.commit()</code> 提交事务，<code>openSession(true)</code> 自动提交，即 <code>.setAutoCommit(true)</code>。如果出现异常，应该 <code>session.rollback()</code> 回滚事务</p>
</blockquote>
<h3 id="MyBatis-接口绑定方案"><a href="#MyBatis-接口绑定方案" class="headerlink" title="MyBatis 接口绑定方案"></a>MyBatis 接口绑定方案</h3><h4 id="使用-lt-package-gt-标签"><a href="#使用-lt-package-gt-标签" class="headerlink" title="使用 &lt;package&gt; 标签"></a>使用 &lt;package&gt; 标签</h4><ul>
<li><p>之前的全局配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"xyz/xijinian/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>现在的全局配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"xyz.xijinian.mapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Log&gt; <span class="title">selByAccInAccout</span><span class="params">(String accin, String accout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想用 #&#123;属性&#125; 的方式，可使用注解 @Param</span></span><br><span class="line"><span class="function">List&lt;Log&gt; <span class="title">selByAccInAccout</span><span class="params">(@Param(<span class="string">"accin"</span>)</span> String accin123,</span></span><br><span class="line"><span class="function">                           @<span class="title">Param</span><span class="params">(<span class="string">"accout"</span>)</span> String accout3454235)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="编写-XML-文件"><a href="#编写-XML-文件" class="headerlink" title="编写 XML 文件"></a>编写 XML 文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当多参数时,不需要写 parameterType --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByAccInAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    select * from log where accin=#&#123;0&#125; and accout=#&#123;1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用 #&#123;属性&#125; 的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByAccInAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    select * from log where accin=#&#123;accin&#125; and accout=#&#123;accout&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h3><h4 id="lt-if-gt"><a href="#lt-if-gt" class="headerlink" title="&lt;if&gt;"></a>&lt;if&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id="selByAccinAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    select * from log where 1=1</span><br><span class="line">    <span class="comment">&lt;!-- OGNL 表达式，直接写 key 或对象的属性，不需要添加任何特字符号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accin!=null and accin!=''"</span>&gt;</span></span><br><span class="line">        and accin=#&#123;accin&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accout!=null and accout!=''"</span>&gt;</span></span><br><span class="line">        and accout=#&#123;accout&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-where-gt"><a href="#lt-where-gt" class="headerlink" title="&lt;where&gt;"></a>&lt;where&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当编写 where 标签时，如果内容中第一个是 and 去掉第一个 and --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果 &lt;where&gt; 中有内容会生成 where 关键字，如果没有内容不生成，比直接使用 &lt;if&gt; 少写 where 1=1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByAccinAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    select * from log</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accin!=null and accin!=''"</span>&gt;</span></span><br><span class="line">            and accin=#&#123;accin&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accout!=null and accout!=''"</span>&gt;</span></span><br><span class="line">            and accout=#&#123;accout&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-choose-gt-lt-when-gt-和-lt-otherwise-gt"><a href="#lt-choose-gt-lt-when-gt-和-lt-otherwise-gt" class="headerlink" title="&lt;choose&gt;&lt;when&gt;和&lt;otherwise&gt;"></a>&lt;choose&gt;&lt;when&gt;和&lt;otherwise&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有有一个成立，其它都不执行 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果 accin 和 accout 都不是 null&amp;””，生成的 sql 中只有 where accin=? --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByAccinAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    select * from log</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"accin!=null and accin!=''"</span>&gt;</span></span><br><span class="line">                and accin=#&#123;accin&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"accout!=null and accout!=''"</span>&gt;</span></span><br><span class="line">                and accout=#&#123;accout&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-set-gt"><a href="#lt-set-gt" class="headerlink" title="&lt;set&gt;"></a>&lt;set&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果 &lt;set&gt; 里面有内容生成 set 关键字，没有就不生成，并去掉最后一个逗号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"upd"</span> <span class="attr">parameterType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    update log</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        id=#&#123;id&#125;,</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accIn!=null and accIn!=''"</span>&gt;</span></span><br><span class="line">            accin=#&#123;accIn&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accOut!=null and accOut!=''"</span>&gt;</span></span><br><span class="line">            accout=#&#123;accOut&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-trim-gt"><a href="#lt-trim-gt" class="headerlink" title="&lt;trim&gt;"></a>&lt;trim&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- prefix 在前面添加内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefixOverrides 去掉前面内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- suffix 在后面添加内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- suffixOverrieds 去掉后面内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 执行顺序是去掉内容后添加内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"upd"</span> <span class="attr">parameterType</span>=<span class="string">"log"</span>&gt;</span></span><br><span class="line">    update log</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        id=#&#123;id&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id=100</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-bind-gt"><a href="#lt-bind-gt" class="headerlink" title="&lt;bind&gt;"></a>&lt;bind&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用是给参数重新赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">    SELECT * FROM BLOG</span><br><span class="line">    WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-foreach-gt"><a href="#lt-foreach-gt" class="headerlink" title="&lt;foreach&gt;"></a>&lt;foreach&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- open 循环后左侧添加的内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- close 循环后右侧添加的内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- separator 每次循环时，元素之间的分隔符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">    SELECT * FROM POST P WHERE ID in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-sql-gt-和-lt-include-gt"><a href="#lt-sql-gt-和-lt-include-gt" class="headerlink" title="&lt;sql&gt; 和 &lt;include&gt;"></a>&lt;sql&gt; 和 &lt;include&gt;</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"PayAttr"</span>&gt;</span></span><br><span class="line">    id,accin,accout,money</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"PayAttr"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from log</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal 是线程容器，给线程绑定一个 Object 后，只要线程不变，可以随时取出它，但是线程变了，就无法获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ThreadLocal&lt;String&gt; = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">threadLocal.set(<span class="string">"测试"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = threadLocal.get();</span><br><span class="line">        System.out.println(<span class="string">"结果:"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>

<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="SqlSession-缓存"><a href="#SqlSession-缓存" class="headerlink" title="SqlSession 缓存"></a>SqlSession 缓存</h4><p>SqlSession 缓存又称为一级缓存，它是 MyBatis 默认开启的，当一个 SqlSession 第一次通过 SQL 和参数获取对象后，它就会将其缓存起来，如果下次的 SQL 和参数都没有发生变化，并且缓存没有超时或者声明需要刷新时，那么它就会从缓存中获取数据，而不是通过 SQL 获取了。</p>
<p>事实上，MyBatis 缓存的是 <code>statement</code> 对象（简单记忆必须是用一个 <code>&lt;select&gt;</code>），在 MyBatis 中一个 <code>&lt;select&gt;</code> 对应一个 <code>statement</code> 对象，以及缓存的有效范围必须是同一个 SqlSession 对象。</p>
<h4 id="SqlSessionFactory-缓存"><a href="#SqlSessionFactory-缓存" class="headerlink" title="SqlSessionFactory 缓存"></a>SqlSessionFactory 缓存</h4><p>SqlSessionFactory 缓存又称为二级缓存，如果两次查询基于同一个 SqlSessionFactory，那么就从二级缓存中取数据，而不用到数据库里去取了。注意：只有 <code>session.commit()</code> 或者 <code>session.close()</code> 执行后，一级缓存才会刷到二级缓存。</p>
<p>配置步骤：</p>
<p>① 在 XXXMapper.xml 中添加 <code>&lt;cache /&gt;</code> 标签，同时 POJO 实现 <code>Serializable</code> 接口，并且要执行 <code>session.commit()</code> 或者 <code>session.close()</code>。</p>
<p>② 如果不想这么麻烦，可以直接在 XXXMapper.xml 中添加 <code>&lt;cache readOnly=&quot;true&quot;&gt;&lt;/cache&gt;</code> 标签。</p>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>使用 <code>&lt;resultMap&gt;</code> 标签时，<code>&lt;select&gt;</code> 标签不写 <code>resultType</code> 属性，而是使用 <code>resultMap</code> 属性引用 <code>&lt;resultMap&gt;</code> 标签。</p>
<h4 id="单表映射"><a href="#单表映射" class="headerlink" title="单表映射"></a>单表映射</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POJO</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id1;</span><br><span class="line">    <span class="keyword">private</span> String name1;</span><br><span class="line">    <span class="comment">// getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- property 是映射到列结果的字段或属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- column 对用的是 SQL 的列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"teacher"</span> <span class="attr">id</span>=<span class="string">"mymap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键使用 id 标签配置映射关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他列使用 result 标签配置映射关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultMap</span>=<span class="string">"mymap"</span>&gt;</span></span><br><span class="line">    select * from teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="关联单个对象（N-1）"><a href="#关联单个对象（N-1）" class="headerlink" title="关联单个对象（N+1）"></a>关联单个对象（N+1）</h4><p>N+1 效率低，但是有时候你的业务不确定，这样分开写也不错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    <span class="comment">// getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TeacherMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selById"</span> <span class="attr">resultType</span>=<span class="string">"teacher"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;0&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- StudentMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"student"</span> <span class="attr">id</span>=<span class="string">"stuMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果关联一个对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">"xijinian.xyz.mapper.TeacherMapper.selById"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">"tid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 N+1 方式时，利用 Auto mapping 特性，将上述代码简化为↑↓ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"student"</span> <span class="attr">id</span>=<span class="string">"stuMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">"xijinian.xyz.mapper.TeacherMapper.selById"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">"tid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：当一个属性被当做参数传递，那么 MyBatis 就不会给这个属性自动映射了，所以 tid 不能省 --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="关联单个对象（联合查询）"><a href="#关联单个对象（联合查询）" class="headerlink" title="关联单个对象（联合查询）"></a>关联单个对象（联合查询）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Student"</span> <span class="attr">id</span>=<span class="string">"stuMap1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property 指的是属性名称,映射到 POJO 的属性上，javaType 指的是属性的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll1"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap1"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">        s.id sid,</span><br><span class="line">        s.name sname,</span><br><span class="line">        age age,</span><br><span class="line">        t.id tid,</span><br><span class="line">        t.name tname </span><br><span class="line">    from student s left outer join teacher t on s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="关联集合（N-1）"><a href="#关联集合（N-1）" class="headerlink" title="关联集合（N+1）"></a>关联集合（N+1）</h4><p>N+1 效率低，但是有时候你的业务不确定，这样分开写也不错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list;</span><br><span class="line">    <span class="comment">// getter、setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- StudentMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bjsxt.mapper.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByTid"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">        select * from student where tid=#&#123;0&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TeacherMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"teacher"</span> <span class="attr">id</span>=<span class="string">"mymap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"list"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">"com.bjsxt.mapper.StudentMapper.selByTid"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultMap</span>=<span class="string">"mymap"</span>&gt;</span></span><br><span class="line">    select * from teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="关联集合（联合查询）"><a href="#关联集合（联合查询）" class="headerlink" title="关联集合（联合查询）"></a>关联集合（联合查询）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TeacherMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"teacher"</span> <span class="attr">id</span>=<span class="string">"mymap1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"student"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">property</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll1"</span> <span class="attr">resultMap</span>=<span class="string">"mymap1"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">        t.id tid,</span><br><span class="line">        t.name tname,</span><br><span class="line">        s.id sid,</span><br><span class="line">        s.name sname,</span><br><span class="line">        age,</span><br><span class="line">        tid</span><br><span class="line">    from teacher t left join student s on t.id=s.tid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Auto-Mapping-多表查询"><a href="#Auto-Mapping-多表查询" class="headerlink" title="Auto Mapping 多表查询"></a>Auto Mapping 多表查询</h4><p>“.”在 SQL 中是关键字符，两侧需添加反单引号。要求：只能使用多表联合查询方式，查询出的列名和要和属性名相同，且只能关联单个对象，而不能关联集合。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- StudentMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bjsxt.mapper.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">            t.id `teacher.id`,</span><br><span class="line">            t.name `teacher.name`,</span><br><span class="line">            s.id id,</span><br><span class="line">            s.name name,</span><br><span class="line">            age,</span><br><span class="line">            tid </span><br><span class="line">        from student s LEFT JOIN teacher t on t.id=s.tid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TeacherMapper.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个是失败的，因为 Auto Mapping 并不能关联集合，只能关联单个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.bjsxt.mapper.TeacherMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultType</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">            t.id id,</span><br><span class="line">            t.name name,</span><br><span class="line">            s.id `list.id`,</span><br><span class="line">            s.name `list.name`,</span><br><span class="line">            age `list.age`,</span><br><span class="line">            tid `list.tid` </span><br><span class="line">        from teacher t LEFT JOIN student s on t.id=s.tid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h3><p>注意：XxxMapper.xml 和注解可以共存，如果涉及动态 SQL 依然使用 XxxMapper.xml 为佳，因为注解并不会简单。</p>
<h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from teacher"</span>)</span><br><span class="line"><span class="function">List&lt;Teacher&gt; <span class="title">selAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into teacher values(default,#&#123;name&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insTeacher</span><span class="params">(Teacher teacher)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update</span>(<span class="string">"update teacher set name=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updTeacher</span><span class="params">(Teacher teacher)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from teacher where id=#&#123;0&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="N-1-举例"><a href="#N-1-举例" class="headerlink" title="N+1 举例"></a>N+1 举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StudentMapper</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from student where tid=#&#123;0&#125;"</span>) </span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selByTid</span><span class="params">(<span class="keyword">int</span> tid)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TeacherMapper </span></span><br><span class="line"><span class="comment">// @Results() 相当于 &lt;resultMap&gt;</span></span><br><span class="line"><span class="comment">// @Result() 相当于 &lt;id/&gt; 或 &lt;result/&gt;</span></span><br><span class="line"><span class="comment">// @Result(id=true) 相当与 &lt;id/&gt; </span></span><br><span class="line"><span class="comment">// @Many() 相当于 &lt;collection/&gt; </span></span><br><span class="line"><span class="comment">// @One() 相当于 &lt;association/&gt;</span></span><br><span class="line"><span class="meta">@Results</span>(value=&#123;</span><br><span class="line">    <span class="meta">@Result</span>(id=<span class="keyword">true</span>,property=<span class="string">"id"</span>,column=<span class="string">"id"</span>), </span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"name"</span>,column=<span class="string">"name"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"list"</span>,</span><br><span class="line">            column=<span class="string">"id"</span>,</span><br><span class="line">            many=<span class="meta">@Many</span>(select=<span class="string">"xyz.xijinian.mapper.StudentMapper.selByTid"</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from teacher"</span>)</span><br><span class="line"><span class="function">List&lt;Teacher&gt; <span class="title">selTeacher</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="MyBatis-运行原理"><a href="#MyBatis-运行原理" class="headerlink" title="MyBatis 运行原理"></a>MyBatis 运行原理</h3><p>在 MyBatis 运行开始时需要先通过 Resources 加载全局配置文件，接着需要实例化 SqlSessionFactoryBuilder 构建器，帮助 SqlSessionFactory 接口实现类 DefaultSqlSessionFactory，在实例化 DefaultSqlSessionFactory 之前需要先创建 XmlConfigBuilder 解析全局配置文件流，并把解析结果存放在 Configuration 中。之后把 Configuration 传递给 DefaultSqlSessionFactory，到此 SqlSessionFactory 工厂创建成功。<br>由 SqlSessionFactory 工厂创建 SqlSession，每次创建 SqlSession 时，都需要由 TransactionFactory 创建 Transaction<br>对象，同时还需要创建 SqlSession 的执行器 Excutor，最后实例化 DefaultSqlSession，传递给 SqlSession 接口。根据项目需求使用 SqlSession 接口中的 API 完成具体的事务操作。</p>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC 速览</title>
    <url>/2017/12/28/Spring-MVC-%E9%80%9F%E8%A7%88/</url>
    <content><![CDATA[<h3 id="Spring-MVC-框架简介"><a href="#Spring-MVC-框架简介" class="headerlink" title="Spring MVC 框架简介"></a>Spring MVC 框架简介</h3><h4 id="Spring-MVC-中的重要组件"><a href="#Spring-MVC-中的重要组件" class="headerlink" title="Spring MVC 中的重要组件"></a>Spring MVC 中的重要组件</h4><ol>
<li><code>DispatcherServlet</code>：前端控制器，接收所有请求（如果路径配置为“/”，则不包括 JSP 文件）</li>
<li><code>HandlerMapping</code>：解析请求格式的，判断希望要执行哪个具体的方法</li>
<li><code>HandlerAdapter</code>：负责调用具体的方法</li>
<li><code>ViewResolver</code>：视图解析器，解析结果，负责准备跳转到具体的物理视图<a id="more"></a></li>
</ol>
<h4 id="Spring-MVC-运行原理"><a href="#Spring-MVC-运行原理" class="headerlink" title="Spring MVC 运行原理"></a>Spring MVC 运行原理</h4><p><img src="https://i.loli.net/2018/11/21/5bf43ff218df8.png" alt=""></p>
<h4 id="Spring-和-Spring-MVC-容器"><a href="#Spring-和-Spring-MVC-容器" class="headerlink" title="Spring 和 Spring MVC 容器"></a>Spring 和 Spring MVC 容器</h4><p>Spring 容器和 Spring MVC 容器是父子关系，所以 Spring MVC 可以调用 Spring 容器中的所有内容</p>
<h3 id="Spring-MVC-环境搭建"><a href="#Spring-MVC-环境搭建" class="headerlink" title="Spring MVC 环境搭建"></a>Spring MVC 环境搭建</h3><ol>
<li><p>导入一堆相关 JAR 包</p>
</li>
<li><p>在 web.xml 中配置前端控制器 <code>DispatcherServlet</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 src 文件夹下面新建 springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">&lt;!-- 扫描注解 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xyz.xijinian.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 静态资源 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"demo"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"执行 demo"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"demo2"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"demo2"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"main1.jsp"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="字符编码过滤器"><a href="#字符编码过滤器" class="headerlink" title="字符编码过滤器"></a>字符编码过滤器</h3><p>在 web.xml 中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring-MVC-传参"><a href="#Spring-MVC-传参" class="headerlink" title="Spring MVC 传参"></a>Spring MVC 传参</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ol>
<li><p>参数名称和请求中传递的参数名相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"demo"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"执行demo"</span> + <span class="string">" "</span> + name + <span class="string">" "</span> + age);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当参数名不一样的时候，使用 <code>@RequestParam()</code> 来赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@RequestParam(value = <span class="string">"name1"</span>)</span> String name, </span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"age1"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"执行demo"</span> + <span class="string">" "</span> + name + <span class="string">" "</span> + age);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果方法参数是基本数据类型，那么可以通过 <code>@RequestParam</code> 设置默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">page</span><span class="params">(@RequestParam(defaultValue = <span class="string">"2"</span>)</span> <span class="keyword">int</span> pageSize,</span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNumber) </span>&#123;</span><br><span class="line"> System.out.println(pageSize + <span class="string">" "</span> + pageNumber);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制要求必须有某个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(@RequestParam(required = <span class="keyword">true</span>)</span> String name) </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"name 是 SQL 的查询条件,必须要传 递 name 参数"</span> + name);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求参数中包含多个同名参数的获取方式（如复选框传递的参数）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">(String name, <span class="keyword">int</span> age, @RequestParam(<span class="string">"hover"</span>)</span> List&lt;String&gt; abc) </span>&#123;</span><br><span class="line"> System.out.println(name + <span class="string">" "</span> + age + <span class="string">" "</span> + abc);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><ol>
<li><p>请求参数名和对象中属性名对应（通过 get/set 方法）</p>
</li>
<li><p>请求参数是 objName.paramName 格式</p>
<ul>
<li><p>JSP 文件如下</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"peo.name"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"peo.age"</span>/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个类，对象名和参数中点前面的名称对应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> People peo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo6</span><span class="params">(Demo demo)</span> </span>&#123;</span><br><span class="line">   System.out.println(demo);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在请求参数中传递集合对象类型参数</p>
<ul>
<li><p>JSP 文件如下</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"peo[0].name"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"peo[0].age"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"peo[1].name"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"peo[1].age"</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;People&gt; peo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">(Demo demo)</span> </span>&#123;</span><br><span class="line">    System.out.println(demo);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="RESTful-传值方式"><a href="#RESTful-传值方式" class="headerlink" title="RESTful 传值方式"></a>RESTful 传值方式</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>简化 JSP 中参数编写的格式</p>
<h4 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="demo/123/abc"&gt;跳转&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="编写示例控制器"><a href="#编写示例控制器" class="headerlink" title="编写示例控制器"></a>编写示例控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo8/&#123;id1&#125;/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo8</span><span class="params">(@PathVariable String name, @PathVariable(<span class="string">"id1"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">    System.out.println(name + <span class="string">" "</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跳转方式"><a href="#跳转方式" class="headerlink" title="跳转方式"></a>跳转方式</h3><h4 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h4><p>请求转发</p>
<h4 id="手动方式"><a href="#手动方式" class="headerlink" title="手动方式"></a>手动方式</h4><p><strong>注意</strong>：手动方式会使自定义视图解析器 <code>ViewResolver</code> 失效（当然这另有用处）</p>
<ul>
<li><code>redirect:res</code> —— 重定向</li>
<li><code>forward:res</code> —— 转发</li>
</ul>
<h4 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo8/&#123;id1&#125;/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo8</span><span class="params">(@PathVariable String name, @PathVariable(<span class="string">"id1"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">    System.out.println(name + <span class="string">" "</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ResponseBody-注解"><a href="#ResponseBody-注解" class="headerlink" title="@ResponseBody 注解"></a><code>@ResponseBody</code> 注解</h3><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>当在方法上只有 <code>@RequestMapping</code> 时，无论方法返回值是什么都认为需要跳转，如果这时在  <code>@RequestMapping</code> 注解下面添加一个 <code>@ResponseBody</code> 注解，则恒不跳转。</p>
<ul>
<li>如果返回值满足 key-value 形式（对象或 map），这个注解的意义是：<ol>
<li>把响应头设置为 application/json;charset=utf-8</li>
<li>把转换后的内容输出流的形式响应给客户端</li>
</ol>
</li>
<li>如果返回值不满足 key-value 形式（例如 String），则这个注解的意义是：<ol>
<li>把相应头设置为 text/html</li>
<li>把方法返回值以流的形式直接输出（如果返回值包含中文，出现中文乱码）</li>
</ol>
</li>
</ul>
<h4 id="形式-2"><a href="#形式-2" class="headerlink" title="形式"></a>形式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// produces 表示响应头中 Content-Type 取值</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"demo12"</span>, produces = <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"中文"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这个注解底层使用 Jackson 进行 JSON 转换，所以在项目中一定要导入 jackson 的 JAR 包，Spring 4 不支持较高版本的 jackson，例如 jackson 2.7 就无效。</p>
<h3 id="JSP-九大内置对象"><a href="#JSP-九大内置对象" class="headerlink" title="JSP 九大内置对象"></a>JSP 九大内置对象</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">类型</th>
<th align="center">含义</th>
<th align="center">获取方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">request</td>
<td align="center"><code>HttpServletRequst</code></td>
<td align="center">封装所有请求信息</td>
<td align="center">方法参数</td>
</tr>
<tr>
<td align="center">response</td>
<td align="center"><code>HttpServletResponse</code></td>
<td align="center">封装所有响应信息</td>
<td align="center">方法参数</td>
</tr>
<tr>
<td align="center">session</td>
<td align="center"><code>HttpSession</code></td>
<td align="center">封装所有会话信息</td>
<td align="center"><code>request.getSession()</code></td>
</tr>
<tr>
<td align="center">application</td>
<td align="center"><code>ServletContext</code></td>
<td align="center">所有信息</td>
<td align="center"><code>getServletContext();</code><br><code>request.getServletContext()</code>;</td>
</tr>
<tr>
<td align="center">out</td>
<td align="center"><code>PrintWriter</code></td>
<td align="center">输出对象</td>
<td align="center"><code>response.getWriter()</code></td>
</tr>
<tr>
<td align="center">exception</td>
<td align="center"><code>Exception</code></td>
<td align="center">异常对象</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">page</td>
<td align="center"><code>Object</code></td>
<td align="center">当前页面对象</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">pageContext</td>
<td align="center"><code>pageContext</code></td>
<td align="center">获取其他</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">config</td>
<td align="center"><code>ServletConfig</code></td>
<td align="center">配置信息</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="JSP-四大作用域"><a href="#JSP-四大作用域" class="headerlink" title="JSP 四大作用域"></a>JSP 四大作用域</h3><ol>
<li><p>page —— 在当前页面不会重新实例化</p>
</li>
<li><p>request —— 在一次请求中是同一个对象，下次请求重新实例化一个 request 对象</p>
</li>
<li><p>session —— 在一次会话中是同一个对象</p>
<p>只要客户端 Cookie 中传递的 Jsessionid 不变，session 就不会在超时时间内重新实例化，所以其依赖于 Cookie：</p>
<ul>
<li>Cookie 失效的情形 —— ① 浏览器关闭；② 在设定的时间范围 B/S 无交互行为</li>
<li>Cookie 失效时间在 web.xml 中配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单位：分钟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application —— 在 tomcat 启动项目时实例化，在关闭 tomcat 时销毁</p>
</li>
</ol>
<h3 id="Spring-MVC-作用域传值的方式"><a href="#Spring-MVC-作用域传值的方式" class="headerlink" title="Spring MVC 作用域传值的方式"></a>Spring MVC 作用域传值的方式</h3><ol>
<li><p>使用原生 Servlet，在 HanlderMethod 参数中添加作用域对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(HttpServletRequest abc, HttpSession sessionParam)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// request 作用域</span></span><br><span class="line">    abc.setAttribute(<span class="string">"req"</span>, <span class="string">"req 的值"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// session 作用域</span></span><br><span class="line">    HttpSession session = abc.getSession();</span><br><span class="line">    session.setAttribute(<span class="string">"session"</span>, <span class="string">"session 的值"</span>);</span><br><span class="line">    sessionParam.setAttribute(<span class="string">"sessionParam"</span>, <span class="string">"sessionParam 的值"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// appliaction 作用域</span></span><br><span class="line">    ServletContext application = abc.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">"application"</span>, <span class="string">"application 的值"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Map 集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map 中的内容放在 request 作用域中</span></span><br><span class="line"><span class="comment">// Spring 会通过 BindingAwareModelMap 将 map 进行实例化</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    System.out.println(map.getClass());</span><br><span class="line">    map.put(<span class="string">"map"</span>, <span class="string">"map 的值"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Spring MVC 中的 Model 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把内容最终放入到 request 作用域中</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"model"</span>, <span class="string">"model 的值"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Spring MVC 中的 ModelAndView 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 参数：跳转视图</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/index.jsp"</span>);</span><br><span class="line">    mav.addObject(<span class="string">"mav"</span>, <span class="string">"mav 的值"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>浏览器访问资源时响应头如果没有设置 <code>Content-Disposition</code>，浏览器就默认将其当做 “inline” 进行处理，inline 的意思是浏览器能显示就直接显示，不能显示就下载，而我们需要恒下载，所以就要自己设置 <code>Content-Disposition</code>，只需要设置 <code>Context-Disposition=&quot;attachment;filename=文件名&quot;</code>  就行，其中 “attachment” 表示恒下载，”filename” 就是下载时显示的下载文件名。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol>
<li><p>导入相关 JAR 包</p>
</li>
<li><p>编写示例 JSP 文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="download?fileName=a.rar"&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写示例控制器方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本代码中使用了 Apache Commons IO</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileName, HttpServletRequest req, HttpServletResponse res)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置 Content-Disposition</span></span><br><span class="line">    res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把二进制流放入到响应体中.</span></span><br><span class="line">    ServletOutputStream os = res.getOutputStream();</span><br><span class="line">    String path = req.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = FileUtils.readFileToByteArray(file);</span><br><span class="line">    os.write(bytes);</span><br><span class="line">    os.flush();</span><br><span class="line">    os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ul>
<li>MultipartResovler 作用<ul>
<li>把客户端上传的文件流转换成 MutipartFile 封装类</li>
<li>通过 MutipartFile 封装类获取到文件流</li>
</ul>
</li>
</ul>
<h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol>
<li><p>编写示例 JSP 文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- enctype 默认值 <span class="string">"application/x-www-form-urlencoded"</span>，表示普通表单数据，即少量文字信息</span><br><span class="line">&lt;!-- <span class="string">"text/plain"</span> 在传输多文字类型数据时使用，如邮件、论文</span><br><span class="line">&lt;!-- <span class="string">"multipart/form-data"</span> 表示表单中包含二进制文件内容 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"upload"</span> enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置示例 springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MultipartResovler 解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件最大允许值，单位：kb，如超出，则报 MaxUploadSizeExceededException 异常 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 异常解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.springframework.web.multipart.MaxUploadSizeExceededException"</span>&gt;</span></span><br><span class="line">                /error.jsp</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写示例控制器方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file, String name)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String fileName = file.getOriginalFilename();</span><br><span class="line">    String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">// 判断上传文件类型</span></span><br><span class="line">    <span class="keyword">if</span> (suffix.equalsIgnoreCase(<span class="string">".png"</span>)) &#123;</span><br><span class="line">        String uuid = UUID.randomUUID().toString();</span><br><span class="line">        FileUtils.copyInputStreamToFile(file.getInputStream(), </span><br><span class="line">                                        <span class="keyword">new</span> File(<span class="string">"E:/"</span> + uuid + suffix));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="拦截器-HandlerInterceptor"><a href="#拦截器-HandlerInterceptor" class="headerlink" title="拦截器 HandlerInterceptor"></a>拦截器 HandlerInterceptor</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>拦截器是跟过滤器非常像的技术，它的作用是拦截对控制器的请求，在控制器的前后添加额外的功能。</p>
<h4 id="辨析"><a href="#辨析" class="headerlink" title="辨析"></a>辨析</h4><ul>
<li>拦截器 HandlerInterceptor 只能拦截对控制器 Controller 的请求</li>
<li>过滤器 Filter 可以拦截任何请求</li>
<li>AOP 针对的是特定方法，是在方法层面的扩充</li>
</ul>
<h4 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol>
<li><p>新建类实现 HandlerInterceptor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest req, HttpServletResponse res, Object arg2)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">// 在进入控制器之前执行，如果返回 false，则阻止进入控制器</span></span><br><span class="line">     String uri = req.getRequestURI();</span><br><span class="line">     <span class="keyword">if</span> (uri.equals(<span class="string">"/springmvc03/login"</span>)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         Object obj = req.getSession().getAttribute(<span class="string">"users"</span>);</span><br><span class="line">         <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         res.sendRedirect(<span class="string">"/springmvc03/login.jsp"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, </span></span></span><br><span class="line"><span class="function"><span class="params">                           Object arg2, ModelAndView arg3)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">// 在控制器执行完成，进入 JSP 之前执行。可用作日志记录、敏感词汇过滤等</span></span><br><span class="line">     System.out.println(<span class="string">"往"</span> + arg3.getViewName + <span class="string">"跳转"</span>);</span><br><span class="line">     System.out.println(<span class="string">"model的值"</span> + arg3.getModel().get(<span class="string">"model"</span>));</span><br><span class="line">     String word = arg3.getModel().get(<span class="string">"model"</span>).toString();</span><br><span class="line">     String newWord = word.replace(<span class="string">"祖国"</span>, <span class="string">"**"</span>);</span><br><span class="line">     arg3.getModel.put(<span class="string">"model"</span>, newWord);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, </span></span></span><br><span class="line"><span class="function"><span class="params">                                Object arg2, Exception arg3)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">// 在 JSP 执行之后执行，纪录执行过程中出现的异常（如果没有异常，arg3 == null）</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 springmvc.xml 拦截所有控制器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.interceptor.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 springmvc.xml 拦截特定 URL 的办法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/demo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/demo2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.interceptor.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="拦截器栈"><a href="#拦截器栈" class="headerlink" title="拦截器栈"></a>拦截器栈</h4><p>多个拦截器同时生效，执行的顺序跟在 springmvc.xml 中配置的顺序有关，即先进后出。</p>
<p>举个例子，在 springmvc.xml 中先配置了拦截器 A，然后配置了拦截器 B，则执行顺序为：preHandle(A) → preHandle(B) → 控制器方法→ postHandle(B) → postHandle(A) → JSP → afterCompletion(B) → afterCompletion(A)</p>
<h3 id="Spring-MVC-对-Date-类型转换"><a href="#Spring-MVC-对-Date-类型转换" class="headerlink" title="Spring MVC 对 Date 类型转换"></a>Spring MVC 对 Date 类型转换</h3><ol>
<li><p>xml 方式，在 springmvc.xml 中配置，必须额外导入 joda-time.jar，时间类型是 java.sql.Date</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"registerDefaultFormatters"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatters"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.number</span></span></span><br><span class="line"><span class="tag"><span class="string">                         .NumberFormatAnnotationFormatterFactory"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatterRegistrars"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.datetime.joda</span></span></span><br><span class="line"><span class="tag"><span class="string">                         .JodaTimeFormatterRegistrar"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormatter"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.datetime.joda</span></span></span><br><span class="line"><span class="tag"><span class="string">                                 .DateTimeFormatterFactoryBean"</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span> /&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注解方式，不需要导入额外 JAR 包，时间类型是 java.util.Date</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@DateTimeFormat(pattern = <span class="string">"yyyy-MM-dd"</span>)</span> Date time) </span>&#123;</span><br><span class="line"> System.out.println(time);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"abc.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓等价于↑</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(Demo1 demo)</span> </span>&#123;</span><br><span class="line"> System.out.println(demo);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"abc.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="Spring-MVC-运行原理-1"><a href="#Spring-MVC-运行原理-1" class="headerlink" title="Spring MVC 运行原理"></a>Spring MVC 运行原理</h3><p>如果在 web.xml 中设置 DispatcherServlet 的 &lt;url-pattern&gt; 为 “/“ 时，当用户发起请求，请求一个控制器，首先会执行 DispatcherServlet，由 DispatcherServlet 调用 HandlerMapping 接口的实现类 DefaultAnnotationHandlerMapping 来解析 URL，解析后凭借 HandlerAdatper 接口的实现类 AnnotationMethodHandlerAdapter 调用 Controller 中的 HandlerMethod。当 HandlerMethod 执行完成后会返回一个 View，此 View 会被 ViewResolver 进行视图解析，解析后调用 JSP 对应的 .class 文件并运行，最终把运行 .class 文件的结果响应给客户端。</p>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 速览</title>
    <url>/2017/12/27/Spring-%E9%80%9F%E8%A7%88/</url>
    <content><![CDATA[<h3 id="Spring-框架简介"><a href="#Spring-框架简介" class="headerlink" title="Spring 框架简介"></a>Spring 框架简介</h3><h4 id="主要发明者"><a href="#主要发明者" class="headerlink" title="主要发明者"></a>主要发明者</h4><p>Rod Johnson，提倡不要重复发明轮子，Spring 的宗旨：让原有的技术使用起来更方便。</p>
<h4 id="Spring-框架核心功能"><a href="#Spring-框架核心功能" class="headerlink" title="Spring 框架核心功能"></a>Spring 框架核心功能</h4><ul>
<li><p>IoC/DI</p>
</li>
<li><p>AOP</p>
</li>
<li><p>声明式事务</p>
</li>
</ul>
<h4 id="Spring-框架的运行时环境"><a href="#Spring-框架的运行时环境" class="headerlink" title="Spring 框架的运行时环境"></a>Spring 框架的运行时环境</h4><p><img src="https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/images/spring-overview.png" alt=""><a id="more"></a></p>
<ul>
<li><p>Test</p>
</li>
<li><p>Core Container —— 核心容器，Spring 启动的最基本条件</p>
<ul>
<li>Beans</li>
<li>Core</li>
<li>Context</li>
<li>SpEL</li>
</ul>
</li>
<li><p>AOP</p>
</li>
<li><p>Aspect（“AOP 中的 “A”）</p>
</li>
<li><p>Data Access/Integration</p>
<ul>
<li>JDBC</li>
<li>ORM</li>
<li>Transactions</li>
</ul>
</li>
<li><p>Web</p>
<p>例如使用 Tomcat 加载 Spring 配置文件时使用。</p>
</li>
</ul>
<h3 id="Ioc"><a href="#Ioc" class="headerlink" title="Ioc"></a>Ioc</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>将程序员主动通过 new 实例化对象的工作交给 Spring 负责，其最大的作用是<strong>解耦</strong>，解除了对象管理和程序员之间的耦合。</p>
<h4 id="Spring-框架环境搭建"><a href="#Spring-框架环境搭建" class="headerlink" title="Spring 框架环境搭建"></a>Spring 框架环境搭建</h4><ol>
<li><p>导入四个核心 JAR 包</p>
</li>
<li><p>在 src 下面新建 applicationContext.xml</p>
<ul>
<li>文件名和路径其实可以自定义</li>
<li>applicationContext.xml 文件中配置的信息最终存储到了 Spring 容器 ApplicationContext 中</li>
<li>配置文件需要引入 schema<ul>
<li>schema 文件的拓展名是 .xsd</li>
<li>比 DTD 具有更好的拓展性</li>
<li>每次引入一个 .xsd 文件就是引入一个 namespace</li>
</ul>
</li>
</ul>
</li>
<li><p>通过 applicationContex.xml 文件创建对象：</p>
<ul>
<li><p>通过 &lt;bean …/&gt; 指定对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.People"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 Spring 实例化对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   ApplicationContext ac = <span class="keyword">new</span> </span><br><span class="line">        ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">// 如果在 getBean() 方法中没有第二个参数，就会返回 Object 类型</span></span><br><span class="line">   People people = ac.getBean(<span class="string">"peo"</span>, People<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   System.out.println(people);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="Spring-创建对象的三种方式"><a href="#Spring-创建对象的三种方式" class="headerlink" title="Spring 创建对象的三种方式"></a>Spring 创建对象的三种方式</h4><ol>
<li><p>通过构造方法创建对象</p>
<ul>
<li><p>通过无参构造方法创建（即上文中的那种）</p>
</li>
<li><p>通过有参构造方法创建</p>
<ul>
<li><p>需要在 POJO 中提供类的有参构造方法</p>
</li>
<li><p>在 applicationContext.xml 文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.People"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认匹配最后一个符合条件的构造方法，可通过 name、type 精确指定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>通过实例工厂创建对象</p>
<ul>
<li><p>首先需要有一个实例工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> People <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> People(<span class="number">1</span>, <span class="string">"测试"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 applicationContext.xml 文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.PeopleFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo1"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> </span><br><span class="line">        ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">People people = ac.getBean(<span class="string">"peo1"</span>, People<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(people);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过静态工厂创建对象</p>
<ul>
<li><p>首先需要一个静态工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> People <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> People(<span class="number">1</span>, <span class="string">"测试"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 applicationContext.xml 文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo2"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.PeopleFactory"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> </span><br><span class="line">        ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">People people = ac.getBean(<span class="string">"peo2"</span>, People<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(people);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="给-Bean-的属性赋值"><a href="#给-Bean-的属性赋值" class="headerlink" title="给 Bean 的属性赋值"></a>给 Bean 的属性赋值</h4><ol>
<li><p>通过构造方法设置值（如上文所述）</p>
</li>
<li><p>设置注入</p>
<ul>
<li><p>属性是基本数据类型或者是 String 等简单类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.People"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"222"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ↑等价于↓ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.People"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性是 Set&lt;?&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sets"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性是 List&lt;?&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当 List 中只有一个元素时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 正常状态下的 List --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"strs"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性是数组</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"strs"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性是 Map<?, ?></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"c"</span> <span class="attr">value</span>=<span class="string">"d"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性是 Properties 类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"key"</span>&gt;</span>value<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"key1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h4><ul>
<li><p>作用</p>
<p>DI 和 IoC 其实差不多，实际上就是当一个类（A）中的属性依赖于另一个类（B）的对象时，把 B 赋值给 A 的过程就叫做依赖注入。</p>
</li>
<li><p>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"peo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.People"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"desk"</span> <span class="attr">ref</span>=<span class="string">"desk"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"desk"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.pojo.Desk"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"12"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="使用-Spring-简化-MyBatis"><a href="#使用-Spring-简化-MyBatis" class="headerlink" title="使用 Spring 简化 MyBatis"></a>使用 Spring 简化 MyBatis</h3><h4 id="导入所需的-JAR-包"><a href="#导入所需的-JAR-包" class="headerlink" title="导入所需的 JAR 包"></a>导入所需的 JAR 包</h4><p>包括 MyBatis 的所有 JAR 包和 Spring 的基本 JAR 包，以及 spring-jdbc、spring-tx、spring-aop、spring-web、mybatis-spring</p>
<h4 id="配置-web-xml"><a href="#配置-web-xml" class="headerlink" title="配置 web.xml"></a>配置 web.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"3.0"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee                       </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上下文参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring 配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 封装了一个监听器,帮助加载 Spring 的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 由此，Spring 将基于 bean 定义创建一个 WebApplicationContext 对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 并将其存储在 Web 应用程序的 ServletContext中 --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置-Spring-配置文件"><a href="#配置-Spring-配置文件" class="headerlink" title="配置 Spring 配置文件"></a>配置 Spring 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据源封装类（数据源:获取数据库连接，spring-jdbc.jar中） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSouce"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"smallming"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建 SqlSessionFactory 对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接信息来源于 dataSource --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSouce"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描器相当于 mybatis.xml 中 mappers 下 package 标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描 xyz.xijinian.mapper 包后，会给对应接口创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要扫描哪个包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 和factory产生关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 由 Spring 管理 service 实现类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"airportService"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.service.impl.AirportServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"airportMapper"</span> <span class="attr">ref</span>=<span class="string">"airportMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写正常的-POJO"><a href="#编写正常的-POJO" class="headerlink" title="编写正常的 POJO"></a>编写正常的 POJO</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Airport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String portName;</span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPortName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> portName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPortName</span><span class="params">(String portName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.portName = portName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCityName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cityName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityName</span><span class="params">(String cityName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cityName = cityName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Airport [id="</span> + id + <span class="string">", portName="</span> + portName + <span class="string">", cityName="</span> + cityName + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Mapper"><a href="#编写-Mapper" class="headerlink" title="编写 Mapper"></a>编写 Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须使用接口绑定方案或者注解方案（必须有接口）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirportMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from airport"</span>)</span><br><span class="line">    <span class="function">List&lt;Airport&gt; <span class="title">selAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Service-接口和其实现类"><a href="#编写-Service-接口和其实现类" class="headerlink" title="编写 Service 接口和其实现类"></a>编写 Service 接口和其实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirportService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Airport&gt; <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口实现类，需要在这声明 Mapper 接口对象，并生成 get/set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirportServiceImpl</span> <span class="keyword">implements</span> <span class="title">AirportService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AirportMapper airportMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AirportMapper <span class="title">getAirportMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> airportMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAirportMapper</span><span class="params">(AirportMapper airportMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.airportMapper = airportMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Airport&gt; <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> airportMapper.selAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写-Servlet"><a href="#写-Servlet" class="headerlink" title="写 Servlet"></a>写 Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/airport"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirportServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AirportService airportService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// Spring 和 web 整合后所有信息都存放在 webApplicationContext</span></span><br><span class="line">        ApplicationContext ac = WebApplicationContextUtils</span><br><span class="line">            .getRequiredWebApplicationContext(getServletContext());</span><br><span class="line">        airportService = ac.getBean(<span class="string">"airportService"</span>, AirportServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setAttribute(<span class="string">"list"</span>, airportService.show());</span><br><span class="line">        req.getRequestDispatcher(<span class="string">"index.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最后写-JSP"><a href="#最后写-JSP" class="headerlink" title="最后写 JSP"></a>最后写 JSP</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"a"</span>&gt;</span><br><span class="line">        $&#123;a.id&#125; $&#123;a.portName&#125; $&#123;a.cityName&#125;&lt;br /&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>在程序原有的纵向执行流程中，针对某一个或某一些方法添加通知，形成切面过程就叫做<strong>面向切面编程</strong>。它可以无侵入拓展原来代码的功能，非常灵活。</p>
<h4 id="常用概念"><a href="#常用概念" class="headerlink" title="常用概念"></a>常用概念</h4><ul>
<li>切点（Pointcut）：原有功能</li>
<li>前置通知（before advice）：在切点之前执行的功能</li>
<li>后置通知（after advice）：在切点之后执行的功能</li>
<li>异常通知（throws advice）：切点执行过程中出现异常</li>
<li>切面：所有功能的总称</li>
<li>织入：把切面嵌入到原有功能的过程就叫做织入</li>
</ul>
<h4 id="实现-AOP-的两种方式"><a href="#实现-AOP-的两种方式" class="headerlink" title="实现 AOP 的两种方式"></a>实现 AOP 的两种方式</h4><ol>
<li><p>Schema-based</p>
<ul>
<li><p>每个通知都需要实现接口或类</p>
</li>
<li><p>配置 applicationContext.xml 文件时在 &lt;aop:config&gt; 这个标签里面配置</p>
</li>
<li><p>实现步骤</p>
<ol>
<li><p>导入相关 JAR 包</p>
</li>
<li><p>写要被织入通知的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> demo1 &#123;</span><br><span class="line">        System.out.println(<span class="string">"demo1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> demo2 &#123;</span><br><span class="line">        System.out.println(<span class="string">"demo2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> demo3 &#123;</span><br><span class="line">        System.out.println(<span class="string">"demo3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立前置通知以及后置通知类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立前置通知类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// arg0：切点方法对象</span></span><br><span class="line">    <span class="comment">// arg1：切点方法参数</span></span><br><span class="line">    <span class="comment">// arg2：切点在哪个对象中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method arg0, Object[] arg1, Object arg2)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立后置通知类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// arg0：切点方法返回值</span></span><br><span class="line">    <span class="comment">// arg1：切点方法对象</span></span><br><span class="line">    <span class="comment">// arg2：切点方法参数</span></span><br><span class="line">    <span class="comment">// arg3：切点方法所在类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object arg0, Method arg1, Object[] arg2, </span></span></span><br><span class="line"><span class="function"><span class="params">                               Object arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置通知类对象，在切面中引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mybefore"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyBeforeAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myafter"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyAfterAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.test.Demo.demo2())"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"mybefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myafter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Demo 类，测试使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在配置切点那里，第一个"*"声明通配符，如果方法中有参数，可以这样写： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- expression="execution(* xyz.xijinian.test.Demo.*(..))" --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Demo demo = ac.getBean(<span class="string">"demo"</span>, Demo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        demo.demo1();</span><br><span class="line">        demo.demo2();</span><br><span class="line">        demo.demo3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><p>AspectJ</p>
<ul>
<li>每个通知不需要实现接口或类</li>
<li>配置 applicationContext.xml 文件时在 &lt;aop:config&gt; 这个标签的子标签 &lt;aop:aspect&gt; 里面配置</li>
</ul>
</li>
</ol>
<h4 id="配置异常通知（AspectJ）"><a href="#配置异常通知（AspectJ）" class="headerlink" title="配置异常通知（AspectJ）"></a>配置异常通知（AspectJ）</h4><ol>
<li><p>写一个正常的类，将其中一个方法作为切点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不抛出异常也可以，就是异常通知类会获取不到异常信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="title">throws</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span> / <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"demo1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个异常通知类，无需实现接口，方法的名称也随意</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThrowAdvice</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myexception</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"执行异常通知"</span> + e.getMessage());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;aop:aspect&gt; 的 ref 属性表示异常方法在哪个类中</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;aop:xxxx 表示表示什么通知</span></span><br><span class="line"><span class="comment">&lt;!-- method 表示当触发这个通知时，调用哪个方法</span></span><br><span class="line"><span class="comment">&lt;!-- throwing 表示对象名，必须和通知中方法参数名相同（可以不在通知中声明异常对象） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mythrow"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyThrowAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"mythrow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.test.Demo.demo1())"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"myexception"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> <span class="attr">throwing</span>=<span class="string">"e1"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Application application = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Demo demo = application.getBean(<span class="string">"demo"</span>, Demo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            demo.demo1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="配置异常通知（Schema-based）"><a href="#配置异常通知（Schema-based）" class="headerlink" title="配置异常通知（Schema-based）"></a>配置异常通知（Schema-based）</h4><ol>
<li><p>写一个正常的类，将其中一个方法作为切点，代码同 AspectJ 方式配置异常通知</p>
</li>
<li><p>定义一个异常通知类，要实现 <code>ThrowsAdvice</code>，并要求自己写方法 <code>afterThrowing</code>，参数要么四个、要么一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThrow</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Method m, Object[] args, Object target, Exception ex)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"执行异常通知"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"执行异常通过-schema-base 方式 "</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mythrow"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyThrowAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.test.Demo.demo1())"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"mythrow"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写测试类，代码同 AspectJ 方式测试</p>
</li>
</ol>
<h4 id="环绕通知（Schema-based）"><a href="#环绕通知（Schema-based）" class="headerlink" title="环绕通知（Schema-based）"></a>环绕通知（Schema-based）</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>就是把前置通知和后置通知都写到一个通知中</p>
<h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ol>
<li><p>大部分与上诉内容差不多</p>
</li>
<li><p>定义一个环绕通知类，要继承 <code>MethodInterceptor</code>，并且要实现 <code>invoke</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArround</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation arg0)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"环绕-前置"</span>);</span><br><span class="line">        <span class="comment">// 放行，调用切点方式</span></span><br><span class="line">     Object result = arg0.proceed();</span><br><span class="line">     System.out.println(<span class="string">"环绕-后置"</span>);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myarround"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyArround"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.test.Demo.demo1())"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myarround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="AspectJ-实现各种增强通知"><a href="#AspectJ-实现各种增强通知" class="headerlink" title="AspectJ 实现各种增强通知"></a>AspectJ 实现各种增强通知</h4><ol>
<li><p>定义我的通知类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mybefore</span><span class="params">(String name1, <span class="keyword">int</span> age1)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"前置:"</span> + name1);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mybefore1</span><span class="params">(String name1)</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"前置:"</span> + name1);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myaftering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"后置2"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"后置1"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mythrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">myarround</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"环绕前置"</span>);</span><br><span class="line">     Object result = p.proceed();</span><br><span class="line">     System.out.println(<span class="string">"环绕后置"</span>);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;aop:after/&gt; 后置通知，无论是否出现异常都执行</span></span><br><span class="line"><span class="comment">&lt;aop:after-returing/&gt; 后置通知，只有当切点正确执行时</span></span><br><span class="line"><span class="comment">&lt;aop:after/&gt; 和 &lt;aop:after-returing/&gt; 和 &lt;aop:after-throwing/&gt; 执行顺序和配置顺序有关</span></span><br><span class="line"><span class="comment">execution() 的括号不能扩上 args</span></span><br><span class="line"><span class="comment">中间使用'and'不能使用'&amp;&amp;'，由 Spring 把'and'解析成'&amp;&amp;'</span></span><br><span class="line"><span class="comment">args 是自定义的，位数、类型和顺序都要和切点参数对应 </span></span><br><span class="line"><span class="comment">&lt;aop:before/&gt; 中的 arg-names 来源于 expression 中的 args()，它俩名称长度和顺序都要一样</span></span><br><span class="line"><span class="comment">arg-names=”” 里面名称必须和通知方法参数名对应</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myadvice"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myadvice"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.test.Demo.demo1(String,int)) and args(name1,age1)"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.test.Demo.demo1(String)) and args(name1)"</span> <span class="attr">id</span>=<span class="string">"mypoint1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"mybefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> <span class="attr">arg-names</span>=<span class="string">"name1,age1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"mybefore1"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint1"</span> <span class="attr">arg-names</span>=<span class="string">"name1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"myafter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"myaftering"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"mythrow"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myarround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="使用注解（基于-AspectJ）"><a href="#使用注解（基于-AspectJ）" class="headerlink" title="使用注解（基于 AspectJ）"></a>使用注解（基于 AspectJ）</h4><ol>
<li><p>Spring 不会自动寻找注解，必须告诉 Spring 哪些包下的类可能使用注解，告诉的方式是引入 <code>xmlns:context</code> 后使用 <code>&lt;context:component-scan&gt;</code> 标签扫描包名，并且要设置为 cglib 动态代理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xyz.xijinian.advice"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果设置 proxy-target-class="true"，则为 JDK 动态代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在切点所在类和通知类的类名上方使用 <code>@Componet</code> 注解，这样会使得这两个类成为 Bean。如果想自定义 <code>bean id</code> 可以使用 <code>@Componet(&quot;name&quot;)</code>，不写的话 <code>bean id</code> 默认是类名，且将类名首字母小写。</p>
</li>
<li><p>在切点方法的上方使用 <code>@Pointcut</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pointcut</span>(<span class="string">"execution(* xyz.xijinian.test.Demo.demo1())"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"demo1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在通知类的类名上方，使用 <code>@Aspect</code> 注解，并在特定通知方法上面写出特定的注解，如 <code>@Before</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"xyz.xijinian.text.Demo.demo1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mybefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@After</span>(<span class="string">"xyz.xijinian.test.Demo.demo1()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@AfterThrowing</span>(<span class="string">"xyz.xijinian.test.Demo.demo1()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mythrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"异常通知"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Around</span>(<span class="string">"xyz.xijinian.test.Demo.demo1()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">myarround</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"环绕-前置"</span>);</span><br><span class="line">     Object result = p.proceed();</span><br><span class="line">     System.out.println(<span class="string">"环绕-后置"</span>);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h4><p>关于代理的详细资料（包括静态代理以及两种方式的动态代理），可以参考<a href="http://www.cnblogs.com/swiftma/p/6869790.html" target="_blank" rel="noopener">《Java 编程的逻辑》</a>，非常详细。简单抄录一下《Java 编程的逻辑》中提供的例子：</p>
<ol>
<li><p>静态代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleStaticProxyDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceProxy</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IService realService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TraceProxy</span><span class="params">(IService realService)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.realService = realService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"entering sayHello"</span>);</span><br><span class="line">            <span class="keyword">this</span>.realService.sayHello();</span><br><span class="line">            System.out.println(<span class="string">"leaving sayHello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IService realService = <span class="keyword">new</span> RealService();</span><br><span class="line">        IService proxyService = <span class="keyword">new</span> TraceProxy(realService);</span><br><span class="line">        proxyService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JDK 动态代理（基于反射）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJDKDynamicProxyDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object realObj;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SimpleInvocationHandler</span><span class="params">(Object realObj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.realObj = realObj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// proxy 是代理，method 是真实对象的方法，args 是真实对象的方法参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"entering "</span> + method.getName());</span><br><span class="line">            <span class="comment">// 真实对象的方法.invoke(真实的对象, 真实对象的方法参数)</span></span><br><span class="line">            Object result = method.invoke(realObj, args);</span><br><span class="line">            System.out.println(<span class="string">"leaving "</span> + method.getName());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IService realService = <span class="keyword">new</span> RealService();</span><br><span class="line">        <span class="comment">// java.lang.reflect 包中的静态类 Proxy 的 newProxyInstance 方法有三个参数</span></span><br><span class="line">        <span class="comment">// ① 类加载器；②真实对象的所有的接口；③一个 InvocationHandler 接口类型（与 Proxy 同包）</span></span><br><span class="line">        <span class="comment">// InvocationHandler 接口只定义了一个方法 invoke，对代理接口所有方法的调用都会转给该方法</span></span><br><span class="line">        IService proxyService = (IService)Proxy.newProxyInstance(</span><br><span class="line">            IService<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line">            new Class&lt;?&gt;[] &#123; IService.class &#125;, </span><br><span class="line">            <span class="keyword">new</span> SimpleInvocationHandler(realService)</span><br><span class="line">        );</span><br><span class="line">        proxyService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cglib 动态代理（基于字节码、继承）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCGLibDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RealService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// object —— 代理对象</span></span><br><span class="line">        <span class="comment">// method —— 真实对象的方法</span></span><br><span class="line">        <span class="comment">// args —— 真实对象方法的参数</span></span><br><span class="line">        <span class="comment">// proxy —— 代理对象重写父类的同名方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">                Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"entering "</span> + method.getName());</span><br><span class="line">            <span class="comment">// 代理对象的方法.invokeSuper(代理对象, 真实对象方法的参数)</span></span><br><span class="line">            Object result = proxy.invokeSuper(object, args);</span><br><span class="line">            System.out.println(<span class="string">"leaving "</span> + method.getName());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(cls);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> SimpleInterceptor());</span><br><span class="line">        <span class="keyword">return</span> (T) enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RealService proxyService = getProxy(RealService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        proxyService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>列举一个在 applicationContext.xml 文件中的常见代码，我们会发现，有时候一些 property 的 name 和 ref 相等，这样写有点重复，这时候我们就可以使用<strong>自动注入</strong>来简化。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"smallming"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessinFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"usersService"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.service.impl.UsersServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usersMapper"</span> <span class="attr">ref</span>=<span class="string">"usersMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mybefore"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyBefore"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myafter"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.advice.MyAfter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.service.impl.UsersServiceImpl.login(..))"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"mybefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myafter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span></span></span><br><span class="line">        &lt;!-- default-autowire="no" （不写就这样默认）--&gt;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.People"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个 default 是默认（不写就这样默认），表示从 &lt;beans&gt; 标签中获取 default-autowire 的值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="people" class="xyz.xijinian.test.People" autowire="default"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.People"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;beans&gt;</code> 标签的 <code>default-autowire</code> 中，可选的属性是 <code>byName</code>、<code>byType</code>、<code>constructor</code>、<code>no</code>(默认)；在 <code>&lt;bean&gt;</code> 标签的 <code>autowire</code> 中，可选的属性是 <code>default</code>(默认)、<code>byName</code>、<code>byType</code>、<code>constructor</code>、<code>no</code>。其他都好理解，再说说 <code>constructor</code>，使用它一定要有构造方法（带 ref 的类型参数），实际上，它使用的是 <code>byName</code>。</p>
<h3 id="使用属性文件"><a href="#使用属性文件" class="headerlink" title="使用属性文件"></a>使用属性文件</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>为了部署方便，可以将 applicationContext.xml 文件中的属性部分提取到一个属性文件中，这样方便修改，部署维护起来会更容易。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>① 给 applicationContext.xml 加一个标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如需多个文件，就用逗号隔开 --&gt;</span></span><br><span class="line">  → <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"smallming"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessinFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>② 在 src 文件夹下新建一个 db.properties 文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">smallming</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>③ 将 applicationContext.xml 中的硬编码替换为属性文件中的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如需多个文件，就用逗号隔开 --&gt;</span></span><br><span class="line">  → <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessinFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"xyz.xijinian.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果使用属性文件并且设置全局自动注入时，就有一个小坑——全局自动注入优先级太高，它会自动加载两种 bean：① 被设置为自动注入的 bean、② 存在 <code>ref</code> 注入其他类的 bean。这导致在实例化 DriverManagerDataSource （datasouce）时，<code>&lt;context:property-placeholder&gt;</code> 标签还未加载。解决办法是：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">↓ 替换为 ↑</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="一个小-tip"><a href="#一个小-tip" class="headerlink" title="一个小 tip"></a>一个小 tip</h4><p>只要一个类被 Spring 管理，我们就可以在这个类中取到属性文件的值，步骤：</p>
<p>① 在 src 目录下建立一个属性文件 demo.xml，里面放一个键值对</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">my.demo=hello</span><br></pre></td></tr></table></figure>

<p>② 在 applicationContext.xml 引入这个属性文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">↓ 替换为 ↑</span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties,demo.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>③ 在某一被 Spring 管理的类中使用注解获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;my.demo&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺便说一句，为了使注解生效，需要在 Spring 配置文件中扫描注解：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xyz.xijinian.service.ipml"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="scope-属性"><a href="#scope-属性" class="headerlink" title="scope 属性"></a>scope 属性</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>控制对象是单例还是多例（通过 Spring 获取 bean 对象的时候，默认一个 bean 只产生一个对象，无论 getBean 多少次）</p>
<h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><p>就是在 <code>&lt;bean&gt;</code> 标签后面加一个属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"xyz.xijinian.test.Teacher"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><ul>
<li>singleton（默认）</li>
<li>prototype</li>
<li>request</li>
<li>session</li>
<li>application</li>
<li>global session（依赖于 Spring 的 spring-webmvc-portlet）</li>
</ul>
<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>提升运行效率，实现数据共享</p>
<h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>对象只有被调用的时候，才会被创建（因为加了锁，所以效率可能会低 ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getIntance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleTon<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reture singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>无论对象是否被调用，都先创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getIntance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reture singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><h4 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h4><p>就是指程序员自己写代码来控制事务，如 OpenSessionInView。</p>
<h4 id="声明式事务-1"><a href="#声明式事务-1" class="headerlink" title="声明式事务"></a>声明式事务</h4><p>事务控制代码已经由 Spring 写好，程序员只需要声明出哪些方法需要进行事务控制和如何进行事务控制。它主要针对于 ServiceImpl 类下的方法。Spring 事务管理器是基于通知（advice）的。</p>
<h4 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default-autowire</span>=<span class="string">"beName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties,</span></span></span><br><span class="line"><span class="tag"><span class="string">                                            classpath:second.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.sf.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"ins*"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"upd*"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* xyz.xijinian.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"mypoint"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="声明式事务属性解释"><a href="#声明式事务属性解释" class="headerlink" title="声明式事务属性解释"></a>声明式事务属性解释</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"ins*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"upd*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">readonly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>name：表示需要有事务控制的方法，其中的字符串支持“*”通配符</p>
</li>
<li><p>readonly：是否为只读事务（区别提交事务），提交事务在数据库的内部可能需要有一些事务锁之类的机制，速度比较慢。如果将事务设置为只读事务，数据库内部可能会自动优化，如果是查询的功能，建议使用只读事务。如果不写，readonly=”false” 是默认值，比较适合增删改的操作。</p>
</li>
<li><p>propagation：控制事务传播行为——当一个具有事务控制的方法被另一个有事务控制的方法调用后，需要如何管理事务（新建事务？在事务中执行？事务挂起？报异 常？）</p>
<ul>
<li>REQUIRED（默认值），在当前的事务中执行，如果当前没有事务，就新建一个事务。</li>
<li>SUPPORTS，在当前的事务中执行，如果当前没有事务，就在非事务状态下执行。</li>
<li>MANDATORY，必须在事务内部执行，如果当前有事务，就在事务中执行，如果没有事务，报错。</li>
<li>REQUIRES_NEW，必须在事务中执行，如果当前没有事务，新建事务，如果当前有事务，把当前事务挂起。</li>
<li>NOT_SUPPORTED，必须在非事务下执行，如果当前没有事务，正常执行，如果当前有事务，把当前事务挂起。</li>
<li>NEVER，必须在非事务状态下执行，如果当前没有事务，正常执行，如果当前有事务，报错。</li>
<li>NESTED：必须在事务状态下执行，如果没有事务，新建事务，如果当前有事务，创建一个嵌套事务（虽然一个事务包含了另一个事务，但是如果执行完出错也会直接回滚到事务最初点）。</li>
</ul>
</li>
<li><p>isolation：事务隔离级别——在多线程或并发访问下如何保证访问到的数据具有完整性。</p>
<ul>
<li><p>下面强调几个概念</p>
<ul>
<li><p><strong>脏读</strong>：事务 B 修改数据库→事务 A 读取事务 B 修改过的值→事务 B 提交失败回滚→事务 A 读取到了脏数据。</p>
<p>解决办法：<strong>一个事务修改数据的时候另一个事务不可以进行读取</strong>。</p>
</li>
<li><p><strong>不可重复读</strong>：事务 A 读取数据→事务 B 修改数据并提交→事务 A 再读数据，发现两次读取的数据不一样。</p>
<p>解决办法：<strong>一个事务读取数据的时候另一个事务不可以进行修改</strong>。</p>
</li>
<li><p><strong>幻读</strong>：事务 A 读取数据→事务 B 插入（或删除）数据并提交→事务 A 再读数据，发现之前读少（多）了一行。</p>
<p>解决办法：<strong>一个事务读取和修改数据的时候另一个事务不可以插入和删除数据</strong>。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>isolation 的属性</p>
<ul>
<li>DEFAULT（默认）：由底层数据库自动判断应该使用什么隔离级别。</li>
<li>READ_UNCOMMITTED：可以读取未提交数据，可能出现脏读、不可重复读、幻读，当然这效率最高。</li>
<li>READ_COMMITTED：只能读取其他事务已提交数据，可以防止脏读，可能出现不可重复读和幻读。</li>
<li>REPEATABLE_READ：读取的数据被添加锁，防止其他事务修改此数据，可以防止脏读和不可重复读，可能出现幻读。</li>
<li>SERIALIZABLE：排队操作，对整个表添加锁。一个事务在操作数据时，另一个事务等待事务操作完成后才能操作这个表。最安全的，效率也是最低。</li>
</ul>
</li>
</ul>
<ol start="5">
<li><p>rollback-for：异常类型全限定路径——当出现什么异常时需要进行回滚？</p>
<ul>
<li>建议给定该属性值</li>
<li>手动抛异常一定要给该属性值.</li>
</ul>
</li>
<li><p>no-rollback-for：当出现什么异常时不滚回事务</p>
</li>
</ol>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul>
<li><p>@Component 创建类对象，相当于配置<code>&lt;bean&gt;</code></p>
</li>
<li><p>@Service 与 @Component 功能相同，写在 ServiceImpl 类上</p>
</li>
<li><p>@Repository 与 @Component 功能相同，写在数据访问层类上</p>
</li>
<li><p>@Controller 与 @Component 功能相同，写在控制器类上</p>
</li>
<li><p>@Resource（不需要写对象的 get/set）</p>
<ul>
<li>JDK 中的注解</li>
<li>默认按照 byName 注入，如果没有名称对象，按照 byType 注入，建议把对象名称和 spring 容器中对象名相同 </li>
</ul>
</li>
<li><p>@Autowired（不需要写对象的 get/set）</p>
<ul>
<li>Spring 中的注解</li>
<li>默认按照 byType 注入</li>
</ul>
</li>
<li><p>@Value() 获取 properties 文件中内容</p>
</li>
<li><p>@Pointcut() 定义切点</p>
</li>
<li><p>@Aspect() 定义切面类</p>
</li>
<li><p>@Before() 前置通知</p>
</li>
<li><p>@After 后置通知</p>
</li>
<li><p>@AfterReturning 后置通知（必须切点正确执行）</p>
</li>
<li><p>@AfterThrowing 异常通知</p>
</li>
<li><p>@Arround 环绕通知</p>
</li>
</ul>
<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>写一个例子，使用 Jackon 和 JQuery</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script type="text/javascript" src="js/jquery-1.7.2.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    url: 请求服务器地址</span></span><br><span class="line"><span class="comment">    data:请求参数</span></span><br><span class="line"><span class="comment">    dataType:服务器返回数据类型</span></span><br><span class="line"><span class="comment">    error请求出错执行的功能</span></span><br><span class="line"><span class="comment">    success请求成功执行的功能,function(data) data服务器返回的数据.</span></span><br><span class="line"><span class="comment">    type:请求方式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    $(<span class="string">"a"</span>).click(function()&#123;</span><br><span class="line">        <span class="comment">/* $.ajax(&#123;</span></span><br><span class="line"><span class="comment">            url:'demo',</span></span><br><span class="line"><span class="comment">            data:&#123;"name":"张三"&#125;,</span></span><br><span class="line"><span class="comment">            dataType:'html',</span></span><br><span class="line"><span class="comment">            error:function()&#123;</span></span><br><span class="line"><span class="comment">                alert("请求出错.")</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            success:function(data)&#123;</span></span><br><span class="line"><span class="comment">                alert("请求成功"+data)</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            type:'POST'</span></span><br><span class="line"><span class="comment">        &#125;); */</span></span><br><span class="line">        $.post(<span class="string">"demo"</span>,&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>&#125;,function(data)&#123;</span><br><span class="line">            <span class="keyword">var</span> result=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i&lt;data.length;i++)&#123;</span><br><span class="line">                result+=<span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">                result+=<span class="string">"&lt;td&gt;"</span>+data[i].id+<span class="string">"&lt;/td&gt;"</span></span><br><span class="line">                result+=<span class="string">"&lt;td&gt;"</span>+data[i].username+<span class="string">"&lt;/td&gt;"</span></span><br><span class="line">                result+=<span class="string">"&lt;td&gt;"</span>+data[i].password+<span class="string">"&lt;/td&gt;"</span></span><br><span class="line">                result+=<span class="string">"&lt;/tr&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//相当innerHTML先清空后添加</span></span><br><span class="line">            $(<span class="string">"#mytbody"</span>).html(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="demo"&gt;跳转&lt;/a&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tbody id="mytbody"&gt;&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行控制器"</span>);</span><br><span class="line">        String name = req.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        Users users = <span class="keyword">new</span> Users();</span><br><span class="line">        users.setId(<span class="number">1</span>);</span><br><span class="line">        users.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        users.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">        Users users1 = <span class="keyword">new</span> Users();</span><br><span class="line">        users1.setId(<span class="number">2</span>);</span><br><span class="line">        users1.setPassword(<span class="string">"22"</span>);</span><br><span class="line">        users1.setUsername(<span class="string">"李四"</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> ArrayList&lt;Users&gt;();</span><br><span class="line">        list.add(users1);</span><br><span class="line">        list.add(users);</span><br><span class="line">        </span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String result = mapper.writeValueAsString(list);</span><br><span class="line">        </span><br><span class="line">        resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(result);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>XML 配置</title>
    <url>/2017/11/30/XML-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ul>
<li><p>XML 配置文件（即上文中的 <code>mybatis-config.xml</code>）中包含了对 MyBatis 系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）。其总配置选项如下：<a id="more"></a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个 XML Mapper 下面就说--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"xyz/xijinian/mybatisdemo/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-------------------其中可配置的选项如下--------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  properties 属性</span></span><br><span class="line"><span class="comment">  settings 设置</span></span><br><span class="line"><span class="comment">  typeAliases 类型别名</span></span><br><span class="line"><span class="comment">  typeHandlers 类型处理器</span></span><br><span class="line"><span class="comment">  objectFactory 对象工厂</span></span><br><span class="line"><span class="comment">  plugins 插件</span></span><br><span class="line"><span class="comment">  environments 环境</span></span><br><span class="line"><span class="comment">    environment 环境变量</span></span><br><span class="line"><span class="comment">      transactionManager 事务管理器</span></span><br><span class="line"><span class="comment">      dataSource 数据源</span></span><br><span class="line"><span class="comment">  databaseIdProvider 数据库厂商标识</span></span><br><span class="line"><span class="comment">  mappers 映射器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>properties</code> 属性，这些属性都是可外部配置（<code>config.properties</code>）且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递，这样就带来了很多灵活性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 mybatis-config.xml 中配置 properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"xyz/xijinian/mybatisdemo/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以再接下来的其它配置文件或者 Java 代码中使用，如： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 你可以为占位符指定一个默认值（自 MyBatis 3.4.2），不过这个功能是默认关闭的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"xyz/xijinian/mybatisdemo/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis.parsing.PropertyParser.enable-default-value"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果 'username' 特性没有实现，就默认使用 'ut_user' --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username:ut_user&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：</span></span><br><span class="line"><span class="comment">  ① 在 properties 元素体内指定的属性首先被读取。</span></span><br><span class="line"><span class="comment">  ② 然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。</span></span><br><span class="line"><span class="comment">  ③ 最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。</span></span><br><span class="line"><span class="comment">  即，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>settings</code> 设置，一个配置文件示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 比较常用的一个配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>typeAliases</code> 类型别名，为一些长字符串起别名：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Author"</span> <span class="attr">type</span>=<span class="string">"xyz.xijinian.pojo.Author"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Blog"</span> <span class="attr">type</span>=<span class="string">"xyz.xijinian.pojo.Blog"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定包名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"xyz.xijinian.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>typeHandlers</code>，类型处理器</p>
</li>
<li><p><code>objectFactory</code>，对象工厂</p>
</li>
<li><p><code>plugins</code>，插件</p>
</li>
<li><p><code>environments</code>，配置环境。</p>
<ul>
<li><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。但是，每个  <code>SqlSessionFactory</code> 实例只能选择其一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果忽略了环境参数，那么默认环境将会被加载</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, properties);</span><br></pre></td></tr></table></figure>
</li>
<li><p>环境元素定义了如何配置环境：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">value</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis 支持两种事务管理器：<br>① JDBC——直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域；<br>② MANAGED——它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期，默认情况下它会关闭连接，然而一些容器并不希望这样，可以这样设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"MANAGED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"closeConnection"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p>
</li>
<li><p>数据源</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 入门</title>
    <url>/2017/11/30/MyBatis-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<ul>
<li><p>第一步当然是制作 XML 文件，名字没什么要求，比如可以叫做——<code>mabatis-config.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个 XML Mapper 下面就说--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"xyz/xijinian/mybatisdemo/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>第二步，关于 <code>xyz/xijinian/mybatisdemo/mapper/BlogMapper.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xyz.xijinian.mabatisdemo.mapper.BlogMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步就是用 XML 文件构建 <code>SqlSessionFactory</code>，不过首先要先构建 <code>SqlSessionFactoryBuilder</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">"xyz/xijinian/mybatisdemo/mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第四步用 <code>SqlSessionFactory</code> 生产 <code>SqlSession</code>：</p>
<ul>
<li><p>老方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Blog blog = (Blog) session.selectOne(<span class="string">"xyz.xijinian.mybatisdemo.mapper.BlogMapper.selectBlog"</span>, <span class="number">101</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新方式（更清晰和类型安全的代码，而且还不用担心易错的字符串字面值以及强制类型转换）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>说一些需要注意的事：</p>
<ul>
<li><p>MyBatis 其实提供了很多注解的方式（虽然我个人认为对于 MyBatis 还是 XML 文件比较方便）,如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代替 BlogMapper.xml</span></span><br><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM blog WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最佳实践：</p>
<ul>
<li><p><code>SqlSessionFactoryBuilder</code>实例的最佳作用域是方法作用域（也就是局部方法变量），最好不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情。</p>
</li>
<li><p><code>SqlSessionFactory</code> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p>
</li>
<li><p>每个线程都应该有它自己的 <code>SqlSession</code> 实例。<code>SqlSession</code> 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。每次收到的 HTTP 请求，就可以打开一个 <code>SqlSession</code>，返回一个响应，就关闭它。这个关闭操作是很重要的，可以再 <code>finally</code> 中关闭。</p>
</li>
<li><p>映射器接口的实例是从 <code>SqlSession</code> 中获得的。因此从技术层面讲，任何映射器实例的最大作用域是和请求它们的 SqlSession 相同的。尽管如此，映射器实例的最佳作用域是方法作用域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// do work</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>一起学习 Listener</title>
    <url>/2017/11/26/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0-Listener/</url>
    <content><![CDATA[<ul>
<li>Listener：用于监听 JSP 隐式对象 application 的创建和销毁，以及在其上 attribute 发生的变化。除此之外，它还能监视 JSP 隐式对象 session 和 request 的生命周期，以及其上 attribute 发生的变化。</li>
<li>监听 Context：<ul>
<li>配置 web.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.ContextAttributeListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>编写 ContextAttributeListener.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextAttributeListener</span> <span class="keyword">implements</span> <span class="title">ServletContextAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"增加属性"</span>);</span><br><span class="line">        System.out.println(<span class="string">"属性是"</span> + e.getName());</span><br><span class="line">        System.out.println(<span class="string">"值是"</span> + e.getValue());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"移除属性"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"替换属性"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>测试文件 testContext.jsp：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    application.setAttribute(<span class="string">"test"</span>, <span class="number">1</span>);</span><br><span class="line">    application.setAttribute(<span class="string">"test"</span>, <span class="number">2</span>);</span><br><span class="line">    application.removeAttribute(<span class="string">"test"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>监听 session：<ul>
<li>监听 Session 的创建和销毁：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"监听到 session 创建, sessionid 是："</span> + e.getSession().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"监听到 session 销毁, sessionid 是："</span> + e.getSession().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->   </li>
<li>监听 Session 的属性：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributeListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"session 增加属性"</span>);</span><br><span class="line">        System.out.println(<span class="string">"属性是"</span> + e.getName());</span><br><span class="line">        System.out.println(<span class="string">"值是"</span> + e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"session 移除属性"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"session 替换属性"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>配置 web.xml：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.SessionAttributeListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.SessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>测试用的 JSP：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    session.setAttribute(<span class="string">"test"</span>, <span class="number">1</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"test"</span>, <span class="number">2</span>);</span><br><span class="line">    session.removeAttribute(<span class="string">"test"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>监听 request：<ul>
<li>监听 request 的创建、销毁以及属性的改变：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span>, <span class="title">ServletRequestAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent arg0)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁了一个Request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent arg0)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建了一个Request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"request 增加属性"</span>);</span><br><span class="line">        System.out.println(<span class="string">"属性是"</span> + e.getName());</span><br><span class="line">        System.out.println(<span class="string">"值是"</span> + e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent arg0)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"request 移除属性"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent arg0)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"request 替换属性"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>配置 web.xml：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.RequestListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>测试用 JSP：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">"test"</span>, <span class="number">1</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"test"</span>, <span class="number">2</span>);</span><br><span class="line">    request.removeAttribute(<span class="string">"test"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>一个小例子——统计在线人数：<ul>
<li>编写 OnlineNumberListener.java：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineNumberListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">        ServletContext application = e.getSession().getServletContext();</span><br><span class="line">        Integer online_number = (Integer) application.getAttribute(<span class="string">"online_number"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == online_number) online_number = <span class="number">0</span>;</span><br><span class="line">        online_number++;</span><br><span class="line">        application.setAttribute(<span class="string">"online_number"</span>, online_number);</span><br><span class="line">        System.out.println(<span class="string">"新增一位在线用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">        ServletContext application = e.getSession().getServletContext();</span><br><span class="line">        Integer online_number = (Integer) application.getAttribute(<span class="string">"online_number"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == online_number) &#123;</span><br><span class="line">            online_number = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            online_number--;</span><br><span class="line">        &#125;</span><br><span class="line">        application.setAttribute(<span class="string">"online_number"</span>, online_number);</span><br><span class="line">        System.out.println(<span class="string">"一位用户离线"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>配置 web.xml：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.OnlineNumberListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>测试：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line"></span><br><span class="line">当前 在线人数 ： $&#123;online_number&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Filter</title>
    <url>/2017/11/26/%E5%85%B3%E4%BA%8E-Filter/</url>
    <content><![CDATA[<ul>
<li>Filter 的中文名字是<strong>过滤器</strong>，它的功能显而易见：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1flvi29q641j30e206cjr6.jpg" alt=""><a id="more"></a></li>
<li>一个简单的 Filter 实现：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        String ip = request.getRemoteAddr();</span><br><span class="line">        String url = request.getRequestURL().toString();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        String date = sdf.format(d);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"%s %s 访问了 %s%n"</span>, date, ip, url);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>配置 web.xml 文件，注意——<code>/*</code>表示过滤所有访问，<code>*.jsp</code>表示只过滤 JSP 文件：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.FirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>init()</code>方法——与 Servlet 需要配置自启动才会随着 tomcat 的启动而执行<code>init()</code>方法不一样，Filter 一定会随着 tomcat 的启动而自启动。Filter 是 web 应用非常重要的一个环节，如果 Filter 启动失败，或者本身有编译错误，不仅这个 Filter 不能使用，整个 web 应用会启动失败。</li>
<li>我们之前在 Servlet 中用<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>进行中文处理，这样做的弊端是需要每个 Servlet 中都需要进行中文处理，有一个简便的办法，那就是通过 Filter 过滤器进行中文处理，那么所有的 Servlet 都不需要单独处理了：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>用 Filter 验证登录：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果访问的资源是以css或者js结尾的，那么就不需要判断是否登录</span></span><br><span class="line">        <span class="keyword">if</span> (uri.endsWith(<span class="string">".css"</span>) || uri.endsWith(<span class="string">".js"</span>)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (uri.endsWith(<span class="string">"login.html"</span>) || uri.endsWith(<span class="string">"login"</span>)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String userName = (String) request.getSession().getAttribute(<span class="string">"userName"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userName) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"login.html"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘的高级操作技巧</title>
    <url>/2017/11/25/%E9%94%AE%E7%9B%98%E7%9A%84%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><strong>超常用</strong>：</p>
<ul>
<li><code>clear</code>           ——清空屏幕</li>
<li><code>history</code>         ——显示历史列表内容</li>
</ul>
<p><strong>移动光标</strong>：</p>
<ul>
<li><code>Ctrl + a</code>        ——移动光标到行首</li>
<li><code>Ctrl + e</code>        ——移动光标到行尾</li>
<li><code>Ctrl + f</code>        ——相当于右箭头</li>
<li><code>Ctrl + b</code>        ——相当于左箭头</li>
<li><code>Alt + f</code>         ——光标向前移一个字<a id="more"></a></li>
<li><code>Alt + b</code>         ——光标向后移一个字</li>
<li><code>Ctrl-l</code>          ——相当于<code>clear</code></li>
</ul>
<p><strong>修改文本</strong>：</p>
<ul>
<li><code>Ctrl + d</code>        ——删除光标位置的字符</li>
<li><code>Ctrl + t</code>        ——光标位置的字符和光标前边的字符互换位置</li>
<li><code>Alt + t</code>         ——光标位置的字和光标前边的字互换位置</li>
<li><code>Alt + l</code>         ——把从光标位置到字尾的字符转换为小写字母</li>
<li><code>Alt + u</code>         ——把从光标位置到字尾的字符转换为大写字母</li>
</ul>
<p><strong>剪切和粘贴文本</strong>：</p>
<ul>
<li><code>Ctrl + k</code>        ——剪切从光标位置到行尾的文本</li>
<li><code>Ctrl + u</code>        ——剪切从光标位置到行首的文本</li>
<li><code>Alt + d</code>         ——剪切从光标位置到词尾的文本</li>
<li><code>Alt + Backspace</code> ——剪切从光标位置到词头的文本（如果光标在一个单词的开头，剪切前一个单词）</li>
<li><code>Ctrl + y</code>        ——把剪切环中的文本粘贴到光标位置</li>
</ul>
<p><strong>自动补全</strong>：</p>
<ul>
<li><code>Alt + ?</code>         ——显示可能的自动补全列表（在大多数系统中，你也可以完成这个通过按 两次 tab 键）</li>
<li><code>Alt + *</code>         ——插入所有可能的自动补全</li>
</ul>
<p><strong>历史记录</strong>：</p>
<ul>
<li><code>history | less</code>  ——浏览历史记录</li>
<li><code>history | grep /usr/bin</code></li>
<li><code>Ctrl-r</code>          ——搜索曾经输入过的命令</li>
<li><code>!88</code>             ——展开为第 88 条历史记录</li>
<li><code>!string</code>         ——重复最近历史列表中，以这个字符串开头的命令</li>
<li><code>!?string</code>        ——重复最近历史列表中，包含这个字符串的命令</li>
</ul>
]]></content>
      <tags>
        <tag>Linux 命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello MVC</title>
    <url>/2017/11/25/Hello-MVC/</url>
    <content><![CDATA[<ul>
<li>JavaEE 中的 MVC：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fluaaa0x07j30ak08yq2u.jpg" alt=""><a id="more"></a></li>
<li>一个简单的分页查询的实现：<ul>
<li>DAO：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> bean.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroDAO</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/    how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                    <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select count(*) from hero"</span>;</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"total:"</span> + total);</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line"> </span><br><span class="line">            c.close();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/    how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line"> </span><br><span class="line">            ps.execute();</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            ps.close();</span><br><span class="line"> </span><br><span class="line">            c.close();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/    how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"update hero set name= ?, hp = ? , damage = ? where id = ?"</span>;</span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line">            ps.setInt(<span class="number">4</span>, hero.id);</span><br><span class="line"> </span><br><span class="line">            ps.execute();</span><br><span class="line"> </span><br><span class="line">            ps.close();</span><br><span class="line"> </span><br><span class="line">            c.close();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/    how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"delete from hero where id = "</span> + id;</span><br><span class="line"> </span><br><span class="line">            s.execute(sql);</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line"> </span><br><span class="line">            c.close();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/    how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                    <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select * from hero where id = "</span> + id;</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line"> </span><br><span class="line">            c.close();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="number">0</span>, Short.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/    how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select * from hero order by id desc limit ?,? "</span>;</span><br><span class="line"> </span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>, start);</span><br><span class="line">            ps.setInt(<span class="number">2</span>, count);</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                heros.add(hero);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            ps.close();</span><br><span class="line"> </span><br><span class="line">            c.close();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heros;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>HeroListServlet：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> bean.Hero;</span><br><span class="line"><span class="keyword">import</span> dao.HeroDAO;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start = Integer.parseInt(request.getParameter(<span class="string">"start"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="comment">// 当浏览器没有传参数start时</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> next = start + count;</span><br><span class="line">        <span class="keyword">int</span> pre = start - count;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> total = <span class="keyword">new</span> HeroDAO().getTotal();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> last;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == total % count)</span><br><span class="line">            last = total - count;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = total - total % count;</span><br><span class="line"> </span><br><span class="line">        pre = pre &lt; <span class="number">0</span> ? <span class="number">0</span> : pre;</span><br><span class="line">        next = next &gt; last ? last : next;</span><br><span class="line"> </span><br><span class="line">        request.setAttribute(<span class="string">"next"</span>, next);</span><br><span class="line">        request.setAttribute(<span class="string">"pre"</span>, pre);</span><br><span class="line">        request.setAttribute(<span class="string">"last"</span>, last);</span><br><span class="line"> </span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> HeroDAO().list(start, count);</span><br><span class="line">        request.setAttribute(<span class="string">"heros"</span>, heros);</span><br><span class="line"> </span><br><span class="line">        request.getRequestDispatcher(<span class="string">"listHero.jsp"</span>).forward(request, response);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>listHero.jsp<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;table align=<span class="string">'center'</span> border=<span class="string">'1'</span> cellspacing=<span class="string">'0'</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;hp&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;damage&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;edit&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;delete&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;heros&#125;"</span> <span class="keyword">var</span>=<span class="string">"hero"</span> varStatus=<span class="string">"st"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.hp&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;hero.damage&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href="editHero?id=$&#123;hero.id&#125;"&gt;edit&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href="deleteHero?id=$&#123;hero.id&#125;"&gt;delete&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=<span class="string">"6"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;a href="?start=0"&gt;[首  页]&lt;/a&gt;</span><br><span class="line">            &lt;a href="?start=$&#123;pre&#125;"&gt;[上一页]&lt;/a&gt;</span><br><span class="line">            &lt;a href="?start=$&#123;next&#125;"&gt;[下一页]&lt;/a&gt;</span><br><span class="line">            &lt;a href="?start=$&#123;last&#125;"&gt;[末  页]&lt;/a&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<!--lalala-->
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>从 Shell 眼中看世界</title>
    <url>/2017/11/22/%E4%BB%8E-Shell-%E7%9C%BC%E4%B8%AD%E7%9C%8B%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p><strong>展开</strong>：</p>
<ul>
<li><strong>字符展开</strong>：<ul>
<li><code>echo *</code></li>
<li><code>echo D*</code></li>
<li><code>echo [[:upper:]]*</code></li>
</ul>
</li>
<li><strong>路径名展开</strong>：<ul>
<li><code>ls -d .* | less</code></li>
<li><code>ls -d .[!.]?*</code></li>
</ul>
</li>
<li><strong>波浪线展开</strong>：<a id="more"></a><ul>
<li><code>echo ~</code></li>
</ul>
</li>
<li><strong>算数表达式展开</strong>：<ul>
<li><code>echo $(((5**2) * 3))</code></li>
</ul>
</li>
<li><strong>花括号展开</strong>：<ul>
<li><code>echo Front-{A,B,C}-Back</code></li>
<li><code>echo Number_{1..5}</code></li>
<li><code>mkdir {2007..2009}-0{1..9} {2007..2009}-{10..12}</code></li>
</ul>
</li>
<li><strong>参数展开</strong>：<ul>
<li><code>echo $USER</code></li>
<li><code>printenv | less</code></li>
</ul>
</li>
<li><strong>命令替换</strong>（命令替换允许我们把一个命令的输出作为一个展开模式来使用）：<ul>
<li><code>ls -l $(which cp)</code></li>
<li><code>file $(ls /usr/bin/* | grep zip)</code></li>
</ul>
</li>
</ul>
<p><strong>引用</strong>：</p>
<ul>
<li><strong>直接引用</strong>：后果就是各种转义。</li>
<li><strong>双引号引用</strong>：如果你把文本放在双引号中，Shell 使用的特殊字符，除了 $，\ (反斜杠），和 `（倒引号）之外，则失去它们的特殊含义，被当作普通字符来看待。这意味着字符展开、路径名展开、波浪线展开和花括号展开都被禁止，然而参数展开，算术展开，和命令替换 仍然执行。</li>
<li><strong>单引号引用</strong>：转义都不执行。</li>
<li><strong>综合例子</strong>：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[me@linuxbox ~]$ echo text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER</span><br><span class="line">text /home/me/ls-output.txt a b foo 4 me</span><br><span class="line">[me@linuxbox ~]$ echo "text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER"</span><br><span class="line">text ~/*.txt   &#123;a,b&#125; foo 4 me</span><br><span class="line">[me@linuxbox ~]$ echo 'text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER'</span><br><span class="line">text ~/*.txt  &#123;a,b&#125; $(echo foo) $((2+2)) $USER</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><strong>转义字符</strong>：特殊字符用<code>\</code>来转义，而<code>\</code>用<code>&quot;\&quot;</code>来转义。</li>
</ul>
]]></content>
      <tags>
        <tag>Linux 命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>炫酷的重定向</title>
    <url>/2017/11/17/%E7%82%AB%E9%85%B7%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<ul>
<li>计算机中有标准输入流（暂存在标准输入的特殊文件 stdin），也有标准输出流（暂存在 标准输出的特殊文件 stdout）。标准输入流一般来自键盘，标准输出流一般输送到显示器。我们所谓的<strong>重定向</strong>，指的就是从别的地方获得输入流以及将输出流输送到别的地方～</li>
<li><strong>重定向标准输出</strong>：<code>ls -l /usr/bin &gt; ls-output.txt</code></li>
<li><strong>重定向标准输出（追加）</strong>：<code>ls -l /usr/bin &gt;&gt; ls-output.txt</code><a id="more"></a></li>
<li>文件流的前三个看作<strong>标准输入</strong>、<strong>标准输出</strong>和<strong>标准错误</strong>，shell 内部参考它们为文件描述符<code>0</code>、<code>1</code>和<code>2</code>。</li>
<li>规范的 Unix 程序一般不会把错误信息插入到标准输出流，而是插入到标准错误流（暂存在 标准错误的特殊文件 stderr），我们可以人为地将 标准错误流插入到标准输出流：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 标准错误的重定向必须总是出现在标准输出重定向之后</span><br><span class="line">ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">ls -l /bin/usr &amp;&gt; ls-output.txt</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>处理不需要的输出：<code>ls -l /bin/usr 2&gt; /dev/null</code>（“/dev/null”文件是系统设备，叫做位存储桶，它可以接受输入，并且对输入不做任何处理）</li>
<li><code>cat</code>命令——读取一个或多个文件，然后复制它们到标准输出。重定向后：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat movie.mpeg.0* &gt; movie.mpeg</span><br><span class="line"></span><br><span class="line">cat &gt; lazy_dog.txt</span><br><span class="line">The quick brown fox jumped over the lazy dog.</span><br><span class="line">+ Ctrl-d</span><br><span class="line"></span><br><span class="line">cat &lt; lazy_dog.txt</span><br><span class="line">cat lazy_dog.txt</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>管道线<code>|</code>，将<code>|</code>左边的当做输入流，右边的当做输出流：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /bin /usr/bin | sort | uniq | less</span><br><span class="line"></span><br><span class="line">// 查看重复元素列表</span><br><span class="line">ls /bin /usr/bin | sort | uniq -d | less</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>wc</code>命令打印行数、字数和字节数：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// wc -l 接受输入的行数，sort 和 uniq 是筛选的条件，称为过滤器</span><br><span class="line">ls /bin /usr/bin | sort | uniq | wc -l</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>grep</code>打印匹配行：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// -i 表示忽略大小写检索、-v 表示反选</span><br><span class="line">ls /bin /usr/bin | sort | uniq | grep zip -i -v</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>head</code>与<code>tail</code>：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -n 5 ls-output.txt</span><br><span class="line">tail -n 5 ls-output.txt</span><br><span class="line"></span><br><span class="line">ls /usr/bin | tail -n 5</span><br><span class="line"></span><br><span class="line">// 始终监视文件的更新用 -f，输入 Ctrl-c 停止</span><br><span class="line">tail -f /var/log/messages</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>偷东西的<code>tee</code>——从 Stdin 读取数据，并同时输出到 Stdout 和文件：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /usr/bin | tee ls.txt | grep zip</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Linux 命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP 基础小记</title>
    <url>/2017/11/13/JSP-%E5%9F%BA%E7%A1%80%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li><strong>JSP 的执行过程</strong>：先将 JSP 转成一个 Servlet 的 .java 文件，然后将这个文件编译成 .class 文件，再执行生成 .html 文件，最后通过 HTTP 协议将响应返回。</li>
<li><strong>JSP 的页面组成</strong>：① 静态内容（直接写）；② 指令（&lt;%@ %&gt;）；③ 表达式（&lt;%= %&gt;）；④ Scriptlet（&lt;% %&gt;）；⑤ 声明（&lt;%! %&gt;）；⑥ 动作（&lt;jsp:include page=”Filename”&gt;）；⑦ 注释（&lt;!– –&gt;）。<ul>
<li>① 静态内容：就是 HTML、CSS 和 JavaScript 等，可以直接写，什么都不用加。</li>
<li>② 指令：<code>&lt;%@page import=&quot;java.util.*&quot;%&gt;</code><a id="more"></a></li>
<li>③ 表达式和 Scriptlet：<code>&lt;%=&quot;hello jsp&quot;%&gt;</code>==<code>&lt;%out.println(&quot;hello jsp&quot;);%&gt;</code>，因为 out 是 JSP 的隐式对象，可以直接使用。另：<code>&lt;%= %&gt;</code>不需要分号结尾，<code>&lt;% %&gt;</code>需要以分号结尾。</li>
<li>④ for 循环举例：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">for</span> (String word : words) &#123; %&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;%=word%&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>include</strong>：<ul>
<li>指令 include：<code>&lt;%@include file=&quot;footer.jsp&quot;%&gt;</code></li>
<li>动作 include：<code>&lt;jsp:include page=&quot;footer.jsp&quot;/&gt;</code></li>
<li>区别：指令 include 会直接把 footer.jsp 插入到 hello.jsp 当中，之后转译成 hello_jsp.java 文件。而动作 include 会把 footer.jsp 转译成 footer_jsp.java，把 Hello.jsp 转译成 hello_jsp.java，hello_jsp.java 会在服务端访问 footer_jsp.java，然后把返回的结果嵌入到响应中。</li>
<li>传参——由于指令 include 是一个文件，所以变量可以直接访问，就不存在什么传参的问题，但是动作 include 需要传参：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%-- footer.jsp --%&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">    &lt;p style=<span class="string">"text-align:center"</span>&gt;copyright@&lt;%=request.getParameter(<span class="string">"year"</span>)%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.jsp</span></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt; </span><br><span class="line">你好 JSP</span><br><span class="line">&lt;%=<span class="keyword">new</span> Date().toLocaleString()%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"footer.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"year"</span> value=<span class="string">"2017"</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>注意：当需要进行较为复杂的对象传参时，请使用指令 include。其实，<a href="jsp:include">jsp:include</a> 方式几乎没有用武之地。。。。</li>
</ul>
</li>
<li><strong>跳转</strong>：<ul>
<li>客户端跳转：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%response.sendRedirect(<span class="string">"hello.jsp"</span>);%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>服务端跳转：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以使用 Servlet 中的跳转方式：</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"hello.jsp"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化后的 JSP 特有的方式如下：</span></span><br><span class="line">&lt;jsp:forward page=<span class="string">"hello.jsp"</span>/&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>Cookie</strong>：  <figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- setCookie.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"javax.servlet.http.Cookie"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, <span class="string">"Gareen"</span>);</span><br><span class="line">    <span class="comment">// 设置 Cookie 有效的秒数，如果参数是0，就表示关闭浏览器就销毁 Cookie</span></span><br><span class="line">    c.setMaxAge(<span class="number">60</span> * <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">    <span class="comment">// 只有浏览器通过这个主机名访问服务器的时候，才会提交这个 Cookie 到服务端</span></span><br><span class="line">    c.setPath(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">    <span class="comment">// 通过 response 把这个 Cookie 保存在浏览器端</span></span><br><span class="line">    response.addCookie(c);</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a href="getCookie.jsp"&gt;跳转到获取cookie的页面&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%-- getCookie.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"javax.servlet.http.Cookie"</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != cookies) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; cookies.length; d++) &#123;</span><br><span class="line">            out.print(cookies[d].getName() + <span class="string">":"</span> + cookies[d].getValue() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
  <!--lalala--></li>
<li><strong>Session</strong>：Session 对应的中文翻译是会话，指的是从用户打开浏览器访问一个网站开始，无论在这个网站中访问了多少页面，点击了多少链接，直到该用户关闭浏览器为止，都属于同一个会话。<ul>
<li>原理图：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fljs3zk22zj30ia0aut91.jpg" alt=""></li>
<li>set &amp; get：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- setSession.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"javax.servlet.http.Cookie"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   session.setAttribute(<span class="string">"name"</span>, <span class="string">"teemo"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;a href="getSession.jsp"&gt;跳转到获取session的页面&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%-- getSession.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"javax.servlet.http.Cookie"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String name = (String)session.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">Session中的name: &lt;%=name%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Session 和 Cookie 的关系：盒子对应服务器上的 Session，钥匙对应浏览器上的 Cookie，每个用户有一个属于自己的盒子（Session）。</li>
<li>当用户拒绝使用 Cookie，那么服务端就无法获取 JSESSIONID，每一次访问，都会生成一个新的 Session 对象。解决办法：<code>response.encodeURL(&quot;getSession.jsp&quot;))</code>，即 URL 变成了：域名xxx/getSession.jsp;jsessionid=22424AEA86ADBE89F335EEB649D997A8</li>
<li>Session 的有效时间：Tomcat 默认30分钟，可以去 tomcat/conf/web.xml 文件中的 session-config 配置。</li>
</ul>
</li>
<li><strong>JSP 的四种作用域</strong>：<ul>
<li>pageContext 当前页面作用域，只能在当前页面访问，在其他页面就不能访问了：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"gareen"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>requestContext 表示一次请求作用域，随着本次请求结束，其中的数据也就被回收。在一次请求中，即使发生了服务端跳转，对浏览器来说仍是一次请求，所以依然可以访问到，客户端跳转就不行了，因为产生了新的 request 对象：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%request.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>);%&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"name"</span>);%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>sessionContext 指的是会话作<br>request.getAttribute(“name”);用域，从一个用户打开网站的那一刻起，无论访问了多少网页，链接都属于同一个会话，直到浏览器关闭。所以页面间传递数据，也是可以通过 sessionContext 传递的。但是，不同用户对应的 Session 是不一样的，所以 Session 无法在不同的用户之间共享数据：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%session.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>);%&gt;</span><br><span class="line">&lt;%=session.getAttribute(<span class="string">"name"</span>);%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>applicationContext 全局作用域，所有用户共享同一个数据。在 JSP 中使用 application 对象，application 对象是 ServletContext 接口的实例，所以也可以通过 request.getServletContext() 来获取，application 映射的就是 web 应用本身。<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%application.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>);%&gt;</span><br><span class="line">&lt;%=application.getAttribute(<span class="string">"name"</span>);%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>后3种作用域的另一种写法（太费劲了，用得少）：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>,pageContext.REQUEST_SCOPE);</span><br><span class="line">pageContext.getAttribute(<span class="string">"name"</span>,pageContext.REQUEST_SCOPE);</span><br><span class="line"></span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>,pageContext.SESSION_SCOPE);</span><br><span class="line">pageContext.getAttribute(<span class="string">"name"</span>,pageContext.SESSION_SCOPE);</span><br><span class="line"></span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>,pageContext.APPLICATION_SCOPE);</span><br><span class="line">pageContext.getAttribute(<span class="string">"name"</span>,pageContext.APPLICATION_SCOPE);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>JSP 的隐式对象</strong>指的是不需要显示定义，直接就可以使用的对象，共有9个：<ul>
<li>request、response、out——无需解释。</li>
<li>pageContext、Session、application——无须解释。</li>
<li>page 对象即表示当前对象，等同于<code>this</code>。</li>
<li>config 可以获取一些在 web.xml 中初始化的参数，步骤（不推荐使用这个东西）：<ul>
<li>① 在 web.xml 中进行配置，将 testconfig.jsp 配置成一个 Servlet：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 把 testconfig.jsp配置为一个 servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testconfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/testconfig.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>database-ip<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将路径 testconfig映射到testconfig.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testconfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testconfig<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>② 创建一个 testconfig.jsp，通过<code>config.getInitParameter(&quot;database-ip&quot;)</code>获取参数：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;    </span><br><span class="line">database-ip:&lt;%=config.getInitParameter(<span class="string">"database-ip"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>③ 访问——访问的时候不能直接通过 127.0.0.1/testconfig.jsp 访问，只能通过 127.0.0.1/testconfig 来访问。</li>
</ul>
</li>
<li>exception 对象只有当前页面的 &lt;%@ page isErrorPage=”true”%&gt; 的时候才可以使用。同时，在其他页面也需要设置 &lt;%@page errorPage=”xxx”%&gt; 来指定一个专门处理异常的页面：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- <span class="keyword">try</span>.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span> errorPage=<span class="string">"catch.jsp"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    a[<span class="number">20</span>] = <span class="number">5</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%-- <span class="keyword">catch</span>.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span> isErrorPage=<span class="string">"true"</span>%&gt;</span><br><span class="line">&lt;%=exception%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>JSTL</strong>的意思是“JSP Standard Tag Library”，其允许开人员可以像使用 HTML 标签那样在 JSP 中开发 Java 功能。<ul>
<li>使用准备：为了能够在 JSP 中使用 JSTL，首先需要两个jar包，分别是 jstl.jar 和 standard.jar。把这两个 jar 包放在web/WEB-INF/lib 下。然后在 JSP 代码中写入：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% prefix=<span class="string">"c"</span> 表示后续的标签会以 &lt;c: 开头 %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>set</code>：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"name"</span> value=<span class="string">"$&#123;'gareen'&#125;"</span> scope=<span class="string">"request"</span>/&gt;</span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line">&lt;%request.setAttribute(<span class="string">"name"</span>,<span class="string">"gareen"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>out</code>：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">"$&#123;name&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"name"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>remove</code>：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">"name"</span> scope=<span class="string">"request"</span>/&gt;</span><br><span class="line"></span><br><span class="line">=</span><br><span class="line"></span><br><span class="line">&lt;%request.removeAttribute(<span class="string">"name"</span>)%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>if</code>——JSTL 通过<code>&lt;c:if test=&quot;&quot;&gt;</code>来进行 if 判断，同时还可以搭配 empty 使用，进行为空判断：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;hp&lt;5&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;这个英雄要挂了&lt;/p&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;!(hp&lt;5)&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;这个英雄觉得自己还可以再抢救抢救&lt;/p&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;% </span><br><span class="line">    pageContext.setAttribute(<span class="string">"weapon"</span>, <span class="keyword">null</span>);</span><br><span class="line">    pageContext.setAttribute(<span class="string">"lastwords"</span>, <span class="string">""</span>);</span><br><span class="line">    pageContext.setAttribute(<span class="string">"items"</span>, <span class="keyword">new</span> ArrayList());</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;empty weapon&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;没有装备武器&lt;/p&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;empty lastwords&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;挂了也没有遗言&lt;/p&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;empty items&#125;"</span>&gt;</span><br><span class="line">    &lt;p&gt;物品栏为空&lt;/p&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>choose</code>：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;hp&lt;5&#125;"</span>&gt;</span><br><span class="line">        &lt;p&gt;这个英雄要挂了&lt;/p&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        &lt;p&gt;这个英雄觉得自己还可以再抢救抢救&lt;/p&gt;</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>forEach</code>：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;heros&#125;"</span> <span class="keyword">var</span>=<span class="string">"hero"</span> varStatus=<span class="string">"st"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;c:out value="$&#123;st.count&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;c:out value="$&#123;hero&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>forTokens</code>：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"heros"</span> value=<span class="string">"塔姆,艾克;巴德|雷克赛!卡莉丝塔"</span>/&gt;</span><br><span class="line">&lt;c:forTokens items=<span class="string">"$&#123;heros&#125;"</span> delims=<span class="string">":;|!"</span> <span class="keyword">var</span>=<span class="string">"hero"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;hero&#125;"</span>/&gt; &lt;br/&gt;</span><br><span class="line">&lt;/c:forTokens&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>fmt:formatNumber</code>：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%-- 这句是必须事先写的，否则无法使用 fmt 标签 --%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> prefix=<span class="string">'fmt'</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"money"</span> value=<span class="string">"888.8"</span>/&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"pi"</span> value=<span class="string">"3.1415926"</span>/&gt;</span><br><span class="line">最少两个小数点:</span><br><span class="line">&lt;fmt:formatNumber type=<span class="string">"number"</span> value=<span class="string">"$&#123;money&#125;"</span> minFractionDigits=<span class="string">"2"</span>/&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">最多两个小数点:</span><br><span class="line">&lt;fmt:formatNumber type=<span class="string">"number"</span> value=<span class="string">"$&#123;pi&#125;"</span> maxFractionDigits=<span class="string">"2"</span>/&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>fmt:formatDate</code>——格式化日期：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> prefix=<span class="string">'fmt'</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Date now = <span class="keyword">new</span> Date();</span><br><span class="line">    pageContext.setAttribute(<span class="string">"now"</span>, now);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">完整日期: &lt;fmt:formatDate value=<span class="string">"$&#123;now&#125;"</span> pattern=<span class="string">"G yyyy年MM月dd日 E"</span>/&gt;&lt;br&gt;</span><br><span class="line">完整时间: &lt;fmt:formatDate value=<span class="string">"$&#123;now&#125;"</span> pattern=<span class="string">"a HH:mm:ss.S z"</span>/&gt;&lt;br&gt;</span><br><span class="line">常见格式: &lt;fmt:formatDate value=<span class="string">"$&#123;now&#125;"</span> pattern=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>/&gt;</span><br></pre></td></tr></table></figure>
<!--lalala-->
<style>
table th:first-of-type {
  width: 100px;
}
table td {
  font-size:12px;
}
</style></li>
<li>功能强大的<code>fn</code>：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fll2u4oxidj313m0kktcc.jpg" alt=""><br>注意：使用前需插入：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> prefix=<span class="string">"fn"</span>%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>EL 表达式</strong>：<ul>
<li>取值：不同版本的 Tomcat 是否默认开启对 EL 表达式的支持，是不一定的。所以需要在 JSP 中加上一句：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"name"</span> value=<span class="string">"$&#123;'gareen'&#125;"</span> scope=<span class="string">"request"</span>/&gt;</span><br><span class="line">通过标签获取 name: &lt;c:out value=<span class="string">"$&#123;name&#125;"</span>/&gt; &lt;br&gt;</span><br><span class="line">通过 EL 获取name: $&#123;name&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>用优先级处理取值冲突：pageContext &gt; request &gt; session &gt; application：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">  </span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"name"</span> value=<span class="string">"$&#123;'gareen-pageContext'&#125;"</span> scope=<span class="string">"page/&gt;</span></span><br><span class="line"><span class="string">&lt;c:set var="</span>name<span class="string">" value="</span>$&#123;<span class="string">'gareen-request'</span>&#125;<span class="string">" scope="</span>request/&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"name"</span> value=<span class="string">"$&#123;'gareen-session'&#125;"</span> scope=<span class="string">"session/&gt;</span></span><br><span class="line"><span class="string">&lt;c:set var="</span>name<span class="string">" value="</span>$&#123;<span class="string">'gareen-application'</span>&#125;<span class="string">" scope="</span>application/&gt;</span><br><span class="line"><span class="number">4</span>个作用域都有name,优先获取出来的是：$&#123;name&#125;</span><br><span class="line">&lt;%-- 是 gareen-pageContext --%&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>EL 表达式与 JavaBean：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span> <span class="keyword">import</span>=<span class="string">"bean.*"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">  </span><br><span class="line">&lt;%</span><br><span class="line">    Hero hero =<span class="keyword">new</span> Hero();</span><br><span class="line">    hero.setName(<span class="string">"盖伦"</span>);</span><br><span class="line">    hero.setHp(<span class="number">616</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"hero"</span>, hero);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">英雄名字：$&#123;hero.name&#125; &lt;br&gt;</span><br><span class="line">英雄血量：$&#123;hero.hp&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>结合 JSTL 的 &lt;c:forEach ：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;heros&#125;"</span> <span class="keyword">var</span>=<span class="string">"hero"</span> varStatus=<span class="string">"st"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;st.count&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;hero&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>取参——<code>request.getParameter(&quot;name&quot;)</code>在 JSP 中可以用 EL 表达式简化为：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;param.name&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>eq</code>条件判断：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">eq              &lt;%-- 相等 --%&gt;</span><br><span class="line">ne|neq          &lt;%-- 不相等 --%&gt;</span><br><span class="line">gt              &lt;%-- 大于 --%&gt;</span><br><span class="line">lt              &lt;%-- 小于 --%&gt;</span><br><span class="line">gte|ge          &lt;%-- 大于等于 --%&gt;</span><br><span class="line">lte|le          &lt;%-- 小于等于 --%&gt;</span><br><span class="line">not             &lt;%-- 非 --%&gt;</span><br><span class="line">mod             &lt;%-- 求模 --%&gt;</span><br><span class="line">is [not] div by &lt;%-- 是否能被某数整除 --%&gt;</span><br><span class="line">is [not] even   &lt;%-- 是否为偶数 --%&gt;</span><br><span class="line">is [not] odd    &lt;%-- 是否为奇数 --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- example --%&gt;</span><br><span class="line">$&#123;killNumber ge <span class="number">10</span>? <span class="string">"超神"</span>: <span class="string">"还没超神"</span>&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2017/11/07/jQuery/</url>
    <content><![CDATA[<ul>
<li><strong>使用 jQuery 需要导入一个第三方的库，导入方式</strong>：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 服务器导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://xijinian.xyz/lib/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CDN（内容分发网络）导入（下面以百度为例） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>




</li>
</ul>
<ul>
<li><strong>理解 <code>$(function() {...})</code></strong>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就绪事件</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就绪事件简写</span></span><br><span class="line">$(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在括号中写 jQuery 代码，例子：</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#d"</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#d"</span>).show();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<ul>
<li><strong>通过 id 获取元素</strong>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 JavaScript 中获取元素的办法：</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 jQuery 中获取元素很简单：</span></span><br><span class="line">$(<span class="string">"#id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这两种获取元素的方式是不同的：</span></span><br><span class="line"><span class="comment">// js 中获取的是 DOM 对象，jQuery 获取的是 jQuery 对象。</span></span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<ul>
<li><strong>增加监听器</strong>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与 js 不同，jQuery 不需要在 html 元素上进行改动、关联</span></span><br><span class="line">$(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"点击了按钮"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<ul>
<li><strong>jQuery 对象自带方法</strong>：如前文中用到的<code>hide()</code>和<code>show()</code>：<ul>
<li>取值方法——<code>val()</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于 document.getElementById("input1").value</span></span><br><span class="line">$(<span class="string">"#input1"</span>).val()</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>获取元素内容（如果有子元素，保留标签）——<code>html()</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert($(<span class="string">"#d1"</span>).html())</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>获取元素内容（如果有子元素，不包含子元素标签）——<code>text()</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert($(<span class="string">"#d1"</span>).text());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>对CSS样式的操作</strong>：<ul>
<li>增加 Class：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#d"</span>).addClass(<span class="string">"pink"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b1"</span>&gt;</span>增加背景色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.pink</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d"</span>&gt;</span>Hello JQuery<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>删除 Class：<code>$(&quot;#d&quot;).removeClass(&quot;pink&quot;);</code></li>
<li>切换 Class：<code>$(&quot;#d&quot;).toggleClass(&quot;pink&quot;);</code>——这里的切换指：如果存在就删除，如果不存在就添加。</li>
<li>CSS 函数（注意逗号和冒号的区别）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#d1"</span>).css(<span class="string">"background-color"</span>, <span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#d2"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"pink"</span>, <span class="string">"color"</span>:<span class="string">"green"</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>jQuery 常用的选择器</strong>：<ul>
<li><code>$(&quot;tagName&quot;)</code>，如<code>$(&quot;div&quot;)</code>。</li>
<li><code>$(&quot;#id&quot;)</code>，id 应该是唯一的，如果 id 重复，则只会选择第一个。</li>
<li><code>$(&quot;.className&quot;)</code>。</li>
<li><code>$(&quot;selector1 selector2&quot;)</code>——选择 selector1 下的 selector2 元素：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div#d3 span"</span>).addClass(<span class="string">"pink"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>$(selector:first)</code>和<code>$(selector:last)</code>。</li>
<li><code>$(selector:odd)</code>——奇数元素；<code>$(selector:even)</code>——偶数元素。</li>
<li><code>$(selector:hidden)</code>不可见的元素；<code>$(selector:visible)</code>——可见的元素。（注意：<code>div:visible</code>表示选中可见的 div，<code>div :visible</code>表示选中 div 下可见的元素）。</li>
<li>属性：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector[attribute])          <span class="comment">// 满足选择器条件的有某属性的元素</span></span><br><span class="line">$(selector[attribute=value])    <span class="comment">// 满足选择器条件的属性等于 value 的元素</span></span><br><span class="line">$(selector[attribute!=value])   <span class="comment">// 满足选择器条件的属性不等于 value 的元素</span></span><br><span class="line">$(selector[attribute^=value])   <span class="comment">// 满足选择器条件的属性以 value 开头的元素</span></span><br><span class="line">$(selector[attribute$=value])   <span class="comment">// 满足选择器条件的属性以 value 结尾的元素</span></span><br><span class="line">$(selector[attribute*=value])   <span class="comment">// 满足选择器条件的属性包含 value 的元素</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>表单对象（&lt;input type=””&gt;）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:input      <span class="comment">// 会选择所有的输入元素，不仅仅是 input 标签开始的那些，还包括 textarea，select 和 button</span></span><br><span class="line">:button     <span class="comment">// 会选择 type=button 的 input 元素和 button 元素</span></span><br><span class="line">:radio      <span class="comment">// 会选择单选框</span></span><br><span class="line">:checkbox   <span class="comment">// 会选择复选框</span></span><br><span class="line">:text       <span class="comment">// 会选择文本框，但是不会选择文本域</span></span><br><span class="line">:submit     <span class="comment">// 会选择提交按钮（button 的默认 type 是 submit）</span></span><br><span class="line">:image      <span class="comment">// 会选择图片型提交按钮</span></span><br><span class="line">:reset      <span class="comment">// 会选择重置按钮</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>表单对象元素：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:enabled    <span class="comment">// 会选择可用的输入元素，注：输入元素的默认状态都是可用 </span></span><br><span class="line">:disabled   <span class="comment">// 会选择不可用的输入元素 </span></span><br><span class="line">:checked    <span class="comment">// 会选择被选中的单选框和复选框，注：在部分浏览器上也可以选中 selected 的 option </span></span><br><span class="line">:selected   <span class="comment">// 会选择被选中的 option 元素</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>当前元素：<code>$(this)</code>——表示触发该事件的组件。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>jQuery 常用的筛选器</strong>：<ul>
<li><code>first()</code>、<code>last()</code>和<code>eq(num)</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).first().toggleClass(<span class="string">"pink"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>parent()</code>和<code>parents()</code>。</li>
<li><code>children()</code>和<code>find(selector)</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#currentDiv"</span>).children().toggleClass(<span class="string">"b"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#b2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#currentDiv"</span>).find(<span class="string">"div"</span>).toggleClass(<span class="string">"b"</span>);</span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>siblings()</code>——同级元素。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>属性</strong>：<ul>
<li><code>attr(&quot;tag&quot;)</code>——获取属性的值：<code>$(&quot;#h&quot;).attr(&quot;align&quot;)</code>。</li>
<li><code>attr(attr, value)</code>——修改属性的值：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#h"</span>).attr(<span class="string">"align"</span>,<span class="string">"right"</span>) ;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>通过<code>removeAttr(attr)</code>删除属性。</li>
<li><code>prop</code>与<code>attr</code>的选择：①对于自定义属性<code>attr</code>能够获取，<code>prop</code>不能获取；②对于选中属性（checked、selected）<code>attr</code>只能获取初始值，无论是否变化，而<code>prop</code>能够访问变化后的值，并且以 true | false 的形式返回。综上所述：在访问表单对象属性的时候，应该采用<code>prop</code>而非<code>attr</code>，其他时候使用<code>attr</code>。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>效果</strong>：<ul>
<li><code>hide()</code>、<code>show()</code>、<code>toggle()</code>——之前说过了，不过还有一点，就是这3个函数可以传入参数，表示切换的过渡时间，单位：毫秒。</li>
<li><code>slideUp()</code>、<code>slideDown()</code>、<code>slideToggle()</code>——这是3个效果蛮诡异的函数，效果等同于名字，当然，这3个函数也是支持毫秒作为传入参数的。</li>
<li><code>fadeIn()</code>、<code>fadeOut()</code>、<code>fadeTogggle()</code>、<code>fadeTo()</code>，这是看起来更加诡异的4个效果——淡入淡出，怕不拍？<code>fadeIn()</code>可以使东西缓慢出现，<code>fadeOut()</code>使东西缓慢消失，<code>slideToggle()</code>缓慢地切换消失和出现，当然这3个函数都是可以自己定义时间的，传入想要延迟的毫秒数就行。<code>fadeTo()</code>是另一个有趣的效果，如下使用：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#d2"</span>).fadeTo(<span class="string">"slow"</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数可以直接使用整数表示毫秒，第二个参数即使设置为0，也并不是完全消失，只是透明了</span></span><br><span class="line">$(<span class="string">"#d2"</span>).fadeTo(<span class="number">10000</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>自定义动画效果（默认情况下，所有 HTML 元素都有一个静态位置，且无法移动。如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute）：<code>$(selector).animate({params}, speed, callback)</code>（注意：当使用<code>animate()</code>时，必须使用驼峰标记法书写所有的属性名，还有色彩的动画并不包含在核心 jQuery 库中），我们也可以同时使改变元素的多个属性：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">            left:<span class="string">'250px'</span>,</span><br><span class="line">            <span class="comment">// 不透明度，越小越透明</span></span><br><span class="line">            opacity:<span class="string">'0.5'</span>,</span><br><span class="line">            height:<span class="string">'+=150px'</span>,</span><br><span class="line">            width:<span class="string">'+=150px'</span></span><br><span class="line">        &#125;,<span class="number">10000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>所谓的回调函数就是那个<code>callback</code>，当然你也可以在最后面直接定义一个函数。如：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.animate(&#123;<span class="attr">left</span>:<span class="string">'0px'</span>,<span class="attr">top</span>:<span class="string">'50px'</span>,<span class="attr">height</span>:<span class="string">'50px'</span>&#125;, <span class="number">2000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"动画演示结束"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>事件</strong>：<ul>
<li>加载——<code>$(document).ready()</code>、<code>$()</code>、<code>load()</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#message1"</span>).html(<span class="string">"页面加载成功"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#img"</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#message2"</span>).html(<span class="string">"图片加载成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>点击——<code>click()</code>和<code>dblclick()</code>。</li>
<li>键盘——<code>keydown()</code>、<code>keypress()</code>和<code>keyup()</code>，一些注意事项：①按照 keydown()、keypress()、keyup() 顺序发生；②只有 keyUp() 能获取到最后一个字母；③keyDown()、keyUp() 能够获取所有的按键，但是不能区分大小写；keyPress() 能够区分大小写但是获得功能键的值；④我们是通过 event 的 which 来获得输入的键，具体代码如下：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> clearTimer = <span class="literal">null</span>;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#i"</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> selector = <span class="string">"keydown"</span>;</span><br><span class="line">        show(selector, e, $(<span class="keyword">this</span>).val());</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"#i"</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> selector = <span class="string">"keypress"</span>;</span><br><span class="line">        show(selector, e, $(<span class="keyword">this</span>).val());</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"#i"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> selector = <span class="string">"keyup"</span>;</span><br><span class="line">        show(selector, e, $(<span class="keyword">this</span>).val());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">selector, e, inputvalue</span>) </span>&#123;</span><br><span class="line">    clearTimeout(clearTimer);</span><br><span class="line">    action(selector);</span><br><span class="line">    key(selector, e);</span><br><span class="line">    value(selector, inputvalue);</span><br><span class="line">    clearTimer = setTimeout(clear, <span class="number">4000</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#"</span>+selector+<span class="string">"Action"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);</span><br><span class="line">    $(<span class="string">"#"</span>+selector+<span class="string">"Action"</span>).html(<span class="string">"顺序："</span> + (++order));</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">value</span>(<span class="params">selector, value</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#"</span>+selector+<span class="string">"Value"</span>).html(value);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">key</span>(<span class="params">selector, e</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#"</span>+selector+<span class="string">"Key"</span>).html(e.which);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    order = <span class="number">0</span>;</span><br><span class="line">    $(<span class="string">"tr#action div"</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</span><br><span class="line">    $(<span class="string">"tr div"</span>).html(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>鼠标——<code>mousedown()</code>、<code>mouseup()</code>、<code>mousemove()</code>、<code>mouseenter()</code>、<code>mouseover()</code>、 <code>mouseleave()</code>、<code>mouseout()</code>，一些需要注意的地方：①mousemove()、mouseenter() 和 mouseover() 同为进入，区别在于 move() 在元素中移动的每一下都会被调用，其他两个只有在进入的那一刹那才会被调用；②mouseenter() 和 mouseover() 的区别在于 mouseenter() 不能再其子元素中起作用，而 mouseover() 在掠过其子元素的时候也算；③mouseleave() 和 mouseout() 的区别同样在此——mouseleave() 经过子元素的时候不会调用，mouseout() 经过子元素的时候也会被调用；④一个不得不强调的地方在于 mouseover() 和 mouseout() 不仅会关联子元素，更重要的是3次问题，即：离开父元素进入子元素、离开子元素进入父元素、真正离开父元素（进入父元素、进入子元素、再从子元素进入父元素）。</li>
<li>焦点：<code>focus()</code>和<code>blur()</code>。</li>
<li>改变：<code>change()</code>。注意：对于文本框，只有当文本框失去了焦点，且其中文本改变的情况下才会触发 change()。</li>
<li>提交：<code>submit()</code>。</li>
<li>绑定事件——<code>$(&quot;selector&quot;).on(&quot;event&quot;,function)</code>（其实就是另一种写法而已）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#message"</span>).html(<span class="string">"单击按钮"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#b"</span>).on(<span class="string">"dblclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#message"</span>).html(<span class="string">"双击按钮"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>触发事件——<code>$(&quot;selector&quot;).trigger(&quot;event&quot;)</code>，例子：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#b"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#message"</span>).html(<span class="string">"单击按钮"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#b"</span>).on(<span class="string">"dblclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#message"</span>).html(<span class="string">"双击按钮"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#b"</span>).trigger(<span class="string">"dblclick"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>AJAX</strong>：<ul>
<li>一个小例子：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   url: page,</span><br><span class="line">   data: &#123;<span class="string">"name"</span>:value&#125;,</span><br><span class="line">   success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      $(<span class="string">"#checkResult"</span>).html(result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>使用 GET 方式提交 AJAX：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#name"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> page = <span class="string">"/study/checkName.jsp"</span>;</span><br><span class="line">        <span class="keyword">var</span> value = $(<span class="keyword">this</span>).val();</span><br><span class="line">        $.<span class="keyword">get</span>(</span><br><span class="line">            page,</span><br><span class="line">            &#123;<span class="string">"name"</span>: value&#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"#checkResult"</span>).html(result);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>使用 POST 方式提交 AJAX：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(</span><br><span class="line">    page,</span><br><span class="line">    &#123;<span class="string">"name"</span>: value&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#checkResult"</span>).html(result);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>最简单的调用 AJAX 的方法——<code>load()</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#div1"</span>).load(<span class="string">"/try/ajax/demo_test.txt #p1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上提示功能</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#div1"</span>).load(<span class="string">"/try/ajax/demo_test.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">responseTxt, statusTxt, xhr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(statusTxt==<span class="string">"success"</span>)</span><br><span class="line">                alert(<span class="string">"外部内容加载成功!"</span>);</span><br><span class="line">            <span class="keyword">if</span>(statusTxt==<span class="string">"error"</span>)</span><br><span class="line">                alert(<span class="string">"Error: "</span> +xhr.status + <span class="string">" "</span> + xhr.statusText);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>格式化 form 下的输入数据：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="checkResult"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"data"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="http:/</span><span class="regexp">/how2j.cn/</span>study/checkName.jsp<span class="string">"&gt;http://how2j.cn/study/checkName.jsp&lt;/a&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&lt;form id="</span>form<span class="string">"&gt;    </span></span><br><span class="line"><span class="string">输入账号 :&lt;input id="</span>name<span class="string">" type="</span>text<span class="string">" name="</span>name<span class="string">"&gt; &lt;br&gt;</span></span><br><span class="line"><span class="string">输入年龄 :&lt;input id="</span>age<span class="string">" type="</span>text<span class="string">" name="</span>age<span class="string">"&gt; &lt;br&gt;</span></span><br><span class="line"><span class="string">输入手机号码 :&lt;input id="</span>mobile<span class="string">" type="</span>text<span class="string">" name="</span>mobile<span class="string">"&gt; &lt;br&gt;    </span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">$(function()&#123;</span></span><br><span class="line"><span class="string">    $("</span>input<span class="string">").keyup(function() &#123;</span></span><br><span class="line">        var data = $("#form").serialize();</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">"http://how2j.cn/study/checkName.jsp"</span>;</span><br><span class="line">        <span class="keyword">var</span> link = url + <span class="string">"?"</span> + data;</span><br><span class="line">        $(<span class="string">"a"</span>).html(link);</span><br><span class="line">        $(<span class="string">"a"</span>).attr(<span class="string">"href"</span>, link);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li><strong>数组</strong>：<ul>
<li>遍历：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">$.each(a, <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"元素["</span> + i + <span class="string">"]: "</span> + n + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.close();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>去除重复（执行<code>unique()</code>之前，要先调用<code>sort()</code>对数组的内容进行排序）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">a.sort();</span><br><span class="line">$.unique(a);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>判断是否存在：<code>document.write($.inArray(9, a))</code>。</li>
</ul>
</li>
<li><strong>字符串</strong>：<ul>
<li>去首尾空白：<code>document.write($.trim(&quot; Hello JQuery    &quot;))</code>。</li>
<li>将JSON格式的字符串，转换为JSON对象：<code>var gareen = $.parseJSON(string3)</code>。</li>
</ul>
</li>
<li><strong>对象转换</strong>：<ul>
<li>jQuery 转 DOM——用<code>[0]</code>或者<code>get(0)</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div= $(<span class="string">"#d"</span>);</span><br><span class="line"><span class="keyword">var</span> d = div[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>DOM 转 jQuery——用<code>$()</code>：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line"><span class="keyword">var</span> d = $(div);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/2017/11/06/AJAX/</url>
    <content><![CDATA[<ul>
<li><strong>本示例中的 JSP 的代码</strong>：<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%  String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"abc"</span>.equals(name))</span><br><span class="line">        out.print(<span class="string">"&lt;font color='red'&gt;已经存在&lt;/font&gt;"</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        out.print(<span class="string">"&lt;font color='green'&gt;可以使用&lt;/font&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><strong>AJAX</strong>（Asynchronous JavaScript and XML）是一种无需重新加载整个页面的情况下，对网页的某部分进行更新的技术。  </li>
<li><strong>Hello AJAX</strong>：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>输入账号：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">onkeyup</span>=<span class="string">"check()"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"checkResult"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> url = <span class="string">"http://how2j.cn/study/checkName.jsp?name="</span> + name;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 响应函数</span></span></span><br><span class="line">    xmlhttp.onreadystatechange = checkResult;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 设置访问的页面</span></span></span><br><span class="line"><span class="actionscript">    xmlhttp.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 执行访问</span></span></span><br><span class="line"><span class="actionscript">    xmlhttp.send(<span class="literal">null</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 只有在用"POST"，并且需要发送参数的时候，才会使用到send。</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// xmlhttp.send("user="+username+"&amp;password="+password)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">checkResult</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'checkResult'</span>).innerHTML = xmlhttp.responseText;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/2017/11/06/JSON/</url>
    <content><![CDATA[<ul>
<li><strong>Hello JSON</strong>：<ul>
<li><strong>JSON</strong>（JavaScript Object Notation）翻译为：JavaScript 对象表示法。它是一种存储数据的方式。</li>
<li>创建 JSON 对象：<code>var gareen = {&quot;name&quot;:&quot;盖伦&quot;, &quot;hp&quot;:616};</code></li>
<li>访问 JSON 对象：<code>document.write(&quot;英雄名称：&quot; + gareen.name);</code><a id="more"></a>




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>JSON 数组</strong>：<ul>
<li>创建 JSON 数组：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> heros = </span><br><span class="line">[</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"盖伦"</span>, <span class="string">"hp"</span>:<span class="number">616</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"提莫"</span>, <span class="string">"hp"</span>:<span class="number">313</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"死哥"</span>, <span class="string">"hp"</span>:<span class="number">432</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"火女"</span>, <span class="string">"hp"</span>:<span class="number">389</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"JSON 数组大小："</span> + heros.length);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>访问 JSON 数组：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"第4个英雄是："</span> + heros[<span class="number">3</span>].name);</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>对象转换</strong>：<ul>
<li>JSON 对象与 JavaScript 对象：JavaScript 对象分内置对象（Number、String、Array、Date、Math）和自定义对象。JSON 就是自定义对象，只不过是以 JSON 这样的数据组织方式表达出来，所以不存在 JSON 对象与 JavaScript 对象的转换问题。</li>
<li>字符串转为 JSON 对象：通过字符串拼接得到一个 JSON 结构的字符串，并不是一个 JSON 对象，需要通过 eval 或者使用 JQuery 的 $.parseJSON 转换函数转换得到：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"&#123;\"name\":\"盖伦\""</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">", \"hp\":616&#125;"</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = s1 + s2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"这是一个JSON格式的字符串："</span> + s3);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="comment">// eval 函数要以'('开头，以')'结尾 </span></span><br><span class="line"><span class="keyword">var</span> gareen = <span class="built_in">eval</span>(<span class="string">"("</span> + s3 + <span class="string">")"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"这是一个JSON对象："</span> + gareen);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML DOM</title>
    <url>/2017/11/04/HTML-DOM/</url>
    <content><![CDATA[<p><strong>节点概念</strong>：</p>
<ul>
<li><strong>DOM</strong> 是 <strong>Document Object Model</strong>（文档对象模型）的缩写。它是把HTML里面的各种数据当作对象进行操作的一种思路。 </li>
<li>DOM 把所有的 HTML 都转换为节点：整个文档是一个节点，元素是节点，元素属性是节点，元素内容是节点q，注释也是节点。</li>
<li>节点类型举例：[object HTMLDocument]、[object HTMLDivElement]、[object Attr]、[object Text]、[object HTMLInputElement]…<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>hello HTML DOM<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">p</span><span class="params">(s)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(s);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</span></span><br><span class="line"><span class="javascript">p(<span class="string">"文档节点"</span>+<span class="built_in">document</span>);</span></span><br><span class="line"><span class="actionscript">p(<span class="string">"元素"</span>+div1);</span></span><br><span class="line"><span class="actionscript">p(<span class="string">"属性节点"</span>+div1.attributes[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">p(<span class="string">"内容节点"</span>+div1.childNodes[<span class="number">0</span>]);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<p><strong>获取节点</strong>（JavaScript 是解释语言，顺序执行）：</p>
<ul>
<li><code>document.getElementById(&quot;d1&quot;)</code></li>
<li><code>document.getElementsByTagName(&quot;div&quot;)</code></li>
<li><code>document.getElementsByClassName(&quot;d&quot;)</code></li>
<li><code>document.getElementsByName(&quot;userName&quot;)</code></li>
</ul>
<p><strong>获取属性节点</strong>：首先通过 document.getElementById 获取元素节点，然后通过元素节点的 attributes 获取其下所有的属性节点。<br>因为属性节点是多个，所以是以数组的形式返回出来的，接着通过 for 循环遍历，查看每个节点的 nodeName 和 nodeValue。</p>
<p><strong>获取内容节点</strong>：首先通过 document.getElementById 获取元素节点，然后通过 childNodes 获取其所有的子节点，其中第一个子节点，就是其内容节点，最后借助 nodeName 和 nodeValue 把内容节点的名称和值打印出来。</p>
<p><strong>节点的属性</strong>：</p>
<ul>
<li><code>nodeName</code>，每个节点都有自己的名字，譬如经常用到的 docunment 对象也有，它是固定的—— <strong>#document</strong>。而 <strong>DIV</strong>、<strong>id</strong>、<strong>#text</strong> 等都是节点的属性。</li>
<li><code>nodeValue</code>，表示节点的值，譬如 docunment 对象的 nodeValue 是 null。</li>
<li><code>nodeType</code>表示一个节点的值。不同的节点类型，对应的节点类型值是不一样的。</li>
<li>元素上的文本内容——<code>innerHTML</code>，我们可以通过<code>childNodes[0].nodeValue</code>改变元素的文本内容，另一种效果一样的方式是通过<code>innerHTML</code>进行：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDiv1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>).childNodes[<span class="number">0</span>].nodeValue=<span class="string">"通过childNode[0].value改变内容"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDiv2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>).innerHTML=<span class="string">"通过innerHTML改变内容"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>元素上的属性，比如 id、value 可以通过<code>.</code>直接访问，如果是自定义属性，那么可以通过如下两种方式来获取：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xxx.getAttribute(<span class="string">"test"</span>)</span><br><span class="line">xxx.attributes[<span class="string">"test"</span>].nodeValue</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<p><strong>HTML DOM 样式</strong>——就是改变元素对应的 style，如<code>none</code>、<code>inline</code>、<code>block</code>等；当然也可以改变背景颜色（style.backgroudColor）等操作。</p>
<p><strong>HTML DOM 事件</strong>：</p>
<ul>
<li>焦点事件：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onfocus</span>=<span class="string">"f()"</span> <span class="attr">onblur</span>=<span class="string">"b()"</span> <span class="attr">id</span>=<span class="string">"input1"</span> <span class="attr">placeHolder</span>=<span class="string">"输入框1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>鼠标事件：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当在组件上鼠标按下的时候，会触发 onmousedown 事件</span><br><span class="line">当在组件上鼠标弹起的时候，会触发 onmouseup 事件</span><br><span class="line">当在组件上鼠标经过的时候，会触发 onmousemove 事件</span><br><span class="line">当在组件上鼠标进入的时候，会触发 onmouseover 事件</span><br><span class="line">当在组件上鼠标退出的时候，会触发 onmouseout 事件</span><br></pre></td></tr></table></figure></li>
<li>键盘事件——<code>onkeydown</code>、<code>onkeypress</code>、<code>onkeyup</code>（一般来说 onkeydown 能监视更多的键）：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onkeydown</span>=<span class="string">"down(event)"</span> <span class="attr">value</span>=<span class="string">"用于演示按下keydown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> number =<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> text = <span class="string">"按下了键"</span> + e.keyCode;</span></span><br><span class="line">        if(e.shiftKey == 1) &#123;</span><br><span class="line"><span class="actionscript">            text += <span class="string">" 并且按下了shift键"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>).innerHTML = text;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>点击事件：<code>onclick</code>、<code>ondblclick</code>。</li>
<li>变化事件——当组件的值发生变化的时候，会触发<code>onchange</code>事件（对于输入框，只有失去焦点才算发生变化）。</li>
<li>提交事件——可以在 form 元素上，监听提交事件。例子：form 元素提交的时候，会触发<code>onsubmit</code>事件：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/study/login.jsp"</span> <span class="attr">onsubmit</span>=<span class="string">"login()"</span>&gt;</span></span><br><span class="line">    账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"提交表单"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>加载事件——当整个文档加载成功，或者一个图片加载成功，会触发加载事件<code>onload</code>。</li>
<li>当前组件——<code>this</code>表示触发事件的组件，可以在调用函数的时候，作为参数传进去：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"singleClick(this)"</span> <span class="attr">value</span>=<span class="string">"演示this的按钮1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"singleClick(this)"</span> <span class="attr">value</span>=<span class="string">"演示this的按钮2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">singleClick</span><span class="params">(button)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> s = <span class="string">"被点击的按钮上的文本是:"</span>+button.value;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>).innerHTML=s;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>阻止事件的发生——①在调用函数的时候，增加一个return；②在函数中，如果发现用户名为空，则返回 false；③当 onSubmit 得到的返回值是 false 的时候，表单的提交功能就被取消了：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;study&#x2F;login.jsp&quot; onsubmit&#x3D;&quot;return login()&quot;&gt;</span><br><span class="line">    账号：&lt;input id&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt; &lt;br&#x2F;&gt;</span><br><span class="line">    密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt; &lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登陆&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function login() &#123;</span><br><span class="line">        var name &#x3D; document.getElementById(&quot;name&quot;);</span><br><span class="line">        if(name.value.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            alert(&quot;用户名不能为空&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<p><strong>节点关系</strong>——<code>parentNode</code>、<code>firstNode</code>、<code>lastNode</code>、<code>previousSibling</code>、<code>nextSibling</code>、<code>children</code>。<br>    - <code>children</code>和<code>childNotes</code>的区别：childNotes包含<strong>#text</strong>类型的子元素。</p>
<p><strong>创建节点</strong>（通过<code>createElement()</code>、<code>x.appendChild(y)</code>、<code>x.nodeValue = &quot; &quot;</code>和<code>a.setAttributeNode(href)</code>）：<br>    - 创建元素节点：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hr = <span class="built_in">document</span>.createElement(<span class="string">"hr"</span>);</span><br><span class="line">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line">    div1.appendChild(hr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--><br>    - 创建文本节点：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"这是通过DOM创建出来的&lt;p&gt;"</span>);</span><br><span class="line">    p.appendChild(text);</span><br><span class="line">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line">    div1.appendChild(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--><br>    - 创建属性节点：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">var</span> content = <span class="built_in">document</span>.createTextNode(<span class="string">"http://12306.com"</span>);</span><br><span class="line">    a.appendChild(content);</span><br><span class="line">    <span class="keyword">var</span> href = <span class="built_in">document</span>.createAttribute(<span class="string">"href"</span>);</span><br><span class="line">    href.nodeValue = <span class="string">"http://12306.com"</span>;</span><br><span class="line">    a.setAttributeNode(href);</span><br><span class="line">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line">    div1.appendChild(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--></p>
<p><strong>删除节点</strong>：<br>    - 删除元素节点——①先获取该元素的父节点；②通过父节点，调用<code>removeChild</code>删除该节点：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parentDiv = <span class="built_in">document</span>.getElementById(<span class="string">"parentDiv"</span>);</span><br><span class="line">    <span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span><br><span class="line">    parentDiv.removeChild(div2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--><br>    - 删除属性节点——①先获取该元素节点；②元素节点调用<code>removeAttribute()</code>删除指定属性节点：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHref</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</span><br><span class="line">    link.removeAttribute(<span class="string">"href"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    - 删除文本节点——①通过<code>childNodes[i]</code>获取文本节点（<code>children[i]</code>只能获取非文本子元素节点）；②通过<code>removeChild()</code>删除该文本节点。另一种方式是直接用<code>x.innerHTML=&quot;&quot;</code>将文本置空。</p>
<p><strong>替换节点</strong>：<br>    - 步骤为：①获取父节点；②创建子节点；③获取被替换子节点；④通过<code>parentDiv.replaceChild(d1, d2)</code>进行替换：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d4 = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"第四个div"</span>);</span><br><span class="line">    d4.appendChild(text);</span><br><span class="line">    <span class="keyword">var</span> d3 = <span class="built_in">document</span>.getElementById(<span class="string">"d3"</span>);</span><br><span class="line">    <span class="keyword">var</span> parentDiv = <span class="built_in">document</span>.getElementById(<span class="string">"parentDiv"</span>);</span><br><span class="line">    parentDiv.replaceChild(d4, d3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--></p>
<p><strong>插入节点</strong>：<br>    - 追加节点——<code>parentDiv.appendChild(div1)</code><br>    - 在后面追加节点用<code>insertBefore</code>——①创建新节点；②获取父节点；③获取需要加入的子节点；④通过<code>insertBefore</code>插入：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d3 = <span class="built_in">document</span>.getElementById(<span class="string">"d3"</span>);</span><br><span class="line">parentDiv.insertBefore(d25, d3);</span><br></pre></td></tr></table></figure><br>    <!--lalala--><br>    - 一个小例子，动态插入节点：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    newScript.src = <span class="string">'http://how2j.cn/study/test3041.js'</span>;</span><br><span class="line">    <span class="keyword">var</span> firstScript = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    firstScript.parentNode.insertBefore(newScript, firstScript);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--></p>
<p><strong>常用场景</strong>：<br>    - 确认后删除：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteRow</span>(<span class="params">link</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = confirm(<span class="string">"确定删除？"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">"heroTable"</span>);</span><br><span class="line">    <span class="keyword">var</span> td = link.parentNode;</span><br><span class="line">    <span class="keyword">var</span> tr = td.parentNode;</span><br><span class="line">    <span class="keyword">var</span> index = tr.rowIndex;</span><br><span class="line">    table.deleteRow(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    <!--lalala--><br>    - 验证邮件格式是否正确：<br>    <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Regex = <span class="regexp">/^(?:\w+\.?)*\w+@(?:\w+\.)*\w+$/</span>;        </span><br><span class="line"><span class="keyword">if</span> (!Regex.test(email.value))&#123;                </span><br><span class="line">    alert(<span class="string">"email格式不正确"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><br>    <!--lalala--><br>    - 是否是数字：<code>isNaN(xxx)</code><br>    - 是否是整数：<code>if (parseInt(xxx) != xxx) {...}</code></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet 基础小记</title>
    <url>/2017/10/26/Servlet-%E5%9F%BA%E7%A1%80%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li><p>添加一个 Servlet 时需要配置一下 WEB-INF 目录下的 web.xml 文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>中文问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ①在HTML中加上</span></span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②在Servlet中解码和正确编码</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = name.getBytes(<span class="string">"ISO-8859-1"</span>);</span><br><span class="line">name = <span class="keyword">new</span> String(bytes,<span class="string">"UTF-8"</span>);</span><br><span class="line">&amp;</span><br><span class="line"><span class="comment">// 下面这句需要放在 request.getParameter() 之前</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// ③返回中文响应</span></span><br><span class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ④另一个需要注意的地方，在调试服务端时，在 log 中可能看到 ??? 之类的乱码</span></span><br><span class="line"><span class="comment">// 除了在上述的地方设置，还需要设置一下 VM options：-Dfile.encoding=UTF-8</span></span><br></pre></td></tr></table></figure></li>
<li><p>Servlet生命周期：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ①实例化——调用Servlet类的无参构造方法——只执行一次</span></span><br><span class="line">XxxServlet() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②初始化——只执行一次</span></span><br><span class="line">init(ServletConfig) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③提供服务——在其中可以继续选择doGet(...)或者doPost(...)</span></span><br><span class="line">service() (HttpServletRequest request, HttpServletResponse response) </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ④销毁——destroy()</span></span><br><span class="line"><span class="comment">// web应用自动重启、关闭tomcat的时候destroy()都会被调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ⑤当该Servlet被销毁后，就满足垃圾回收的条件了。</span></span><br><span class="line"><span class="comment">// 当下一次垃圾回收GC来临的时候，就有可能被回收。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>跳转——服务器端跳转、客户端跳转：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务端跳转，路径地址并不会变</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"success.html"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端跳转，路径地址会改变</span></span><br><span class="line">response.sendRedirect(<span class="string">"fail.html"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>自启动——有的时候会有这样的业务需求——tomcat一启动，就需要执行一些初始化的代码，比如校验数据库的完整性等，但是Servlet的生命周期是在用户访问浏览器对应的路径开始的，如果没有用户的第一次访问，就无法执行相关代码。解决如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 取值范围是1-99，这样配置后表明该Servlet会随着Tomcat的启动而初始化 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码中的10表示启动顺序，如果有多个Servlet都配置了自动启动，小的数字先启动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>10<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>request的常见方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestURL()        ——浏览器发出请求时的完整URL，包括协议、主机名和端口(如果有)</span><br><span class="line">request.getRequestURI()        ——浏览器发出请求的资源名部分，去掉了协议和主机名 </span><br><span class="line">request.getQueryString()       ——请求行中的参数部分，只能显示以 get 方式发出的参数</span><br><span class="line">request.getRemoteAddr()        ——浏览器所处于的客户机的IP地址</span><br><span class="line">request.getRemoteHost()        ——浏览器所处于的客户机的主机名</span><br><span class="line">request.getRemotePort()        ——浏览器所处于的客户机使用的网络端口</span><br><span class="line">request.getLocalAddr()         ——服务器的IP地址</span><br><span class="line">request.getLocalName()         ——服务器的主机名</span><br><span class="line">request.getMethod()            ——得到客户机请求方式一般是 GET 或者 POST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line">request.getParameter()         ——获取单值的参数</span><br><span class="line">request.getParameterValues()   ——用于获取具有多值得参数，比如注册的时候提交的爱好，可以使多选的</span><br><span class="line">request.getParameterMap()      ——用于遍历所有的参数，并返回Map类型</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"获取单值参数name："</span> + request.getParameter(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">String[] hobits = request.getParameterValues(<span class="string">"hobits"</span>);</span><br><span class="line">System.out.println(<span class="string">"获取具有多值的参数hobits："</span> + Arrays.asList(hobits));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"通过getParameterMap遍历所有的参数："</span>);</span><br><span class="line">Map&lt;String, String[]&gt; parameters = request.getParameterMap();</span><br><span class="line">Set&lt;String&gt; paramNames = parameters.keySet();</span><br><span class="line"><span class="keyword">for</span> (String param : paramNames) &#123;</span><br><span class="line">    String[] value = parameters.get(param);</span><br><span class="line">    System.out.println(param + <span class="string">":"</span> + Arrays.asList(value));</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 获取头信息，获取浏览器传递过来的头信息。用法：getHeader("user-agent") </span></span><br><span class="line">request.getHeader()</span><br><span class="line"><span class="comment">// 获取所有的头信息名字：host、user-agent（浏览器基本资料）、accept、accept-language、</span></span><br><span class="line"><span class="comment">// accept-encoding（压缩方式）、connection（是否保持链接）、cache-control(缓存时限)</span></span><br><span class="line">request.getHeaderNames()</span><br><span class="line">    </span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">    String header = headerNames.nextElement();</span><br><span class="line">    String value = request.getHeader(header);</span><br><span class="line">    System.out.printf(<span class="string">"%s\t%s%n"</span>, header, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>response的常见方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置响应内容</span></span><br><span class="line"><span class="comment">// 通过response.getWriter()获取一个PrintWriter对象</span></span><br><span class="line"><span class="comment">// 可以使用println()、append()、write()、format()等等方法设置返回给浏览器的html内容</span></span><br><span class="line">PrintWriter pw= response.getWriter();</span><br><span class="line">pw.println(<span class="string">"&lt;h1&gt;Hello Servlet&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应格式、编码方式。如果浏览器看不懂 response 的类型，会直接弹出下载对话框</span></span><br><span class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 这种方式只告诉 Web 容器返回“UTF-8”的响应，而不会告诉浏览器使用什么方式解析</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端跳转：301 和 302，用户感受不出这两种跳转的区别，这是属于 SEO 范畴的概念</span></span><br><span class="line"><span class="comment">// 302 表示临时跳转</span></span><br><span class="line">response.sendRedirect(<span class="string">"fail.html"</span>);</span><br><span class="line"><span class="comment">// 301 表示永久性跳转（永久+301...手动戴黑框眼镜👓）</span></span><br><span class="line">response.setStatus(<span class="number">301</span>);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"fail.html"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置不使用缓存</span></span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">response.setHeader(<span class="string">"Cache-Controll"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"pragma"</span>, <span class="string">"no-cache"</span>);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>上传文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 准备 HTML，注意：① form 的 method 必须是 post 的，get 不能上传文件</span><br><span class="line">// ② 加上 enctype="multipart/form-data" 表示提交的数据是二进制文件</span><br><span class="line">// ③ 需要提供 type="file" 的字段进行上传</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"uploadPhoto"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    英雄名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"heroName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    上传头像:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filepath"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// new 一个 DiskFileItemFactory 实例</span><br><span class="line">// 利用 DiskFileItemFactory 的实例 new 一个 ServletFileUpload 实例</span><br><span class="line">// 利用 DiskFileItemFactory 实例 设置上传文件的大小限制</span><br><span class="line">// 利用 ServletFileUpload 实例的 parseRequest() 解析 传入 doPost()函数 的 request 参数，得到一个 List</span><br><span class="line">// 遍历这个List，将每个单元转换为 FileItem 类型，如果转换后发现它是 FormField 类型就将其实例化某个目录中的文件</span><br><span class="line">// 实例化方法：</span><br><span class="line">// ①起一个文件名 ②设置一个文件将要存放的目录</span><br><span class="line">// ③将前两项作为参数 new 一个文件实体 f，再 f.getParentFile().mkdirs()</span><br><span class="line">// ④FormField 类型的文件使用 getInputStream() 获得一个二进制输入流</span><br><span class="line">// ⑤在文件实例上建立一个二进制文件输出流</span><br><span class="line">// ⑥用一个合适大小的数组做缓存 将二进制数据从输入流写入缓存 再从缓存写入输出流</span><br><span class="line">// ⑦关闭输出流</span><br><span class="line">public class UploadPhotoServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doPost(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">    </span><br><span class="line">        String filename = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            DiskFileItemFactory factory = new DiskFileItemFactory();</span><br><span class="line">            ServletFileUpload upload = new ServletFileUpload(factory);</span><br><span class="line">            // 设置上传文件的大小限制为1M</span><br><span class="line">            factory.setSizeThreshold(1024 * 1024);</span><br><span class="line">    </span><br><span class="line">            List items = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                items = upload.parseRequest(request);</span><br><span class="line">            &#125; catch (FileUploadException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            Iterator iterator = items.iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                FileItem item = (FileItem) iterator.next();</span><br><span class="line">                if (!item.isFormField()) &#123;</span><br><span class="line">    </span><br><span class="line">                    // 根据时间戳创建头像文件</span><br><span class="line">                    filename = System.currentTimeMillis() + ".jpg";</span><br><span class="line">    </span><br><span class="line">                    // 通过 getRealPath 获取上传文件夹，如果项目在e:/project/j2ee/web</span><br><span class="line">                    // 那么就会自动获取到 e:/project/j2ee/web/uploaded</span><br><span class="line">                    String photoFolder = request.getServletContext().getRealPath("uploa</span><br><span class="line">ded");</span><br><span class="line">    </span><br><span class="line">                    File f = new File(photoFolder, filename);</span><br><span class="line">                    f.getParentFile().mkdirs();</span><br><span class="line">    </span><br><span class="line">                    // 通过item.getInputStream()获取浏览器上传的文件的输入流</span><br><span class="line">                    InputStream is = item.getInputStream();</span><br><span class="line">    </span><br><span class="line">                    // 复制文件</span><br><span class="line">                    FileOutputStream fos = new FileOutputStream(f);</span><br><span class="line">                    byte b[] = new byte[1024 * 1024];</span><br><span class="line">                    int length = 0;</span><br><span class="line">                    while (-1 != (length = is.read(b))) &#123;</span><br><span class="line">                        fos.write(b, 0, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                    fos.close();</span><br><span class="line">    </span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.println(item.getFieldName());</span><br><span class="line">                    String value = item.getString();</span><br><span class="line">                    value = new String(value.getBytes("ISO-8859-1"), "UTF-8");</span><br><span class="line">                    System.out.println(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            String html = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">'200'</span> <span class="attr">height</span>=<span class="string">'150'</span> <span class="attr">src</span>=<span class="string">'uploaded/%s'</span> /&gt;</span>";</span><br><span class="line">            response.setContentType("text/html");</span><br><span class="line">            PrintWriter pw = response.getWriter();</span><br><span class="line">    </span><br><span class="line">            pw.format(html, filename);</span><br><span class="line">    </span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON 传输：</p>
<ul>
<li><p>向服务器提交数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前台：</span></span><br><span class="line">$(<span class="string">'#sender'</span>).click(function () &#123;</span><br><span class="line">    <span class="keyword">var</span> name = document.getElementById(<span class="string">'name'</span>).value;</span><br><span class="line">    <span class="keyword">var</span> hp = document.getElementById(<span class="string">'hp'</span>).value;</span><br><span class="line">    <span class="keyword">var</span> hero = &#123;<span class="string">"name"</span>: name, <span class="string">"hp"</span>: hp&#125;;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"submitServlet"</span>;</span><br><span class="line">    $.post(</span><br><span class="line">        url,</span><br><span class="line">        &#123;<span class="string">"data"</span>: JSON.stringify(hero)&#125;,</span><br><span class="line">        function (data) &#123;</span><br><span class="line">            alert(<span class="string">"提交成功，请在Tomcat控制台查看服务端接收到的数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubmitServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span> <span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function">        					<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        String data = request.getParameter(<span class="string">"data"</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务端接收到的数据是："</span> + data);</span><br><span class="line">        JSONObject json = JSONObject.fromObject(data);</span><br><span class="line">        System.out.println(<span class="string">"转换为JSON对象之后是："</span> + json);</span><br><span class="line">        Hero hero = (Hero) JSONObject.toBean(json, Hero<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"转换为Hero对象之后是："</span> + hero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从服务端获得一个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前台：</span></span><br><span class="line">$(<span class="string">'#sender'</span>).click(function () &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"getOneServlet"</span>;</span><br><span class="line">    $.post(</span><br><span class="line">        url,</span><br><span class="line">        function (data) &#123;</span><br><span class="line">            <span class="keyword">var</span> json = JSON.parse(data);</span><br><span class="line">            <span class="keyword">var</span> name = json.hero.name;</span><br><span class="line">            <span class="keyword">var</span> hp = json.hero.hp;</span><br><span class="line">            $(<span class="string">"#messageDiv"</span>).html(<span class="string">"英雄名称："</span> + name + <span class="string">"&lt;br&gt;英雄血量："</span> + hp);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetOneServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span> <span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function">        				    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">        hero.setName(<span class="string">"盖伦"</span>);</span><br><span class="line">        hero.setHp(<span class="number">353</span>);</span><br><span class="line">        JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        json.put(<span class="string">"hero"</span>, JSONObject.fromObject(hero));</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        pw.print(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从服务端获得多个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前台：</span></span><br><span class="line">$(<span class="string">'#sender'</span>).click(function () &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"getManyServlet"</span>;</span><br><span class="line">    $.post(</span><br><span class="line">        url,</span><br><span class="line">        function (data) &#123;</span><br><span class="line">            <span class="keyword">var</span> heros = $.parseJSON(data);</span><br><span class="line">            <span class="keyword">for</span> (i in heros) &#123;</span><br><span class="line">                <span class="keyword">var</span> old = $(<span class="string">"#messageDiv"</span>).html();</span><br><span class="line">                <span class="keyword">var</span> hero = heros[i];</span><br><span class="line">                $(<span class="string">"#messageDiv"</span>).html(old + <span class="string">"&lt;br&gt;"</span> + hero.name + <span class="string">"   -----   "</span> + hero.hp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetManyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span> <span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            				<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">            hero.setName(<span class="string">"name"</span> + i);</span><br><span class="line">            hero.setHp(<span class="number">500</span> + i);</span><br><span class="line">            heros.add(hero);</span><br><span class="line">        &#125;</span><br><span class="line">        String result = JSONSerializer.toJSON(heros).toString();</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().print(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 基础小记</title>
    <url>/2017/10/25/Tomcat-%E5%9F%BA%E7%A1%80%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li>从 <a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Apache 官网</a>下载 Tomcat 解压后，执行 …/tomcat/bin 目录下的 startup.sh 文件，Tomcat 就启动啦。你可以通过 8080 端口（即 127.0.0.1:8080）来访问 Tomcat。关闭 Tomcat 也很简单，执行 shutdown.sh 文件就行。</li>
<li>8080 端口可以改成任一不冲突的其他端口，就是在 …/tomcat/conf/server.xml 文件中更改一下 Connector port 。</li>
<li>macOS 解决端口占用问题：①使用 <code>lsof -i:8080 | grep LISTEN</code> 查看占用的进程，然后用 <code>kill -9 PID</code> 杀掉进程就好了。</li>
</ul>
]]></content>
      <tags>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>跟廖雪峰学习Git</title>
    <url>/2017/10/23/%E8%B7%9F%E5%BB%96%E9%9B%AA%E5%B3%B0%E5%AD%A6%E4%B9%A0Git/</url>
    <content><![CDATA[<ul>
<li><code>git init</code>                    ——创建本地仓库</li>
<li><code>git add ***</code>                 ——把文件添加到本地仓库</li>
<li><code>git commit -m &quot;description&quot;</code> ——把文件提交到仓库并添加描述</li>
<li><code>git commit</code>                  ——更详细地纪录信息，#号不删除，在后面添加，标题和正文之前要有空行</li>
<li><code>git status</code>                  ——掌握当前仓库状态</li>
<li><code>git diff</code>                    ——查看当前工作树与暂存区的差别（工作树 add 到暂存区后它俩就没区别）</li>
<li><code>git diff HEAD</code>               ——查看工作树和最新提交的差别，可在执行 <code>git add</code> 后、执行 <code>git commit</code> 前执行，等确认完毕后再进行提交（这里的 <code>HEAD</code> 是指向当前分支中最新一次提交的指针）</li>
<li><code>git log (可加文件名，后面同)</code>   ——显示从最近到最远的提交日志</li>
<li><code>git log --pretty=oneline</code>    ——查看简略版的提交日志</li>
<li><code>git log -p</code>                  ——显示文件的改动</li>
<li><code>git reset --hard HEAD^</code>      ——回退到上一个版本</li>
<li><code>git branch</code>                  ——显示分支一览表，同时查看当前所在分支</li>
<li><code>git checkout -b &quot;feature&quot;</code>   ——创建、切换分支。在此分支下做事不会影响到 master，<code>-b</code>应该是“没有就创建”的意思</li>
<li><code>git checkout -</code>              ——<code>-</code> 是上一个分支的意思</li>
<li><code>git merge --no-ff feature-A</code> ——合并分支</li>
<li><code>git log --graph</code>             ——以图形查看日志</li>
<li><code>git reflog</code>                  ——如果回退了，再想回到回退之前，就需要用这个命令查看回退点后的 log</li>
<li>当分支合并冲突的时候，需要处理冲突的文件，然后再 add，再 commit。</li>
<li><code>git commit --amend</code>          ——修改上一条提交信息</li>
<li><code>git rebase -i （如HEAD~2）</code>   ——压缩历史（将 pick 改成 fixup）</li>
<li><code>git commit -am &quot;balabala&quot;</code>   ——一次性 add 和 commit</li>
<li><code>git remote add &quot;标识符&quot; git@github.com:XIJINIAN/git-tutorial.git</code>  ——链接远程仓库</li>
<li><code>git push -u &quot;标识符&quot; master</code>  ——推送本地仓库到远程仓库</li>
<li><code>git push -u &quot;标识符&quot; feature-D</code>——推送至 master 以外的分支至远程仓库</li>
<li><code>git clone git@github.com:github-book/git-tutorial.git</code>   ——将 GitHub 上的仓库 clone 到本地（默认 master 分支）</li>
<li><code>git checkout -b feature-D &quot;标识符&quot;/feature-D</code>  ——在本地新建分支 feature-D 并获取远程的 feature-D 分支</li>
<li><code>git pull &quot;标识符&quot; feature-D</code>  ——获取远端最新分支内容到本地工作区</li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>针对Web的攻击技术</title>
    <url>/2017/10/19/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><strong>大话针对Web的攻击技术</strong>：</p>
<ul>
<li>简单的HTTP协议本身并不存在安全性问题，因此协议本身几乎不会成为攻击的对象。应用HTTP协议的服务器和客户端，以及运行在服务器上的Web应用等资源才是攻击目标。</li>
<li>对Web应用的攻击模式有以下两种：主动攻击、被动攻击。</li>
<li>主动攻击：指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。主动攻击模式里具有代表性的攻击是<strong>SQL注入攻击</strong>和<strong>OS命令注入攻击</strong>。<a id="more"></a></li>
<li>被动攻击：指利用圈套策略执行攻击代码的攻击模式，在被动攻击过程中，攻击者不直接对目标Web应用访问发起攻击。被动攻击模式中具有代表性的攻击是<strong>跨站脚本攻击</strong>和<strong>跨站点请求伪造</strong>。利用被动攻击，可发起对原本从互联网上无法直接访问的企业内网等网络的攻击。只要用户踏入攻击者预先设好的陷阱，在用户能够访问到的网络范围内，即使是企业内网也同样会受到攻击。</li>
</ul>
<p><strong>因输出值转义不完全引发的安全漏洞</strong>：</p>
<ul>
<li>跨站脚本攻击（Cross-Site Scripting，XSS）：指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用虚假输入表单骗取用户个人信息。</span><br><span class="line">利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</span><br><span class="line">显示伪造的文章或图片。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>SQL注入攻击</li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结</title>
    <url>/2017/10/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ul>
<li>各种排序算法的性能特点：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fkmpi6ab0ij30md0eywf4.jpg" alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/2017/10/18/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>在了解堆排序之前，我们先了解一下优先队列——优先队列是一种抽象数据类型，它表示一组值和对这些值的操作，其中最重要的两个操作是<strong>删除最大元素</strong>和<strong>插入元素</strong>。现在我们要实现一个优先队列，要求是：插入元素和删除最大元素的时间复杂度均为$\log_2 N$。</li>
<li>堆排序是原地排序，时间复杂度是$N\log_2 N$，空间复杂度是1。<a id="more"></a></li>
<li>基于堆构造的优先队列：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxPQ</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key[] pq;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxPQ</span><span class="params">(<span class="keyword">int</span> maxN)</span> </span>&#123;</span><br><span class="line">        pq = (Key[]) <span class="keyword">new</span> Comparable[maxN + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Key v)</span> </span>&#123;</span><br><span class="line">        pq[++N] = v;</span><br><span class="line">        swim(N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Key max = pq[<span class="number">1</span>];</span><br><span class="line">        exch(<span class="number">1</span>, N--);</span><br><span class="line">        pq[N + <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Key t = pq[i];</span><br><span class="line">        pq[i] = pq[j];</span><br><span class="line">        pq[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>, k)) &#123;</span><br><span class="line">            exch(k / <span class="number">2</span>, k);</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j + <span class="number">1</span>)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!less(k, j)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>基于<code>sink</code>的堆排序的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Heap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] pq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pq.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = n / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">            sink(pq, k, n);</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            exch(pq, <span class="number">1</span>, n--);</span><br><span class="line">            sink(pq, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(Comparable[] pq, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n &amp;&amp; less(pq, j, j + <span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(pq, k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(pq, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable[] pq, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pq[i - <span class="number">1</span>].compareTo(pq[j - <span class="number">1</span>]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] pq, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Object swap = pq[i - <span class="number">1</span>];</span><br><span class="line">        pq[i - <span class="number">1</span>] = pq[j - <span class="number">1</span>];</span><br><span class="line">        pq[j - <span class="number">1</span>] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            StdOut.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] a = StdIn.readAllStrings();</span><br><span class="line">        Heap.sort(a);</span><br><span class="line">        show(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2017/10/18/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>快速排序的特点就是快，而且还是原地排序（只需要一个很小的辅助栈），时间复杂度是$N\log_2 N$，空间复杂度是$\log_2 N$。</li>
<li>快速排序的原理很简单，就是选择一个数的值，然后数组分别从两端向中间扫描，我们要保证左指针左边的数都不大于这个数的值、右指针右边的数都不小于这个数。然后将左指针出现的第一个反例和右指针出现的第一个反例交换位置，然后是第二个…第三个…直到这两个指针相遇时，我们交换右指针和当初选择的数。当然，还有一点需要注意，我们的交换元素是在递归中进行的。<a id="more"></a></li>
<li>基本函数和测试函数：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] stdIn = <span class="keyword">new</span> In(args[<span class="number">0</span>]).readAllStrings();</span><br><span class="line">        Quick.sort(stdIn);</span><br><span class="line">        show(stdIn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        StdRandom.shuffle(a);</span><br><span class="line">        <span class="comment">// Quick2way.sort(a, 0, a.length - 1);</span></span><br><span class="line">        <span class="comment">// Quick3way.sort(a, 0, a.length - 1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable comparable: a) &#123;</span><br><span class="line">            System.out.print(comparable + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>二向切分快速排序：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick2way</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">        sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = hi + <span class="number">1</span>;</span><br><span class="line">        Comparable v = a[lo];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (Quick.less(a[++i], v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == hi) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (Quick.less(v, a[--j])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == lo) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Quick.exch(a, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        Quick.exch(a, lo, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>三向切分快速排序——为了解决当数组中存在大量重复元素而进行多次交换的时间浪费，它的时间复杂度在$\frac{N\log_2 N}{2}$和$N\log_2 N$之间（重复元素越多越快），空间复杂度仍是$\log_2 N$。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick3way</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> lt = lo, i = lo + <span class="number">1</span>, gt = hi;</span><br><span class="line">        Comparable v = a[lo];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                Quick.exch(a, lt++, i++);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Quick.exch(a, i, gt--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(a, lo, lt - <span class="number">1</span>);</span><br><span class="line">            sort(a, gt + <span class="number">1</span>, hi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>简单学习JavaScript</title>
    <url>/2017/10/16/%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0JavaScript/</url>
    <content><![CDATA[<ul>
<li>在html文件中插入js：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./hello.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>js中的注释：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>在js中，基本类型也是伪对象，所以它们都有属性和方法，譬如一个某基本类型的变量a，可以通过<code>a.length</code>获取对象的长度。</li>
<li>可以用<code>typeof</code>来获取对象的类型，如<code>typeof x</code>。</li>
<li>注意：<code>var x = new Number(42); var y = 42;</code>中x的类型是object，y的类型是number。</li>
<li>无论Number、Boolean还是String都有一个toString方法，Number转换为字符串的时候有<strong>默认模式</strong>和<strong>基模式</strong>两种：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">document</span>.write(a.toString());</span><br><span class="line"><span class="built_in">document</span>.write(a.toString(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">document</span>.write(a.toString(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">document</span>.write(a.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>js分别提供内置函数parseInt()和parseFloat()，转换为数字。如果被转换的字符串，同时又数字和字符构成，那么parseInt会一直定位数字，直到出现非字符。所以”10abc”会被转换为10。</li>
<li>js提供了内置函数Boolean()：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当转换字符串                   ——非空即为true</span></span><br><span class="line"><span class="comment">// 当转换数字时                   ——非0即为true</span></span><br><span class="line"><span class="comment">// 当转换对象时                   ——非null即为true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Boolean</span>(<span class="string">""</span>));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Boolean</span>(<span class="string">"hello javascript"</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Boolean</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Boolean</span>(<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Boolean</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Boolean</span>(<span class="keyword">new</span> <span class="built_in">Object</span>()));</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Number()和parseInt()一样，都可以用来进行数字的转换，区别在于，当转换的内容包含非数字的时候，Number()会返回NaN(Not a Number)，parseInt()要看情况，如果以数字开头，就会返回开头的合法数字部分，如果以非数字开头，则返回NaN。</li>
<li>String()和toString()一样都会返回字符串，区别在于对null的处理：String()会返回字符串”null”，toString()就会报错，无法执行。</li>
<li>document是javascript的内置对象，代表浏览器的文档部分，可以使用函数：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>js和DOM结合：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"document.getElementById('text').style.display='none'"</span>&gt;隐藏文本&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="document.getElementById('text').style.display='block'"&gt;显示文本&lt;/</span>button&gt;</span><br><span class="line">&lt;p id=<span class="string">"text"</span>&gt;这个是一段可以被javascript隐藏的文本&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>与<code>==</code>进行值是否相等的判断不同，绝对等<code>===</code>还会进行类型的判断，比如数字1和字符串’1’比较，值是相等的，但是类型不同，所以<code>==</code>会返回true，但是<code>===</code>会返回false。</li>
<li>object类型：<ul>
<li>Number类型：<ul>
<li>极值：<code>Number.MIN_VALUE</code>、<code>Number.MAX_VALUE</code>。</li>
<li>表示不是数字：NaN（Not a Number），当通过非数字创建Number的时候，就会得到NaN：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过非数字创建Number对象，得到的是一个NaN</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"123abc"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 即便是一个NaN，也"不等于"Number.NaN</span></span><br><span class="line"><span class="comment">// 正确的判断方式如下所示</span></span><br><span class="line"><span class="built_in">isNaN</span>(a);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>返回一个数的小数表达：PI通过<code>toFixed(3)</code>保留三位小数:3.142。</li>
<li>返回一个数的科学计数法的形式：<code>b.toExponential();</code></li>
<li>object类型的a可以通过<code>var b = a.valueOf()</code>得到number类型的b。</li>
</ul>
</li>
<li>String类型：<ul>
<li>新建一个String类型的对象：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vay y = <span class="keyword">new</span> <span class="built_in">String</span>(hello world);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="keyword">typeof</span> y);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>区分<code>y.charAt(0)</code>和<code>y.charCodeAt(0)</code>。</li>
<li>字符串拼接：<code>x.concat(y)</code>。</li>
<li>字符串出现的位置：<code>y.indexOf(&quot;o&quot;)</code>、<code>y.lastIndexOf(&quot;o&quot;)</code>。</li>
<li>判断两个字符串是否相等：<code>x.localeCompare(y)</code>，有三个返回值——0（相等）、1（比被比较的字符串靠后）、-1（靠前）。</li>
<li>截取一段子字符串：<code>y.substring(0, 3)</code></li>
<li>根据分隔符，把字符串转换为数组：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = y.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">var</span> j = y.split(<span class="string">" "</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>替换子字符串：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只替换掉第一字符</span></span><br><span class="line"><span class="keyword">var</span> i = y.replace(<span class="string">"o"</span>, <span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换掉所有字符</span></span><br><span class="line"><span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"o"</span>, <span class="string">"g"</span>); <span class="comment">// **"g"**是**global**的意思</span></span><br><span class="line"><span class="keyword">var</span> z = y.replace(regS, <span class="string">"e"</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>所有返回字符串类型的方法，返回的都是基本类型的string。</li>
</ul>
</li>
<li>Array类型：<ul>
<li>创建数组的方式：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据参数创建数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建长度为5的数组，每个元素的类型都是undefined</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>数组长度：<code>a.length</code>。</li>
<li>遍历数组：普通循环的形式跟Java一样，但是增强for循环中，有自己不同的表现形式：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="comment">// i是下标...惊不惊喜！意不意外！开不开心！</span></span><br><span class="line">    p(x[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>连接数组：<code>x.concat(y)</code>。</li>
<li>通过指定分隔符，返回一个数组的字符串表达：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 此刻的y是"1,3,2"</span></span><br><span class="line"><span class="keyword">var</span> y = x.join();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此刻的y是"1@3@2"</span></span><br><span class="line"><span class="keyword">var</span> y = x.join(<span class="string">"@"</span>)</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>push和pop方法（在数组尾部添加和弹出）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x.push(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> e = x.pop();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>unshift和shift方法（在数组头部添加和弹出）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x.unshift(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> e = x.shift();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>对数组的内容进行排序：<code>x.sort()</code>。<strong>在Java中，sort是个带有返回值的函数，需要另一个相同类型的变量承接返回值，所以不会改变原数组</strong>。</li>
<li>自定义排序算法（让人不得不想起来Java中Comparable接口哈）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先需要定义比较器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparator</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v2-v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 利用这个比较器，给数组排序</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>); </span><br><span class="line">x.sort(comparator);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>对数组的内容进行反转：<code>x.reverse()</code>。</li>
<li>获取子数组：假设数组x是<em>3,1,4,1,5,9,2,6</em>，<code>x.slice(1)</code>获取的子数组是<em>1,4,1,5,9,2,6</em>，<code>x.slice(1,3)</code>获取的子数组是<em>1,4</em>，第二个参数取不到。</li>
<li>删除和插入元素：数组x是<em>3,1,4,1,5,9,2,6</em>，<code>x.splice(3, 2)</code>表示从位置3开始，删除2个元素，即<em>3,1,4,9,2,6</em>，<code>x.splice(3, 0, 1, 5)</code>表示从位置3开始，删除0个元素，但是插入1和5，最后得到<em>3,1,4,1,5,9,2,6</em>。</li>
</ul>
</li>
<li>Date对象：<ul>
<li>创建Date类型的object：<code>var d = new Date()</code>。</li>
<li>获取年月日：<code>d.getFullYear()</code>、<code>d.getMonth()+1</code>、<code>d.getDate()</code>。</li>
<li>获取时、分、秒、毫秒：<code>d.getHours()</code>、<code>d.getMinutes()</code>、<code>d.getSeconds()</code>、<code>d.getMilliSeconds()</code>。</li>
<li>获取一周的第几天：<code>d.getDay()</code>。</li>
<li>从<strong>1970-01-01 08:00:00</strong>至今所经历的毫秒数：<code>d.getTime()</code>。</li>
<li>设置某个时间：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.setFullYear(<span class="number">2012</span>);</span><br><span class="line"><span class="comment">// 月份时基0的，所以11表示12月</span></span><br><span class="line">d.setMonth(<span class="number">11</span>); </span><br><span class="line">d.setDate(<span class="number">12</span>);</span><br><span class="line">d.setHours(<span class="number">0</span>);</span><br><span class="line">d.setMinutes(<span class="number">0</span>);</span><br><span class="line">d.setSeconds(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>Math对象：<ul>
<li>自然底数E和圆周率PI：<code>Math.E</code>、<code>Math.PI</code>。</li>
<li>绝对值：<code>Math.abs(-1)</code>。</li>
<li>取最小、最大：<code>Math.min(1, 100)</code>、<code>Math.max(1, 100)</code>。</li>
<li>幂运算：<code>Math.pow(3, 3)</code>。</li>
<li>小数四舍五入：<code>Math.round(3.4)</code>。</li>
<li>随机数：<code>Math.random()</code>。</li>
</ul>
</li>
<li>自定义对象：<ul>
<li>通过new Object()创建对象：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">hero.name = <span class="string">"xijinian"</span>;</span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line">hero.kill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>通过function设计一个对象：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.kill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="keyword">this</span>.name + <span class="string">"正在杀敌&lt;br&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gareen = <span class="keyword">new</span> Hero(<span class="string">"xijinian"</span>);</span><br><span class="line">gareen.kill();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>为已经存在的对象，增加新的方法（prototype相当于对象方法，不使用prototype相当于类方法）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.kill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="keyword">this</span>.name + <span class="string">"正在杀敌&lt;br&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gareen = <span class="keyword">new</span> Hero(<span class="string">"xijinian"</span>);</span><br><span class="line">gareen.kill();</span><br><span class="line"></span><br><span class="line">Hero.prototype.keng = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="keyword">this</span>.name + <span class="string">"正在坑队友&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">gareen.keng();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
</ul>
</li>
<li>BOM——浏览器对象模型（Brower Object Model）：<ul>
<li>Window对象：<ul>
<li>创建Window对象：一旦页面加载，就会自动创建window对象，所以无需手动创建window对象。</li>
<li>获取文档显示区域的高度和宽度：<code>window.innerWidth()</code>、<code>window.innerHeight()</code>。</li>
<li>获取外部窗体的宽度和高度：<code>window.outerWidth()</code>、<code>window.outerHeight()</code>。</li>
<li>打开一个新的窗口：<code>window.open(&quot;/&quot;)</code>。</li>
</ul>
</li>
<li>Navigator（浏览器对象）：<ul>
<li>打印浏览器相关的信息：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(navigator.appName + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(navigator.appVersion + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(navigator.appCodeName + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(navigator.platform + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;是否启用Cookies："</span>);</span><br><span class="line"><span class="built_in">document</span>.write(navigator.cookieEnabled + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(navigator.userAgent + <span class="string">"&lt;/p&gt;"</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>Screen对象：<ul>
<li>返回用户的屏幕大小，以及可用屏幕大小：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(screen.width + <span class="string">"*"</span> + screen.height)</span><br><span class="line"><span class="built_in">document</span>.write(screen.availWidth + <span class="string">"*"</span> + screen.availHeight)</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>History对象：<ul>
<li>返回上一次的访问：<code>history.back()</code>。</li>
<li>返回上上次的访问：<code>history.go(-2)</code>。</li>
</ul>
</li>
<li>Location对象（表示浏览器中的地址栏）：<ul>
<li>刷新当前页面：<code>location.reload()</code>。</li>
<li>跳转到另一个页面：<code>location=&quot;/&quot;</code>或者<code>location.assign(&quot;/&quot;)</code>。</li>
<li>其他属性：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p(<span class="string">"协议 location.protocol:"</span>+location.protocol);</span><br><span class="line">p(<span class="string">"主机名 location.hostname:"</span>+location.hostname);</span><br><span class="line">p(<span class="string">"端口号 (默认是80，没有即表示80端口)location.port:"</span>+location.port);</span><br><span class="line">p(<span class="string">"主机加端口号 location.host:"</span>+location.host);</span><br><span class="line">p(<span class="string">"访问的路径 location.pathname:"</span>+location.pathname);</span><br><span class="line">p(<span class="string">"锚点 location.hash:"</span>+location.hash);</span><br><span class="line">p(<span class="string">"参数列表 location.search:"</span>+location.search);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
<li>弹出框（都是通过调用window的方法实现的，由于常用，所以可以省略window.）：<ul>
<li>警告框：<code>alert(&quot;注册成功&quot;)</code>。</li>
<li>确认框：<code>confirm(&quot;是否要删除&quot;)</code>——返回值是<code>true</code>、<code>false</code>。</li>
<li>输入框：<code>var name = prompt(&quot;请输入用户名:&quot;)</code>。</li>
</ul>
</li>
<li>计时器：<ul>
<li>只执行一次：<code>setTimeout(printTime, 3000)</code>。</li>
<li>不停地重复执行：<code>var a = setInterval(函数名, 重复执行的时间间隔毫秒数)</code>。</li>
<li>终止重复执行：<code>clearInterval(a)</code>。</li>
<li>不要在setInterval(, )调用的函数中使用document.write()，因为Firefox等浏览器有问题。这是因为document.write()会创建一个新的文档，而新的文档里，只有打印出来的时间字符串，并没有setInterval(, )这些javascript调用，所以只会看到执行一次的效果。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>构建Web内容的技术</title>
    <url>/2017/10/15/%E6%9E%84%E5%BB%BAWeb%E5%86%85%E5%AE%B9%E7%9A%84%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>无非就是HTML、CSS、JavaScript</p>
<p>CGI、Servlet</p>
<p>XML、RSS、ATom、JSON</p>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>基于HTTP的功能追加协议</title>
    <url>/2017/10/11/%E5%9F%BA%E4%BA%8EHTTP%E7%9A%84%E5%8A%9F%E8%83%BD%E8%BF%BD%E5%8A%A0%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><strong>更好的HTTP</strong>：</p>
<ul>
<li>HTTP的瓶颈：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一条连接上只可发送一个请求。</span><br><span class="line"></span><br><span class="line">请求只能从客户端开始。客户端不可以接收除响应以外的指令。</span><br><span class="line"></span><br><span class="line">请求&#x2F;响应首部未经压缩就发送。首部信息越多延迟越大。</span><br><span class="line"></span><br><span class="line">发送冗长的首部。每次互相发送相同的首部造成的浪费较多。</span><br><span class="line"></span><br><span class="line">可任意选择数据压缩格式。非强制压缩发送。</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>Ajax的解决方法：Ajax的核心技术是名为XMLHttpRequest的API，通过JavaScript脚本语言的调用就能和服务器进行HTTP通信。借由这种手段，就能从已加载完毕的Web页面上发起请求，只更新局部页面。而利用Ajax实时地从服务器获取内容，有可能会导致大量请求产生。另外，Ajax仍未解决HTTP协议本身存在的问题。</li>
<li>Comet的解决方法：一旦服务器端有内容更新了，Comet不会让请求等待，而是直接给客户端返回响应。这是一种通过延迟应答，模拟实现服务器端向客户端推送（Server Push）的功能。通常，服务器端接收到请求，在处理完毕后就会立即返回响应，但为了实现推送功能，Comet会先将响应置于挂起状态，当服务器端有内容更新时，再返回该响应。因此，服务器端一旦有更新，就可以立即反馈给客户端。内容上虽然可以做到实时更新，但为了保留响应，一次连接的持续时间也变长了。期间，为了维持连接会消耗更多的资源。另外，Comet也仍未解决HTTP协议本身存在的问题。</li>
<li>SPDY的解决方法：为了在协议级别消除HTTP所遭遇的瓶颈。SPDY没有完全改写HTTP协议，而是在TCP/IP的应用层与传输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY规定通信中使用SSL。使用SPDY后，HTTP协议额外获得以下功能：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多路复用流</span><br><span class="line">——通过单一的TCP连接，可以无限制处理多个HTTP请求。所有请求的处理都在一条TCP连接上完成，因此TCP的处理效率得到提高。</span><br><span class="line"></span><br><span class="line">赋予请求优先级</span><br><span class="line">——SPDY不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。</span><br><span class="line"></span><br><span class="line">压缩HTTP首部</span><br><span class="line">——压缩HTTP请求和响应的首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。</span><br><span class="line"></span><br><span class="line">推送功能</span><br><span class="line">——支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</span><br><span class="line"></span><br><span class="line">服务器提示功能</span><br><span class="line">——服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>希望使用SPDY时，Web的内容端不必做什么特别改动，而Web浏览器及Web服务器都要为对应SPDY做出一定程度上的改动。</li>
<li>WebSocket协议：Web浏览器与Web服务器之间全双工通信标准，主要是为了解决Ajax和Comet里XMLHttpRequest附带的缺陷所引起的问题。一旦Web服务器与客户端之间建立起WebSocket协议的通信连接，之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML或图片等任意格式的数据。由于是建立在HTTP基础上的协议，因此连接的发起方仍是客户端，而一旦确立WebSocket通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 握手-请求</span><br><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ&#x3D;&#x3D;</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 握手-响应</span><br><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>成功握手确立WebSocket连接之后，通信时不再使用HTTP的数据帧，而采用WebSocket独立的数据帧：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fki960hnoij31kw102wk4.jpg" alt=""></li>
<li>WebSocket API：JavaScript可调用“The WebSocket API”（<a href="http://www.w3.org/TR/websockets/，由W3C标准制定）内提供的WebSocket程序接口，以实现WebSocket协议下全双工通信。" target="_blank" rel="noopener">http://www.w3.org/TR/websockets/，由W3C标准制定）内提供的WebSocket程序接口，以实现WebSocket协议下全双工通信。</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var socket &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;game.example.com:12010&#x2F;updates&#39;);</span><br><span class="line">socket.onopen &#x3D; function () &#123;</span><br><span class="line">  setInterval(function() &#123;</span><br><span class="line">    if (socket.bufferedAmount &#x3D;&#x3D; 0)</span><br><span class="line">      socket.send(getUpdateData());</span><br><span class="line">  &#125;, 50);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>HTTP2.0的七项技术：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fki9mjklfej30om069mxa.jpg" alt=""></li>
</ul>
<p><strong>WebDAV</strong>：</p>
<ul>
<li>WebDAV为实现远程文件管理，向HTTP/1.1中追加了以下这些方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROPFIND                    ——获取属性</span><br><span class="line">PROPPATCH                   ——修改属性</span><br><span class="line">MKCOL                       ——创建集合</span><br><span class="line">COPY                        ——复制资源及属性</span><br><span class="line">MOVE                        ——移动资源</span><br><span class="line">LOCK                        ——资源加锁</span><br><span class="line">UNLOCK                      ——资源解锁</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>新增的对应的状态码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">102 Processing              ——可正常处理请求，但目前是处理中状态</span><br><span class="line">207 Multi-Status            ——存在多种状态</span><br><span class="line">422 Unprocessible Entity    ——格式正确，内容有误</span><br><span class="line">423 Locked                  ——资源已被加锁</span><br><span class="line">424 Failed Dependency       ——处理与某请求关联的请求失败，因此不再维持依赖关系</span><br><span class="line">507 Insufficient Storage    ——保存空间不足</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>一个例子：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取属性的请求</span><br><span class="line">PROPFIND &#x2F;file HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application&#x2F;xml; charset&#x3D;&quot;utf-8&quot;</span><br><span class="line">Content-Length: 219</span><br><span class="line">　</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;D:propfind xmlns:D&#x3D;&quot;DAV:&quot;&gt;</span><br><span class="line">  &lt;D:prop xmlns:R&#x3D;&quot;http:&#x2F;&#x2F;ns.example.com&#x2F;boxschema&#x2F;&quot;&gt;</span><br><span class="line">    &lt;R:bigbox&#x2F;&gt;</span><br><span class="line">    &lt;R:author&#x2F;&gt;</span><br><span class="line">    &lt;R:DingALing&#x2F;&gt;</span><br><span class="line">    &lt;R:Random&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;D:prop&gt;</span><br><span class="line">&lt;&#x2F;D:propfind&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 响应</span><br><span class="line">HTTP&#x2F;1.1 207 Multi-Status</span><br><span class="line">Content-Type: application&#x2F;xml; charset&#x3D;&quot;utf-8&quot;</span><br><span class="line">Content-Length: 831</span><br><span class="line">　</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;D:multistatus xmlns:D&#x3D;&quot;DAV:&quot;&gt;</span><br><span class="line">  &lt;D:response xmlns:R&#x3D;&quot;http:&#x2F;&#x2F;ns.example.com&#x2F;boxschema&#x2F;&quot;&gt;</span><br><span class="line">    &lt;D:href&gt;http:&#x2F;&#x2F;www.example.com&#x2F;file&lt;&#x2F;D:href&gt;</span><br><span class="line">    &lt;D:propstat&gt;</span><br><span class="line">      &lt;D:prop&gt;</span><br><span class="line">        &lt;R:bigbox&gt;</span><br><span class="line">        &lt;R:BoxType&gt;Box type A&lt;&#x2F;R:BoxType&gt;</span><br><span class="line">        &lt;&#x2F;R:bigbox&gt;</span><br><span class="line">        &lt;R:author&gt;</span><br><span class="line">        &lt;R:Name&gt;J.J. Johnson&lt;&#x2F;R:Name&gt;</span><br><span class="line">        &lt;&#x2F;R:author&gt;</span><br><span class="line">      &lt;&#x2F;D:prop&gt;</span><br><span class="line">      &lt;D:status&gt;HTTP&#x2F;1.1 200 OK&lt;&#x2F;D:status&gt;</span><br><span class="line">    &lt;&#x2F;D:propstat&gt;</span><br><span class="line">    &lt;D:propstat&gt;</span><br><span class="line">      &lt;D:prop&gt;&lt;R:DingALing&#x2F;&gt;&lt;R:Random&#x2F;&gt;&lt;&#x2F;D:prop&gt;</span><br><span class="line">      &lt;D:status&gt;HTTP&#x2F;1.1 403 Forbidden&lt;&#x2F;D:status&gt;</span><br><span class="line">      &lt;D:responsedescription&gt; The user does not have access to the DingALing property.</span><br><span class="line">      &lt;&#x2F;D:responsedescription&gt;</span><br><span class="line">    &lt;&#x2F;D:propstat&gt;</span><br><span class="line">  &lt;&#x2F;D:response&gt;</span><br><span class="line">  &lt;D:responsedescription&gt; There has been an access violation error.</span><br><span class="line">  &lt;&#x2F;D:responsedescription&gt;</span><br><span class="line">&lt;&#x2F;D:multistatus&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>确认访问用户身份的认证</title>
    <url>/2017/10/11/%E7%A1%AE%E8%AE%A4%E8%AE%BF%E9%97%AE%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E7%9A%84%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<ul>
<li>HTTP/1.1使用的认证方式如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BASIC认证（基本认证）</span><br><span class="line">DIGEST认证（摘要认证）</span><br><span class="line">SSL客户端认证</span><br><span class="line">FormBase认证（基于表单认证）</span><br><span class="line">Windows统一认证</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>BASIC认证：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkdlskrumgj31kw0vy7az.jpg" alt=""></li>
<li>DIGEST认证：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkdlx6gsw7j31kw148k1v.jpg" alt=""></li>
<li>SSL客户端认证——借由HTTPS的客户端证书（与服务器端证书差不多）完成认证的方式，服务器可确认访问是否来自已登录的客户端。</li>
<li>FormBase认证：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkdmccuavuj31kw0rbn0o.jpg" alt=""><!--lalala-->
另说一下，服务器端一种安全的保存方法是，先利用给密码加盐（salt——由服务器随机生成的一个字符串，但是要保证长度足够长，并且是真正随机生成的，然后把它和密码字符串拼接）的方式增加额外信息，再使用散列（hash）函数计算出散列值后保存。</li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>确保Web安全的HTTPS</title>
    <url>/2017/10/09/%E7%A1%AE%E4%BF%9DWeb%E5%AE%89%E5%85%A8%E7%9A%84HTTPS/</url>
    <content><![CDATA[<p>发现一篇很好的文章，来自刘欣大大，大家感受一下——<a href="https://mp.weixin.qq.com/s/StqqafHePlBkWAPQZg3NrA" target="_blank" rel="noopener"><strong>一个故事讲完HTTPS</strong></a></p>
<p><strong>补充一点SSL和TSL的信息</strong>：<br>HTTPS使用SSL（Secure Socket Layer）和TLS（Transport Layer Security）这两个协议。<br>SSL技术最初是由浏览器开发商网景通信公司率先倡导的，开发过SSL3.0之前的版本。目前主导权已转移到IETF（Internet Engineering Task Force，Internet工程任务组）的手中。<br>IETF以SSL3.0为基准，后又制定了TLS1.0、TLS1.1和TLS1.2。TSL是以SSL为原型开发的协议，有时会统一称该协议为SSL。当前主流的版本是<strong>SSL3.0</strong>和<strong>TLS1.0</strong>。<br>由于SSL1.0协议在设计之初被发现出了问题，就没有实际投入使用。SSL2.0也被发现存在问题，所以很多浏览器直接废除了该协议版本。</p>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA的Debug功能</title>
    <url>/2017/10/04/IntelliJ-IDEA%E7%9A%84Debug%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>这段时间一直在使用IntelliJ IDEA, 今天把调试区工具的使用方法记录于此。</p>
<p>先编译好要调试的程序。<br>1.设置断点…</p>
<p><a href="http://www.cnblogs.com/Bowu/p/4026117.html" target="_blank" rel="noopener">查看原帖</a></p>
]]></content>
      <tags>
        <tag>Java 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>基本命令</title>
    <url>/2017/10/01/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>to be continued…</p>
<ul>
<li><strong>闲杂命令</strong>：<ul>
<li><code>date</code>——当前时间</li>
<li><code>cal</code>——日历</li>
<li><code>df</code>——磁盘状态</li>
<li><code>free</code>——内存状态</li>
<li><code>exit</code>——退出</li>
<li><code>pwd</code>——返回当前路径</li>
<li><code>cd</code>——打开<a id="more"></a></li>
</ul>
</li>
</ul>
<ul>
<li><strong>ls命令</strong>：<ul>
<li><code>ls</code>——列出当前路径下的文件和文件夹</li>
<li><code>.</code>——下</li>
<li><code>..</code>——上</li>
<li><code>cd -</code>——打开之前打开的路径</li>
<li><code>cd ~user_name</code>=<code>cd ~</code>——打开用户根目录</li>
<li><code>ls -a</code>——列出当前路径下的所有文件</li>
<li>不要在文件名中使用空格，如果非要空格，就用下划线替代。</li>
<li><code>ls /usr</code>——ls也可以直接指定想要执行ls的路径</li>
<li><code>ls ~ /usr</code>——ls命令可以有多个参数</li>
<li><code>ls -l</code>——返回长模式</li>
<li><code>ls -li</code>——展示索引点（同一个文件的硬链接的索引节点号一致）</li>
<li><code>command -options arguments</code>——常见的命令模板</li>
<li><code>ls -lt</code>——ls以长模式展现，以修改时间排序</li>
<li><code>ls -lt --reverse</code>——上一条的逆序</li>
<li><code>ls</code>命令的有用选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a &#x3D; --all</span><br><span class="line">-d &#x3D; --directory        ——在&#96;ls&#96;命令后，结合&#96;l&#96;命令返回当前目录的详细信息（目录本身而不是目录下的内容）</span><br><span class="line">-F &#x3D; --classify         ——在路径的末尾添加&#96;&#x2F;&#96;符号</span><br><span class="line">-h &#x3D; --human-readable   ——以对人类友好的方式呈现，如文件大小的单位</span><br><span class="line">-r &#x3D; --reverse          ——反向</span><br><span class="line">-S                      ——输出结果按文件大小排序</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>继续闲杂命令</strong>：<ul>
<li><code>file filename</code>——查看文件的类型</li>
<li><code>less filename</code>→<code>q</code>——快速浏览文本格式文档的内容，<code>q</code>退出浏览模式</li>
<li><code>mkdir directory...</code></li>
</ul>
</li>
</ul>
<ul>
<li><strong>cp命令</strong>：<ul>
<li><code>cp item1 item2</code></li>
<li><code>cp item... directory</code></li>
<li><code>cp dir1/* dir2</code></li>
<li><code>cp</code>命令的有用选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a &#x3D; --archive          ——复制文件和目录，以及它们的属性，包括所有权和权限</span><br><span class="line">-i &#x3D; --interactive      ——在重写已存在文件之前，提示用户确认。如果这个选项不指定，cp命令会默认重写文件</span><br><span class="line">-r &#x3D; --recursive        ——递归地复制目录及目录中的内容。当复制目录时，需要这个选项（或者-a选项）</span><br><span class="line">-u &#x3D; --update           ——当把文件从一个目录复制到另一个目录时，仅复制新条目或者更新</span><br><span class="line">-v &#x3D; --verbose          ——显示翔实的命令操作信息</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>cp -r dir1 dir2</code></li>
</ul>
</li>
</ul>
<ul>
<li><strong>通配符相关的命令</strong>：<ul>
<li>通配符：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">?</span><br><span class="line">[character]</span><br><span class="line">[!character]</span><br><span class="line">[[:class:]]</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>普遍使用的字符类：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[:alnum:]</span><br><span class="line">[:alpha:]</span><br><span class="line">[:digit:]</span><br><span class="line">[:lower:]</span><br><span class="line">[:upper:]</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>通配符范例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">g*</span><br><span class="line">b*.txt</span><br><span class="line">Data???</span><br><span class="line">[abc]*</span><br><span class="line">BACKUP.[0-9][0-9][0-9]</span><br><span class="line">[[:upper:]*]</span><br><span class="line">[[:digit:]*]</span><br><span class="line">*[[:lower:]123]         ——文件名以小写字母结尾，或以 “1”，“2”，或 “3” 结尾的文件</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>mv命令</strong>：<ul>
<li><code>mv item1 item2</code></li>
<li><code>mv item... directory</code></li>
<li><code>mv</code>命令有用的选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i &#x3D; --interactive      ——在重写已存在文件之前，提示用户确认。如果这个选项不指定，cp命令会默认重写文件</span><br><span class="line">-u &#x3D; --update           ——当把文件从一个目录复制到另一个目录时，仅复制新条目或者更新</span><br><span class="line">-v &#x3D; --verbose          ——显示翔实的命令操作信息</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
</li>
</ul>
<ul>
<li><strong>rm命令</strong>：<ul>
<li><code>rm item...</code></li>
<li><code>rm</code>命令有用的选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i &#x3D; --interactive      ——在删除已存在的文件前，提示用户确认信息。如果不指定这个选项，rm会默默地删除文件</span><br><span class="line">-r &#x3D; --recursive        ——递归地删除文件，要删除一个目录，必须指定这个选项。</span><br><span class="line">-f &#x3D; --force            ——忽视不存在的文件，不显示提示信息。这选项颠覆了“--interactive”选项。</span><br><span class="line">-v &#x3D; --verbose          ——在执行 rm 命令时，显示翔实的操作信息。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>rm -rf *</code></li>
</ul>
</li>
</ul>
<ul>
<li><strong>ln命令</strong>：<ul>
<li><code>ln file link</code>——建立硬链接，当我们创建了文件的硬链接，实际上，我们给文件添加了额外的名字，这些名字都涉及一样的数据内容。 </li>
<li><code>ln -s item link</code>——建立符号链接的目的是为了克服硬链接的两个缺点：硬链接不能跨越物理设备，硬链接不能关联目录，只能是文件。符号链接是文件的特殊类型，它包含一个指向目标文件或目录的文本指针。</li>
<li><code>ln -s /home/me/playground/fun dir1/fun-sym</code>——绝对路径。</li>
<li><code>ln -s ..fun dir/fun-sys</code>——相对路径。</li>
<li><code>ls -li</code>——ls 命令用这种方法，来展示（文件索引节点）的信息。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>命令概述</strong>：<ul>
<li>何为命令，它可能是：<ul>
<li>一个可执行文件，如<code>javac</code>。</li>
<li>一个内建于 shell 自身的命令，如<code>cd</code>。</li>
<li>一个 shell 函数。</li>
<li>一个命令别名——我们可以定义自己的命令，建立在其它命令之上。</li>
</ul>
</li>
<li><strong>判断命令</strong>的类型用<code>type command</code>：<code>type cd</code>、<code>type ls</code>。</li>
<li><strong>显示一个可执行程序的位置</strong>用<code>which</code>（这个命令只对可执行程序有效）：<code>which javac</code>。</li>
<li><strong>得到 shell 内部命令的帮助文档</strong>用<code>help</code>：<code>help cd</code>或者<code>cd --help</code>。</li>
<li><strong>显示程序手册页</strong>用<code>man</code>，它是有固定格式的（①用户命令、②程序接口内核系统调用、③C 库函数程序接口、④特殊文件，说设备结点和驱动程序、⑤文件格式、⑥游戏娱乐，如屏幕保护程序、⑦其他方面、⑧系统管理员命令）：正常的命令形式如下——<code>man passwd</code>，但是如果你想看特定信息，也可以直接精确定位——<code>man 5 passwd</code></li>
<li><strong>搜索适当的命令</strong>用<code>apropos xxx</code>或者<code>man -k xxx</code>，输出结果每行的第一个字段是手册页的名字，第二个字段展示章节。</li>
<li><strong>显示非常简洁的命令说明</strong>用<code>whatis</code>：<code>whatis javac</code>。</li>
<li><strong>显示程序 Info 条目</strong>用<code>info</code>（GUN 提供的命令手册页的替代物）：<code>info ls</code>。当使用 info 命令时，我们可以继续使用命令来控制 info 的阅读器：①<code>?</code>显示命令帮助、②<code>PgUp or Backspace</code>显示上一页、③<code>PgDn or Space</code>显示下一页、④<code>n</code>显示下一个结点、⑤<code>p</code>显示上一个结点、⑥<code>u</code>=<code>Up</code>显示当前所显示结点的父结点，通常是个菜单、⑦<code>Enter</code>激活光标位置下的超级链接、⑧<code>q</code>退出。</li>
<li>可以把多个命令放在同一行上，命令之间用“;”分开。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>alias 命令</strong>：<ul>
<li>一个简单的小例子：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias foo='cd /usr; ls; cd -'</span><br><span class="line">unalias foo</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>在命令行中定义别名有点儿小问题，当你的 shell 会话结束时，它们会消失。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux 命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>味道和启发</title>
    <url>/2017/09/28/%E5%91%B3%E9%81%93%E5%92%8C%E5%90%AF%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>为什么要修改代码？因为代码中有让我闻起来不舒服的味道，我记录了这些可能产生不舒服味道的地方，得到了一个相当长的清单。</p>
<p align="right">——Bob大叔</p>
</blockquote>
<p><strong>注释</strong>：</p>
<ul>
<li><strong>不应该出现的信息</strong>——如记录修改的历史记录。</li>
<li><strong>过时的注释</strong>。</li>
<li><strong>给白痴写的注释</strong>——注释应该谈及代码自身没提到的东西。</li>
<li><strong>不严谨的注释</strong>——要么不写注释，要么就好好写。</li>
<li><strong>注释掉的代码</strong>——狗屎！<a id="more"></a></li>
</ul>
<p><strong>环境</strong>：</p>
<ul>
<li><strong>需要多步才能实现的构建</strong>——构建系统应该是单步的小操作，不应该从源代码控制系统中一小点一小点签出代码。</li>
<li><strong>需要多步才能做到的测试</strong>。</li>
</ul>
<p><strong>函数</strong>：</p>
<ul>
<li><strong>过多的参数</strong>。</li>
<li><strong>输出参数</strong>。</li>
<li><strong>标识参数</strong>——布尔值参数大声宣告函数做了不止一件事。</li>
<li><strong>死函数</strong>——永远不会被调用的函数。</li>
</ul>
<p><strong>一般性问题</strong>：</p>
<ul>
<li><strong>一个源文件存在太多种类的语言</strong>。</li>
<li><strong>明显的行为未被实现</strong>——有一些凭直觉就应该存在的API，如果其他程序员找了半天却没找到，他就会想“这TM什么鬼代码”，随之陷入对你无限的鄙视和怀疑当中——他们不得不去阅读源代码了。</li>
<li><strong>不正确的边界行为</strong>——要多重视特殊情况的代码运行情况。</li>
<li><strong>忽视安全</strong>。</li>
<li><strong>重复</strong>——每次看到重复代码就代表你遗漏了抽象（显而易见的重复；不断重复出现、检测同一组条件的switch/case或if/else链；大体相似的、只有一点细节不同的代码）。</li>
<li><strong>在错误抽象层级上的代码</strong>。</li>
<li><strong>基类依赖于派生类</strong>。</li>
<li><strong>信息过多</strong>——要隐藏你的数据、工具函数、临时变量等，要尽力保持接口的紧凑，降低耦合。</li>
<li><strong>死代码</strong>。</li>
<li><strong>垂直分隔</strong>——减少函数和其所利用的变量的距离，减少函数与被其调用的工具函数之间的距离。</li>
<li><strong>前后不一致</strong>——譬如命名要一个系统一以贯之。</li>
<li><strong>混淆视听</strong>。</li>
<li><strong>人为耦合</strong>——不互相依赖的东西不该耦合，譬如普通的enum不应在特殊类中包括，对于在特殊类中声明一般目的的static函数也是如此。</li>
<li><strong>特性依恋</strong>——类的方法应该只对其所属类的变量和函数感兴趣，不该垂青其他类中的变量和函数。不过，有时特性依赖是种有必要的恶行。</li>
<li><strong>选择算子参数</strong>——算子不一定是<code>boolean</code>类型，可能是枚举元素、整数或任何一种用于选择函数行为的参数。使用多个函数，通常优于向单个函数传递某些代码来选择函数的行为。</li>
<li><strong>晦涩的意图</strong>——如联排表达式、匈牙利语标记法、魔术数等。</li>
<li><strong>位置错误的权责</strong>——要符合<strong>最小惊异原则</strong>。</li>
<li><strong>不恰当的静态方法</strong>：就像<code>Math.max(double a, double b)</code>远好于<code>new Math().max(a, b)</code>以及更愚蠢的<code>a.max(b)</code>，因为本来就不应该在单个实体上操作。还有很重要的一点，如果你使用了静态方法，就应该确保没打算让它实现多态行为。</li>
<li><strong>不使用解释性变量</strong>。</li>
<li><strong>函数名称没有清晰地表达其行为</strong>。</li>
<li><strong>程序员自己也不理解算法</strong>——反正通过了“（自己所考虑情况的）测试”。</li>
<li><strong>逻辑依赖</strong>——依赖者模块不应对被依赖者模块有假定，它应该明确地询问后者全部信息。譬如一个模块不应该直接调用另一个模块中的常量（万一那个常量还没初始化呢），而是应该直接问对方：“你把你的某某常量的值告诉我”，如果此时出错完全是对方模块的责任，而不是由于你的僭越。</li>
<li><strong>用了很多if/else、switch/case而没有善用多态</strong>——“<strong>单个switch规则</strong>”：对于给定的选择类型，不应该有一个以上的swith语句。在那个switch语句中的多个case，<a href="http://blog.csdn.net/wwh578867817/article/details/49309789" target="_blank" rel="noopener">必须创建多态对象</a>，取代系统中其它类似的switch语句。</li>
<li><strong>不遵守标准约定</strong>。</li>
<li><strong>使用意义不明确的数字</strong>。</li>
<li><strong>不够准确</strong>——不要出现含糊的东西，如所有的变量都是<code>protected</code>，能用<code>List</code>的时候却使用拘束的<code>ArrayList</code>…</li>
<li><strong>没封装条件</strong>——如果没有<code>if</code>和<code>while</code>的上下文，布尔逻辑就难以理解，应该把解释了条件意图的函数抽离出来。</li>
<li><strong>使用否定性条件</strong>——相对来说，这个比肯定形式的判断语句更绕一些。</li>
<li><strong>函数做了很多件事</strong>。</li>
<li><strong>掩蔽了时序耦合</strong>——函数的调用有顺序要求的时候，要尽量使每个函数都产生出下一个函数所需的结果，这样一来其他程序员就没理由不按顺序调用了。</li>
<li><strong>太随意</strong>——如不作为类工具的公共类，不应该放到其他类里面。</li>
<li><strong>没有封装边界条件</strong>。</li>
<li><strong>函数不只在一个抽象层次上</strong>。</li>
<li><strong>没有在较高的层级上放置可配置数据</strong>。</li>
<li><strong>使用了传递浏览</strong>——如<strong>火车失事</strong>：<code>a.getB().getA()</code>。</li>
</ul>
<p><strong>Java</strong>：</p>
<ul>
<li><strong>过长的<code>import</code>清单</strong>——多使用通配符。</li>
<li><strong>继承了常量</strong>——可以试试静态导入。</li>
<li><strong>使用了特定的常量表示特定的意义</strong>——试试枚举吧。</li>
</ul>
<p><strong>命名</strong>：</p>
<ul>
<li><strong>名称没有描述性</strong>。</li>
<li><strong>名称没有与抽象层次相符</strong>。</li>
<li><strong>不采用标准命名法</strong>。</li>
<li><strong>有歧义的名称</strong>。</li>
<li><strong>大作用范围的名称过短</strong>。</li>
<li><strong>使用各种前后缀</strong>——当今的开发环境已经无需纠结这个，不要用匈牙利语命名法。</li>
<li><strong>名称没有说明副作用</strong>。</li>
</ul>
<p><strong>测试</strong>：</p>
<ul>
<li><strong>测试不足</strong>。</li>
<li><strong>没有覆盖率工具</strong>。</li>
<li><strong>略过了小测试</strong>。</li>
<li><strong>忽略对边界的测试</strong>。</li>
<li><strong>继续信任某个已经出错的函数而不全面测试它</strong>。</li>
<li><strong>测试过慢</strong>。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP首部</title>
    <url>/2017/09/27/HTTP%E9%A6%96%E9%83%A8/</url>
    <content><![CDATA[<p><strong>HTTP首部概述</strong>：</p>
<ul>
<li>HTTP报文包括：<strong>报文首部</strong>、<strong>空行</strong>以及<strong>报文主体</strong>。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fk2ra4tn21j30if06jmxh.jpg" alt=""><a id="more"></a></li>
<li>报文首部包括：<strong>请求行</strong>（<strong>状态行</strong>）和<strong>HTTP首部字段</strong>。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fk2rb1dxb5j30nt06laad.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fk2rbftz2pj30no06mq39.jpg" alt=""></li>
<li>HTTP首部字段根据实际用途被分为以下4种类型：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求首部字段（Request Header Fields）</span><br><span class="line">从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</span><br><span class="line"></span><br><span class="line">响应首部字段（Response Header Fields）</span><br><span class="line">从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</span><br><span class="line"></span><br><span class="line">通用首部字段（General Header Fields）</span><br><span class="line">请求报文和响应报文两方都会使用的首部。</span><br><span class="line"></span><br><span class="line">实体首部字段（Entity Header Fields）</span><br><span class="line">针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>HTTP首部字段是由首部字段名和字段值构成的，中间用冒号“:”分隔。</li>
<li>字段值对应单个HTTP首部字段可以有多个值。</li>
<li>当HTTP报文首部中出现了两个或两个以上具有相同首部字段名时会怎么样？这种情况在规范内尚未明确，根据浏览器内部处理逻辑的不同，结果可能并不一致。有些浏览器会优先处理第一次出现的首部字段，而有些则会优先处理最后出现的首部字段。</li>
<li>通用首部字段：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fk2ltuhj98j30om08xdg3.jpg" alt=""></li>
<li>请求首部字段：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fk2luv5k5lj30om0htgml.jpg" alt=""></li>
<li>响应首部字段：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fk2lvs9povj30om08xmxi.jpg" alt=""></li>
<li>实体首部字段：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fk2lwhd3pvj30om09tdg9.jpg" alt=""></li>
<li>非HTTP/1.1首部字段：在HTTP协议通信交互中使用到的首部字段，不限于RFC2616中定义的47种首部字段。还有Cookie、Set-Cookie和Content-Disposition等在其他RFC中定义的首部字段，它们的使用频率也很高。这些非正式的首部字段统一归纳在RFC4229 HTTP Header Field Registrations中。</li>
<li>End-to-end首部和Hop-by-hop首部：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">逐跳首部只对单次转发有效，会因通过缓存或代理而不再转发。</span><br><span class="line">HTTP&#x2F;1.1和之后版本中，如果要使用hop-by-hop首部，需提供Connection首部字段。</span><br><span class="line">有以下8种，其他首部均为端到端首部：</span><br><span class="line">Connection</span><br><span class="line">Keep-Alive</span><br><span class="line">Proxy-Authenticate</span><br><span class="line">Proxy-Authorization</span><br><span class="line">Trailer</span><br><span class="line">TE</span><br><span class="line">Transfer-Encoding</span><br><span class="line">Upgrade</span><br><span class="line"></span><br><span class="line">端到端首部会转发给请求&#x2F;响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<p><strong>通用首部字段</strong>：</p>
<ul>
<li><code>Cache-Control</code>——能够控制缓存的行为。<ul>
<li>缓存请求指令：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fk359ctbrwj30om081aae.jpg" alt=""></li>
<li>缓存响应指令：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fk35afsc1gj30om09tq3h.jpg" alt=""></li>
</ul>
</li>
<li><code>Connection</code><ul>
<li>控制代理不再转发的首部字段：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fk3moh8gdjj31hy0m7jtt.jpg" alt=""></li>
<li>管理持久连接：<code>Connection: close</code></li>
</ul>
</li>
<li><code>Date</code>——首部字段Date表明创建HTTP报文的日期和时间。</li>
<li><code>Pragma</code>——HTTP/1.1之前版本的历史遗留字段，仅作为与HTTP/1.0的向后兼容而定义。所有的中间服务器如果都能以HTTP/1.1为基准，那直接采用<code>Cache-Control: no-cache</code>指定缓存的处理方式是最为理想的。但要整体掌握全部中间服务器使用的HTTP 协议版本却是不现实的。因此，发送的请求会同时含有下面两个首部字段：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Trailer</code>——事先说明在报文主体后记录了哪些首部字段。</li>
<li><code>Transfer-Encoding</code>——规定了传输报文主体时采用的编码方式。HTTP/1.1的传输编码方式仅对分块传输编码有效：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Upgrade</code>——检测HTTP协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fk3nbg270mj31kw0n5ad2.jpg" alt=""></li>
<li><code>Via</code>——追踪客户端与服务器之间的请求和响应报文的传输路径。报文经过代理或网关时，会先在首部字段Via中附加该服务器的信息，然后再进行转发。这个做法和traceroute及电子邮件的Received首部的工作机制很类似。首部字段Via不仅用于追踪报文的转发，还可避免请求回环的发生。所以必须在经过代理时附加该首部字段内容：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fk3ne2wr0xj31c80tr772.jpg" alt=""></li>
<li><code>Warning</code>——<code>Warning: [警告码][警告的主机:端口号]“[警告内容]”([日期时间])</code>，该首部通常会告知用户一些与缓存相关的问题的警告。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fk3ni5azayj30om08b0tg.jpg" alt=""></li>
</ul>
<p><strong>请求首部字段</strong>：</p>
<ul>
<li>请求首部字段用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容。</li>
<li><code>Accept</code>——可通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。可使用type/subtype这种形式，一次指定多种媒体类型。若想要给显示的媒体类型增加优先级，则使用<code>q=</code>来额外表示权重值1，用分号<code>;</code>进行分隔。权重值q的范围是0~1（可精确到小数点后3位），且1为最大值。不指定权重q值时，默认权重为q=1.0。当服务器提供多种内容时，将会首先返回权重值最高的媒体类型。例句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Accept-Charset</code>——用来通知服务器用户代理支持的字符集及字符集的相对优先顺序。例句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Charset: utf-8, iso-8859-1;q&#x3D;0.5, *;q&#x3D;0.1</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Accept-Encoding</code>——用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。例句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Encoding: deflate, gzip;q&#x3D;1.0, *;q&#x3D;0.5</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Accept-Language</code>——管理语言的优先级顺序，与上述其他内容类似。</li>
<li><code>Authorization</code>——用来告知服务器，用户代理的认证信息（证书值）。通常，想要通过服务器认证的用户代理会在接收到返回的 401 状态码响应后，把首部字段Authorization加入请求中。共用缓存在接收到含有Authorization首部字段的请求时的操作处理会略有差异。<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fkara1a8y1j31ii1am77u.jpg" alt=""></li>
<li><code>Except</code>——是一个请求消息头，包含一个期望条件，表示服务器只有在满足此期望条件的情况下才能妥善地处理请求。规范中只规定了一个期望条件，即<code>Expect: 100-continue</code>（通知接收方客户端要发送一个体积可能很大的消息体），对此服务器可以做出如下回应：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100                         ——如果消息头中的期望条件可以得到满足</span><br><span class="line">417 (Expectation Failed)    ——如果服务器不能满足期望条件，也可以是其他任意表示客户端错误的状态码（4xx）</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>From</code>——首部字段From,用来告知服务器使用用户代理的用户的电子邮件地址，出问题的时候服务器管理员可以通过这个Email地址来练习用户。</li>
<li><code>Host</code>——虚拟主机运行在同一个IP上，因此使用首部字段Host加以区分。如果没有给定端口号，会自动使用被请求服务的默认端口（比如请求一个HTTP的URL会自动使用80端口）。HTTP/1.1的所有请求报文中必须包含一个Host头字段。如果一个HTTP/1.1请求缺少Host头字段或者设置了超过一个的Host头字段，一个400（Bad Request）状态码会被返回。<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fkarxm4eaqj31gr0qpwgo.jpg" alt=""></li>
<li><code>If-xxx</code>——附带条件请求，服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求。<ul>
<li><code>If-Match</code><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkasq9oe7fj31c813sadu.jpg" alt=""></li>
<li><code>If-Modified-Since</code>——没更新就返回304.</li>
<li><code>If-None-Match</code><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkast0wrwlj31cc0hcjsy.jpg" alt=""></li>
<li><code>If-Range</code>——告知服务器若指定的<code>If-Range</code>字段值（ETag 值或者时间）和请求资源的ETag值或时间相一致时，则作为范围请求处理。反之，则返回全体资源。</li>
<li><code>If-Unmodified-Since</code>——它的作用的是告知服务器，指定的请求资源只有在字段值内指定的日期时间之后，未发生更新的情况下，才能处理请求。如果在指定日期时间后发生了更新，则以状态码412 Precondition Failed作为响应返回。</li>
</ul>
</li>
<li><code>Max-Forwards</code>——用于诊断<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkaszsjbd1j31kw0gwtb2.jpg" alt=""></li>
<li><code>Proxy-Authorization</code>——接收到从代理服务器发来的认证质询时，客户端会发送包含首部字段<code>Proxy-Authorization</code>的请求，以告知服务器认证所需要的信息。</li>
<li><code>Range</code>——获取部分资源的范围请求，形如<code>Range: bytes=5001-10000</code>。</li>
<li><code>Referer</code>——包含了当前页面的来源页面的地址，拥有暴露用户的浏览历史的潜在性，涉及到用户的隐私问题。在以下两种情况下，Referer 不会被发送：①来源页面采用的协议为表示本地文件的”file”或者”data”URI；②当前请求采用的是非安全协议，而来源页面采用的是安全协议（HTTPS）。还有很重要的一点：传递的其实当前页面被链接而至的前一页面的绝对路径或者相对路径。<strong>不包含URL fragments</strong>(例如<code>#section</code>和<code>userinfo</code>)。</li>
<li><code>TE</code>——首部字段TE会告知服务器客户端能够处理响应的传输编码方式及相对优先级，它还可以指定伴随trailer字段的分块传输编码的方式。</li>
<li><code>User-Agent</code>将创建请求的浏览器和用户代理名称等信息传达给服务器。</li>
</ul>
<p><strong>响应首部字段</strong>：</p>
<ul>
<li>响应首部字段是由服务器端向客户端返回响应报文中所使用的字段，用于补充响应的附加信息、服务器信息，以及对客户端的附加要求等信息。</li>
<li><code>Accept-Ranges</code>——是用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。可指定的字段值有两种，可处理范围请求时指定其为bytes，反之则指定其为none。</li>
<li><code>Age</code>——告知客户端，源服务器在多久前创建了响应，字段值的单位为秒。若创建该响应的服务器是缓存服务器，Age值是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段Age。</li>
<li><code>ETag</code>——首部字段ETag能告知客户端实体标识。它是一种可将资源以字符串形式做唯一性标识的方式。服务器会为每份资源分配对应的ETag值。另外，当资源更新时，ETag值也需要更新。生成ETag值时，并没有统一的算法规则，而仅仅是由服务器来分配。不论实体发生多么细微的变化都会改变其值的叫做ETag，而只有资源发生了根本改变，产生差异时才会改变值的叫做弱Etag：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ETag: &quot;usagi-1234&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 弱ETag在字段值最开始处需要附加 W&#x2F;</span><br><span class="line">ETag: W&#x2F;&quot;usagi-1234&quot;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Location</code>——使用首部字段<code>Location</code>可以将响应接收方引导至某个与请求URI位置不同的资源。基本上，该字段会配合<code>3xx：Redirection</code>的响应，提供重定向的URI。几乎所有的浏览器在接收到包含首部字段Location的响应后，都会强制性地尝试对已提示的重定向资源的访问：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fkbrhc1418j31cf17cjv5.jpg" alt=""></li>
<li><code>Proxy-Authenticate</code>——把由代理服务器所要求的认证信息发送给客户端，例句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Proxy-Authenticate: Basic realm&#x3D;&quot;Usagidesign Auth&quot;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Retry-After</code>——告知客户端应该在多久之后再次发送请求。主要配合状态码<code>503 Service Unavailable</code>响应，或<code>3xx Redirect</code>响应一起使用。字段值可以指定为具体的日期时间（如<strong>Wed, 04 Jul 2012 06：34：24 GMT</strong>），也可以是创建响应后的秒数。</li>
<li><code>Server</code>——告知客户端当前服务器上安装的HTTP服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还有可能包括版本号和安装时启用的可选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server: Apache&#x2F;2.2.6 (Unix) PHP&#x2F;5.2.5</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Vary</code>——它决定了对于未来的一个请求头，应该用一个缓存的回复(response)还是向源服务器请求一个新的回复。从代理服务器接收到源服务器返回包含<code>Vary</code>指定项的响应之后，若再要进行缓存，仅对请求中含有相同<code>Vary</code>指定首部字段的请求返回缓存。即使对相同资源发起请求，但由于<code>Vary</code>指定的首部字段不相同，因此必须要从源服务器重新获取资源。</li>
<li><code>WWW-Authenticate</code>——定义了使用何种验证方式去获取对资源的连接——它会告知客户端适用于访问请求URI所指定资源的认证方案（Basic或是Digest）和带参数提示的质询（challenge）。通常会和一个<code>401 Unauthorized</code>的响应一同被发送。</li>
</ul>
<p><strong>实体首部字段</strong>：</p>
<ul>
<li>实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首部，用于补充内容的更新时间等与实体相关的信息。</li>
<li><code>Allow</code>——用于通知客户端能够支持Request-URI指定资源的所有HTTP方法。当服务器接收到不支持的HTTP方法时，会以状态码<code>405 Method Not Allowed</code>作为响应返回。与此同时，还会把所有能支持的HTTP方法写入首部字段<code>Allow</code>后返回。</li>
<li><code>Content-Encoding</code>——告知客户端对实体的主体部分选用的内容编码方式。</li>
<li><code>Content-Language</code>——告知客户端对实体的主体部分选用的内容语言。</li>
<li><code>Content-Length</code>——表明了实体主体部分的大小（单位是字节）。对实体主体进行内容编码传输时，不能再使用Content-Length首部字段（编码后实体主体大小的计算方法略微复杂）。</li>
<li><code>Content-Location</code>——和首部字段<code>Location</code>不同，<code>Content-Location</code>表示的是报文主体返回资源对应的 URI。当返回的页面内容与实际请求的对象不同时，首部字段<code>Content-Location</code>内会写明URI（如访问 <a href="http://www.hackr.jp/" target="_blank" rel="noopener">http://www.hackr.jp/</a> 返回的对象却是 <a href="http://www.hackr.jp/index-ja.html）。" target="_blank" rel="noopener">http://www.hackr.jp/index-ja.html）。</a></li>
<li><code>Content-MD5</code>——检查报文主体在传输过程中是否保持完整，以及确认传输到达。采用这种方法，对内容上的偶发性改变是无从查证的，也无法检测出恶意篡改。具体过程是对报文主体执行MD5算法获得的128位二进制数，再通过Base64编码后将结果写入<code>Content-MD5</code>字段值。由于HTTP首部无法记录二进制值，所以要通过Base64编码处理。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fkbsjy5ilqj30zt0ihq3v.jpg" alt=""></li>
<li><code>Content-Range</code>——针对范围请求，返回响应时使用的首部字段<code>Content-Range</code>，能告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Range: bytes 5001-10000&#x2F;10000</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Content-Type</code>——说明了实体主体内对象的媒体类型：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Expires</code>——将资源失效的日期告知客户端；无效的日期，比如0，代表着一个过去的事件，即该资源已经过期了。缓存服务器在接收到含有首部字段<code>Expires</code>的响应后，会以缓存来应答请求，在<code>Expires</code>字段值指定的时间之前，响应的副本会一直被保存。当超过指定的时间后，缓存服务器在请求发送过来时，会转向源服务器请求资源。源服务器不希望缓存服务器对资源缓存时，最好在<code>Expires</code>字段内写入与首部字段<code>Date</code>相同的时间值，但如果还有一个设置了”max-age”或者”s-max-age”指令的<code>Cache-Control</code>响应头，那么<code>Expires</code>头就会被忽略。</li>
<li><code>Last-Modified</code>——指明资源最终修改的时间。一般来说，这个值就是Request-URI指定资源被修改的时间。但类似使用CGI脚本进行动态数据处理时，该值有可能会变成数据最终修改时的时间。</li>
</ul>
<p><strong>为Cookie服务的首部字段</strong>：</p>
<ul>
<li>Cookie的工作机制是用户识别及状态管理。Web网站为了管理用户的状态会通过Web浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前存放的Cookie。调用Cookie时，由于可校验Cookie的有效期，以及发送方的域、路径、协议等信息，所以正规发布的Cookie内的数据不会因来自其他Web站点和攻击者的攻击而泄露。</li>
<li><code>Set-Cookie</code>的字段属性：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fkbtnvwed4j30om069gm0.jpg" alt=""></li>
<li><code>Set-Cookie</code>的例句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id&#x3D;a3fWa; Expires&#x3D;Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>Cookie</code>——当客户端想获得HTTP状态管理支持时，就会在请求中包含从服务器接收到的Cookie。接收到多个Cookie时，同样可以以多个Cookie形式发送，例句：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID&#x3D;298zf09hf012fh2; csrftoken&#x3D;u32t4o3tb3gg43; _gat&#x3D;1;</span><br></pre></td></tr></table></figure>
<!--lalala-->




</li>
</ul>
<p><strong>其他常用首部字段举例</strong>：</p>
<ul>
<li><code>X-Frame-Options</code>——给浏览器指示允许一个页面可否在&lt;frame&gt;、&lt;iframe&gt;或者&lt;object&gt;中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持(clickjacking)的攻击。它有3个可选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 表示该页面不允许在frame中展示，即便是在相同域名的页面中嵌套也不允许</span><br><span class="line">DENY</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 表示该页面可以在相同域名页面的frame中展示</span><br><span class="line">SAMEORIGIN</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 表示该页面可以在指定来源的frame中展示</span><br><span class="line">ALLOW-FROM uri</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>X-XSS-Protection</code>——当检测到跨站脚本攻击(XSS)时，浏览器将停止加载页面。虽然这些保护在现代浏览器中基本上是不必要的，当网站实施一个强大的Content-Security-Policy来禁用内联的JavaScript (‘unsafe-inline’)时，他们仍然可以为尚不支持CSP的旧版浏览器的用户提供保护。它有4个可选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 禁止XSS过滤</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启用XSS过滤（通常浏览器是默认的）。如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启用XSS过滤。如果检测到攻击，浏览器将不会清除页面，而是阻止页面加载</span><br><span class="line">1;mode&#x3D;block</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启用XSS过滤。如果检测到跨站脚本攻击，浏览器将清除页面并使用CSP report-uri指令的功能发送违规报告</span><br><span class="line">1; report&#x3D;&lt;reporting-URI&gt;  (Chromium only)</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>DNT</code>——表明了用户对于网站追踪的偏好，它允许用户指定自己是否更注重个人隐私还是定制化内容。它有2个选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 同意被追踪</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拒绝被追踪</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>P3P</code>——利用<code>P3P</code>（The Platform for Privacy Preferences，在线隐私偏好平台）技术，可以让Web网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。要进行<code>P3P</code>的设定，需按以下操作步骤进行：①创建P3P隐私；②创建P3P隐私对照文件后，保存命名在<code>/w3c/p3p.xml</code>；③从P3P隐私中新建Compact policies后，输出到HTTP响应中。（<a href="http://www.w3.org/TR/P3P/" target="_blank" rel="noopener"><code>P3P</code>详细规范标准</a>）</li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>与HTTP协作的Web服务器</title>
    <url>/2017/09/27/%E4%B8%8EHTTP%E5%8D%8F%E4%BD%9C%E7%9A%84Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<ul>
<li>一台Web服务器可搭建多个独立域名的Web网站，也可作为通信路径上的中转服务器提升传输效率。</li>
<li>一个IP地址可以对应多个域名。</li>
</ul>
<p><strong>通信数据转发程序——代理、网关、隧道</strong>：</p>
<ul>
<li><strong>代理</strong>是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端，每次通过代理服务器转发请求或响应时，会追加写入Via首部信息。使用代理服务器的理由有：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。<a id="more"></a><br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjyk4usg73j31kw0h50wy.jpg" alt=""><ul>
<li><strong>缓存代理</strong>：代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</li>
<li><strong>透明代理</strong>：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</li>
</ul>
</li>
<li><strong>网关</strong>是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。利用网关可以由HTTP请求转化为其他协议通信：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjyk9ahw29j31fj0c6gn3.jpg" alt=""></li>
<li><strong>隧道</strong>是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。它可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析HTTP请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjykclc40nj31hl09uwfr.jpg" alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML/CSS速写神器：Emmet</title>
    <url>/2017/09/27/HTML-CSS%E9%80%9F%E5%86%99%E7%A5%9E%E5%99%A8%EF%BC%9AEmmet/</url>
    <content><![CDATA[<blockquote>
<p>在前端开发的过程中，一个最繁琐的工作就是写 HTML、CSS 代码。数量繁多的标签、属性、尖括号、标签闭合等，让前端们甚是苦恼。于是，我向大家推荐 Emmet，它提供了一套非常简单的语法规则，书写起来非常爽快，然后只需要敲一个快捷键就立刻生成对应的 HTML 或 CSS 代码，极大提高了代码书写效率。<br>Emmet 的前身是大名鼎鼎的 Zen coding，它是一个编辑器插件，需要基于指定的编辑器使用，官方网站提供多编辑器支持，目前…</p>
</blockquote>
<p><a href="http://bubkoo.com/2014/01/04/emmet-a-toolkit-for-improving-html-css-workflow/" target="_blank" rel="noopener">查看原贴</a></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>返回结果的HTTP状态码</title>
    <url>/2017/09/27/%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<p><strong>总体描述</strong>：</p>
<ul>
<li>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</li>
<li>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。比如Web应用程序内部发生错误，状态码依然返回<code>200 OK</code>，这种情况也经常遇到。</li>
<li>状态码的类型（数字中的第一位指定了响应类别，后两位无分类）：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjxuxt459xj30om05dwep.jpg" alt=""><a id="more"></a>

</li>
</ul>
<p><strong>2XX 成功</strong>：</p>
<ul>
<li><code>200 OK</code>：表示从客户端发来的请求在服务器端被正常处理了。</li>
<li><code>204 No Content</code>：该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</li>
<li><code>206 Partial Content</code>：该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</li>
</ul>
<p><strong>3XX 重定向</strong>：</p>
<ul>
<li><code>301 Moved Permanently</code>：永久性重定向。该状态码表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI。</li>
<li><code>302 Found</code>：临时性重定向。该状态码表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问。</li>
<li><code>303 See Other</code>：该状态码表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。303状态码和<code>302 Found</code>状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。</li>
<li><code>304 Not Modified</code>：该状态码表示客户端发送附带条件（采用GET方法的请求报文中包含<code>If-Match</code>，<code>If-Modified-Since</code>，<code>If-None-Match</code>，<code>If-Range</code>，<code>If-Unmodified-Since</code>中任一首部）的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回<code>304 Not Modified</code>（服务器端资源未改变，可直接使用客户端未过期的缓存）。</li>
</ul>
<p><strong>4XX</strong></p>
<ul>
<li><code>400 Bad Request</code>：该状态码表示请求报文中存在语法错误。</li>
<li><code>401 Unauthorized</code>：该状态码表示发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。另外若之前已进行过1次请求，则表示用户认证失败。</li>
<li><code>403 Forbidden</code>：未获得文件系统的访问授权，访问权限出现某些问题。</li>
<li><code>404 Not Found</code>：该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</li>
</ul>
<p><strong>5XX</strong></p>
<ul>
<li><code>500 Internal Server Error</code>：服务器执行命令时发生内部故障。</li>
<li><code>503 Service Unavailable</code>：该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入RetryAfter首部字段再返回给客户端。</li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP报文内的HTTP信息</title>
    <url>/2017/09/27/HTTP%E6%8A%A5%E6%96%87%E5%86%85%E7%9A%84HTTP%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p><strong>HTTP报文</strong>：</p>
<ul>
<li>报文整体结构：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjxfk76o5wj30nz06h0t5.jpg" alt=""><a id="more"></a></li>
<li>请求报文和响应报文的结构（其他是指HTTP的RFC里未定义的首部，如Cookie）：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjxfob8u6mj30od0aw750.jpg" alt=""></li>
<li>真实报文举例：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjxfp71phrj30og0m10uy.jpg" alt=""></li>
</ul>
<p><strong>报文编码</strong>：</p>
<ul>
<li><strong>实体</strong>作为请求或响应的有效载荷数据（补充项）被传输，其内容由实体首部和实体主体组成。通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</li>
<li>常见的压缩传输的<strong>内容编码</strong>：gzip（GNU zip）、compress（UNIX 系统的标准压缩）、deflate（zlib）、identity（不进行编码）。</li>
<li>分割发送的分块传输编码：分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记块的大小，而实体主体的最后一块会使用“0(CR+LF)”来标记。</li>
</ul>
<p><strong>发送多种数据的多部分对象集合</strong>：</p>
<ul>
<li>在Web表单文件上传时使用——<code>multipart/form-data</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;AaB03x</span><br><span class="line">　</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;field1&quot;</span><br><span class="line">　</span><br><span class="line">Joe Blow</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;pics&quot;; filename&#x3D;&quot;file1.txt&quot;</span><br><span class="line">Content-Type: text&#x2F;plain</span><br><span class="line">　</span><br><span class="line">...（file1.txt的数据）...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>状态码206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用——<code>multipart/byteranges</code>，使用boundary字符串来划分多部分对象集合指明的各类实体。在boundary字符串指定的各个实体的起始行之前插入“–”标记（例如：–AaB03x、–THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入“–”标记（例如：–AaB03x–、–THIS_STRING_SEPARATES–）作为结束：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 206 Partial Content</span><br><span class="line">Date: Fri, 13 Jul 2012 02:45:26 GMT</span><br><span class="line">Last-Modified: Fri, 31 Aug 2007 02:02:20 GMT</span><br><span class="line">Content-Type: multipart&#x2F;byteranges; boundary&#x3D;THIS_STRING_SEPARATES</span><br><span class="line"></span><br><span class="line">--THIS_STRING_SEPARATES</span><br><span class="line">Content-Type: application&#x2F;pdf</span><br><span class="line">Content-Range: bytes 500-999&#x2F;8000</span><br><span class="line"></span><br><span class="line">...（范围指定的数据）...</span><br><span class="line">--THIS_STRING_SEPARATES</span><br><span class="line">Content-Type: application&#x2F;pdf</span><br><span class="line">Content-Range: bytes 7000-7999&#x2F;8000</span><br><span class="line"></span><br><span class="line">...（范围指定的数据）...</span><br><span class="line">--THIS_STRING_SEPARATES--</span><br></pre></td></tr></table></figure>
<!--lalala-->

</li>
</ul>
<p><strong>获得指定资源的指定字节范围的数据</strong>：</p>
<ul>
<li>请求命令举例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Range: bytes&#x3D;5001-10000</span><br><span class="line"></span><br><span class="line">&amp;</span><br><span class="line"></span><br><span class="line">Range: bytes&#x3D;5001-</span><br><span class="line"></span><br><span class="line">&amp;</span><br><span class="line"></span><br><span class="line">Range: bytes&#x3D;0-3000, 5000-7000</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>针对范围请求，响应会返回状态码为<code>206 Partial Content</code>的响应报文。另外，对于多重范围的范围请求，响应会在首部字段<code>Content-Type</code>标明<code>multipart/byteranges</code>后返回响应报文。如果服务器端无法响应范围请求，则会返回状态码<code>200 OK</code>和完整的实体内容：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjxumqm7poj30zr0qxtbg.jpg" alt=""></li>
</ul>
<p><strong>内容协商返回最合适的内容</strong>：</p>
<ul>
<li>内容协商的三种类型：①服务器驱动协商；②客户端驱动协商；③透明协商。</li>
<li>内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准——内容协商的报文片段：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept</span><br><span class="line">Accept-Charset</span><br><span class="line">Accept-Encoding</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的HTTP协议</title>
    <url>/2017/09/26/%E7%AE%80%E5%8D%95%E7%9A%84HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><strong>HTTP概述</strong>：</p>
<ul>
<li>HTTP协议和TCP/IP协议族内的其他众多的协议相同，用于客户端和服务器之间的通信。应用HTTP协议时，必定是一端担任客户端角色，另一端担任服务器端角色。</li>
<li>HTTP协议规定，请求从客户端发出，最后服务器端响应该请求并返回。</li>
<li>请求报文的构成：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx7axs4fjj30mx0aqt95.jpg" alt=""><a id="more"></a></li>
<li>响应报文的构成：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjx7byepifj316n0lxwfo.jpg" alt=""></li>
<li>HTTP是一种不保存状态，即无状态（stateless）协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。为了实现保持状态功能，所以引入了Cookie技术。有了Cookie再用HTTP协议通信，就可以管理状态了。</li>
</ul>
<p><strong>URI</strong>：</p>
<ul>
<li>HTTP协议指定请求URI的方式有很多，如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;hackr.jp&#x2F;index.htm HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">&amp;</span><br><span class="line"></span><br><span class="line">GET index.htm HTTP&#x2F;1.1</span><br><span class="line">Host: hackr.jp</span><br><span class="line"></span><br><span class="line">&amp;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当访问特定资源而是对服务器本身发起请求，可以用一个*来代替请求URI</span><br><span class="line">&#x2F;&#x2F; 如查询HTTP服务器端支持的HTTP方法种类：</span><br><span class="line">OPTIONS * HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
<p><strong>告知服务器意图的HTTP方法</strong>——<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>HEAD</code>、<code>DELETE</code>、<code>OPTIONS</code>、<code>TRACE</code>、<code>CONNECT</code>：</p>
<ul>
<li><strong>GET方法</strong>：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjx7syvyqdj30om07l0t1.jpg" alt=""></li>
<li><strong>POST方法</strong>——POST方法主要用来传输实体的主体，而不是获取相应的主体内容：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjx7vt3xszj30om02z749.jpg" alt=""></li>
<li><strong>PUT方法</strong>——PUT方法用来传输文件，但鉴于HTTP/1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的Web网站不使用该方法。若配合Web应用程序的验证机制，或架构设计采用REST（Representational State Transfer，表征状态转移）标准的同类Web网站，就可能会开放使用PUT方法：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx7zxqakej30om03k3yj.jpg" alt=""></li>
<li><strong>HEAD方法</strong>——和GET方法一样，只是不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjx818m3dfj30om02eq2u.jpg" alt=""></li>
<li><strong>DELETE方法</strong>——用来删除文件，是与PUT相反的方法，但鉴于HTTP/1.1的DELETE方法本身和PUT方法一样不带验证机制，所以一般的Web网站也不使用DELETE方法。当配合Web应用程序的验证机制，或遵守REST标准时还是有可能会开放使用的：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx840fa49j30om02e3yh.jpg" alt=""></li>
<li><strong>OPTIONS方法</strong>——用来查询针对请求URI指定的资源支持的方法：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjx853prwyj30om03kq2w.jpg" alt=""></li>
<li><strong>TRACE方法</strong>——是让Web服务器端将之前的请求通信返回给客户端的方法。客户端通过TRACE方法可以查询发送出去的请求是怎样被（代理中转等）加工修改/篡改的，发送请求时，在Max-Forwards首部字段中填入数值，每经过一个服务器端就将该数字减1，当数值刚好减到0时，就停止继续传输，最后接收到请求的服务器端则返回状态码<code>200 OK</code>的响应，但TRACE方法本来就不怎么常用，再加上它容易引发XST（Cross-Site Tracing，跨站追踪）攻击，通常就更不会用到了：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx8aej5irj31kw0ks780.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjx9ciygu8j30om06h74c.jpg" alt=""></li>
<li><strong>CONNECT方法</strong>——要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。格式——<code>CONNECT 代理服务器名:端口号 HTTP版本</code>：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx8d4v6fzj31kw0j940y.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx8e2odcnj30om02ewef.jpg" alt=""></li>
<li>HTTP/1.0和HTTP/1.1支持的方法汇总（LINK和UNLINK已被HTTP/1.1废弃，不再支持。）：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fjx9en75f0j30om09tjrp.jpg" alt=""></li>
</ul>
<p><strong>持久链接和管线化</strong>：</p>
<ul>
<li>HTTP持久链接：持久连接的好处在于减少了TCP连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使HTTP请求和响应能够更早地结束，这样Web页面的显示速度也就相应提高了。在HTTP/1.1中，所有的连接默认都是持久连接，但在HTTP/1.0内并未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接，但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客户端也需要支持持久连接。</li>
<li>管线化：持久连接使得多数请求以管线化（pipelining）方式发送成为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。管线化技术则比持久连接还要快，请求数越多，时间差就越明显。</li>
</ul>
<p><strong>Cookie</strong>：</p>
<ul>
<li>没有Cookie信息状态下的请求：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjx8t1ht5dj30h5080q35.jpg" alt=""></li>
<li>第2次以后（存有Cookie信息状态）的请求：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjx8tqlz5kj31kw0nrdhq.jpg" alt=""></li>
<li>报文举例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 请求报文（没有Cookie信息的状态）</span><br><span class="line">GET &#x2F;reader&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: hackr.jp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 响应报文（服务器端生成Cookie信息）</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Thu, 12 Jul 2012 07:12:20 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">＜Set-Cookie: sid&#x3D;1342077140226724; path&#x3D;&#x2F;; expires&#x3D;Wed,</span><br><span class="line">10-Oct-12 07:12:20 GMT＞</span><br><span class="line">Content-Type: text&#x2F;plain; charset&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 请求报文（自动发送保存着的Cookie信息）</span><br><span class="line">GET &#x2F;image&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: hackr.jp</span><br><span class="line">Cookie: sid&#x3D;1342077140226724</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>了解Web及网络基础</title>
    <url>/2017/09/26/%E4%BA%86%E8%A7%A3Web%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ul>
<li>TCP/IP协议族（通常人们认为OSI模型的最上面三层在TCP/IP组中是一个应用层）：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjwzwhtgh2j30no0ent9n.jpg" alt=""><a id="more"></a></li>
<li>与HTTP关系密切的协议——IP、TCP 和 DNS。</li>
<li>IP协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是IP地址和MAC地址（Media Access Control Address）。IP地址指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对。IP地址可变换，但MAC地址基本上不会更改。</li>
<li>使用ARP协议凭借MAC地址进行通信：IP间的通信依赖MAC地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标。这时，会采用ARP协议（Address Resolution Protocol）。ARP是一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjx1i4ddvcj30yj0voju2.jpg" alt=""></li>
<li>确保可靠性的TCP协议:按层次分，TCP位于传输层，提供可靠的字节流服务。所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之，TCP协议为了更容易传送大数据才把数据分割，而且TCP协议能够确认数据最终是否送达到对方。</li>
<li>为了准确无误地将数据送达目标处，TCP协议采用了三次握手（three-way handshaking）策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志（flag）——SYN（synchronize）和ACK（acknowledgement）。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjx1m4kzdbj31cd0qjtb4.jpg" alt=""></li>
<li>DNS（Domain Name System）服务是和HTTP协议一样位于应用层的协议。它提供域名到IP地址之间的解析服务。</li>
<li>这几个协议的关系如图：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjx1qajpq3j31kw2b37lq.jpg" alt=""></li>
<li>URI用字符串标识某一互联网资源，而URL表示资源的地点（互联网上所处的位置）——可见URL是URI的子集。</li>
<li>URI的格式以及示例：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjx3l3zky6j30lg045t91.jpg" alt=""><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp:&#x2F;&#x2F;ftp.is.co.za&#x2F;rfc&#x2F;rfc1808.txt</span><br><span class="line">http:&#x2F;&#x2F;www.ietf.org&#x2F;rfc&#x2F;rfc2396.txt</span><br><span class="line">ldap:&#x2F;&#x2F;[2001:db8::7]&#x2F;c&#x3D;GB?objectClass?one</span><br><span class="line">mailto:John.Doe@example.com</span><br><span class="line">news:comp.infosystems.www.servers.unix</span><br><span class="line">tel:+1-816-555-1212</span><br><span class="line">telnet:&#x2F;&#x2F;192.0.2.16:80&#x2F;</span><br><span class="line">urn:oasis:names:specification:docbook:dtd:xml:4.1.2</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>今夜我们一起学习HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>类和接口</title>
    <url>/2017/09/26/%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>to be continued…</p>
<p>第十三条：使类和成员的可访问性最小化<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item13.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item13.html</a><br>（本条书上的例子很简明扼要，翻译也很棒，所以直接上原文啦哈哈~）</p>
<p>第十四条：在共有类中使用访问方法而非公有域<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item14.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item14.html</a><br>（本条似乎和Bob大叔的《Clean Code》第六章——“对象和数据结构”有一点点冲突，大家自行斟酌）<a id="more"></a></p>
<p>第十五条：使可变性最小化<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item15.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item15.html</a><br><a href="http://willseeyou.github.io/effective-java/2016/02/21/effective-java-15.html" target="_blank" rel="noopener">http://willseeyou.github.io/effective-java/2016/02/21/effective-java-15.html</a><br>（不得不承认，原文还是经典啊，废话很少，让人很难不把它的链接放上去）</p>
<p>第十六条：复合优先于继承<br><a href="http://www.jianshu.com/p/7b56e1d9bcae" target="_blank" rel="noopener">http://www.jianshu.com/p/7b56e1d9bcae</a></p>
<p>第十七条：要么为继承而设计，并提供文档说明，要么就禁止继承<br><a href="http://www.jianshu.com/p/678e4d0631d8" target="_blank" rel="noopener">http://www.jianshu.com/p/678e4d0631d8</a></p>
<p>第十八条：接口优于抽象类<br><a href="http://www.jianshu.com/p/5ebde8d00a23" target="_blank" rel="noopener">http://www.jianshu.com/p/5ebde8d00a23</a><br>（注意：Java8之后，接口当中也可以写默认方法了，形如<code>default public void f() {...}</code>）</p>
<p>第十九条：接口只用于定义类型<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item19.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item19.html</a></p>
<p>第二十条：类层次优于标签类<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item20.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item20.html</a></p>
<p>第二十一条：用函数对象表示策略<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item21.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item21.html</a><br>（注意：Java8之后，Java也支持lambda表达式了）</p>
<p>第二十二条：优先考虑静态成员类<br><a href="http://www.jianshu.com/p/263fa2f8e997" target="_blank" rel="noopener">http://www.jianshu.com/p/263fa2f8e997</a></p>
]]></content>
      <tags>
        <tag>Effective Java</tag>
      </tags>
  </entry>
  <entry>
    <title>迭进</title>
    <url>/2017/09/26/%E8%BF%AD%E8%BF%9B/</url>
    <content><![CDATA[<ul>
<li>Kend Beck关于<strong>简单设计</strong>的四条规则（按重要程度排列）：①运行所有的测试；②不可重复；③表达了程序员的意图；④尽可能减少类和方法的数量。</li>
<li>我想，这四条原则在本Clean Code系列前面的文章中已经说得十分清楚了，在这里不再赘述啦~</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2017/09/25/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>归并排序和数据的初始顺序关系不大，所以它相当稳定。</li>
<li>对于长度为N的任意数组，自顶向下和自顶向上的归并排序都需要$\frac{N\log_2 N}{2}$至$N\log_2 N$次比较，且访问数组的次数都不会超过$6N\log_2 N$。<a id="more"></a></li>
<li>第一种实现方法（自顶向下）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms.a2_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        Comparable[] aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, aux, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo &gt;= hi) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        sort(a, aux, lo, mid);</span><br><span class="line">        sort(a, aux, mid + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="keyword">if</span> (!less(a[mid + <span class="number">1</span>], a[mid])) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        merge(a, aux, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (less(a[j], a[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] stdIn = <span class="keyword">new</span> In(args[<span class="number">0</span>]).readAllStrings();</span><br><span class="line">        MergeSort.sort(stdIn);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(stdIn)</span></span>;</span><br><span class="line">        show(stdIn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>第二种实现办法（自底向上）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms.a2_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz = sz + sz) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo += sz + sz) &#123;</span><br><span class="line">                merge(a, lo, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable a, Comparable b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            aux[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[i], aux[j])) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable comparable: a) &#123;</span><br><span class="line">            System.out.print(comparable + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] stdIn = <span class="keyword">new</span> In(args[<span class="number">0</span>]).readAllStrings();</span><br><span class="line">        MergeBU.sort(stdIn);</span><br><span class="line">        MergeBU.show(stdIn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>系统</title>
    <url>/2017/09/24/%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>to be continued…</p>
<ul>
<li>软件系统应将<strong>启动过程</strong>和<strong>运行时逻辑</strong>分离开，在启动过程中构建应用对象，也会存在互相缠结的依赖关系。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>初级排序算法：选择、冒泡、插入和希尔排序</title>
    <url>/2017/09/24/%E5%88%9D%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%9A%E9%80%89%E6%8B%A9%E3%80%81%E5%86%92%E6%B3%A1%E3%80%81%E6%8F%92%E5%85%A5%E5%92%8C%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li>选择排序：每次都要找出剩余部分的最小值，排在最前面，所以交换的次数为N，找值的次数约为$\frac{N^2}{2}$，与输入顺序无关。</li>
<li>冒泡排序：没什么好解释的啊，挺稳定的算法，就是一般比选择排序还慢。 </li>
<li>插入排序：就像我们给扑克牌排序一样，将后面的元素，依次插到它们应该插入的位置。平均需要$\frac{N^2}{4}$次比较和$\frac{N^2}{4}$次交换，最坏情况需要$\frac{N^2}{2}$次比较和$\frac{N^2}{2}$次交换，最好的情况需要N-1次比较和0次交换。插入排序需要交换的次数和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。<a id="more"></a></li>
<li>对于随机无重复主键的选择排序以及插入排序，算法所需的时间都是平方级别的，所以它们的比是一个较小的常数。</li>
<li>希尔排序：常用于处理中等规模（百万级）的排序，当N很大时，即使是世界上最快的算法，速度可能也达不到希尔排序速度的二倍，且代码实现起来要比希尔排序复杂得多。</li>
<li>Talk is cheap，show you the code：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        bubbleSort(a);</span></span><br><span class="line"><span class="comment">//        selectSort(a);</span></span><br><span class="line"><span class="comment">//        insertSort(a);</span></span><br><span class="line">        shellSort(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Comparable i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (less(a[j], a[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(a[j + <span class="number">1</span>], a[j])) &#123;</span><br><span class="line">                    exch(a, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(a[j], a[i])) &#123;</span><br><span class="line">                    exch(a, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; N / <span class="number">3</span>) &#123;</span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h) &#123;</span><br><span class="line">                    exch(a, j, j - h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] stdIn = <span class="keyword">new</span> In(args[<span class="number">0</span>]).readAllStrings();</span><br><span class="line">        sort(stdIn);</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(stdIn)</span></span>;</span><br><span class="line">        show(stdIn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>类</title>
    <url>/2017/09/24/%E7%B1%BB/</url>
    <content><![CDATA[<ul>
<li>类的约定：从一组变量列表开始——如果有公共静态常量，应该先出现，然后是私有静态变量以及私有实体变量（很少会有公共变量）；公共函数应跟在变量列表之后，我们可以把某个公共函数调用的私有工具函数紧随在该公共函数后面。这符合了自顶向下原则，让程序读起来很通顺。</li>
<li>保持类中变量和工具函数的private权限，是令人安心又愉悦的，但是！有的时候我们为了测试方法能访问、验证它们的正确性，不得不将它们变成protected。测试说了算，但我们应该要竭尽全力保持它们的private访问权限，放松封装总是下策。<a id="more"></a></li>
<li>类应该短小：①<strong>单一权责原则（SRP）</strong>——类或模块应有且只有一条加以修改的理由；②内聚——类应该只有少量实体变量，类中的每个方法都应该操作一个或多个这种变量（当然，这不可能的，只是说应该尽量提高类的内聚，有的时候为一组子方法单独提供了许多新的实体变量，那么就应该考虑将这个子方法拆分出去，使类更内聚）。</li>
<li>为什么所谓重构后的优雅代码总是更长呢？这真的使程序变简单了吗？答案是：①我们使用了更有描述性（长）的命名；②重构后的程序将函数和类声明当做一种注释的手段；③采用了空格和格式技巧让程序更可读。</li>
<li>需求会改变，所以代码也会改变。具体类包含实现细节，而抽象类则只呈现概念。依赖于具体细节的客户类，当细节改变的时候就会有风险，我们可以借助接口和抽象类来隔离这些细节带来的影响。</li>
<li>我们希望将系统打造成在添加和修改特性时尽可能少惹麻烦的架子，在理想的系统中，我们通过拓展系统而非修改现有代码来添加新特性。</li>
<li><strong>开放-闭合原则（OCP）</strong>：类应该对拓展开放，对修改封闭。</li>
<li><strong>依赖倒置原则（DIP）</strong>：类应当依赖抽象而不是具体细节。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试</title>
    <url>/2017/09/23/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<ul>
<li>我们为什么要TDD：<a href="http://liuyu314.github.io/programming/2013/09/15/test-tdd/" target="_blank" rel="noopener">http://liuyu314.github.io/programming/2013/09/15/test-tdd/</a></li>
<li>要保持测试代码的整洁，因为测试代码要与生产代码同步的，也是经常演进的，测试代码越脏、越缠结，就越浪费时间，最后反倒是测试先行这种方法论背锅——“<strong>都是什么狗屁TDD拖慢了我们的生产进度！</strong>”——最终导致你放弃了测试，代码开始腐坏。</li>
<li>正是有了测试，你才敢放开手对项目进行重构！测试覆盖率越高，你越高枕无忧。</li>
<li>测试代码最重要的特征是可读性，并且测试代码中不要有很多与测试无关的冗余细节。<a id="more"></a></li>
<li>测试代码一种好的范例是：先构造测试数据，接着测试数据，最后验证有没有达到预期的成果（这三步如果有空行的话，会让你的测试更清晰）。</li>
<li>虽然测试代码应该与生产代码一样整洁，但是，这并不意味着，测试代码和生产代码的要求完全一样——譬如生产代码很要求性能，但测试代码呢，我想绝大多数的时候，性能并不是个问题。“测试代码和生产代码是两种不同的标准”，这种说法其实在某些层面上确实是正确的。</li>
<li>单个测试中，断言的数量应该最少化。</li>
<li>一个测试函数最好只对应一个概念（否则互相干扰，看一个测试还得把测试代码从头读到尾）。</li>
<li>整洁测试应该遵循<strong>First</strong>原则，F（快速）、I（独立）、R（可重复）S（自足验证——直接输出Boolean）T（及时）。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>边界</title>
    <url>/2017/09/22/%E8%BE%B9%E7%95%8C/</url>
    <content><![CDATA[<ul>
<li>第三方库的代码，我们最好将其在我们的代码中隐藏起来，这样当第三方库代码自己发生变动的时候，我们可以将它隐藏起来的实现代码变动很小的一点，就能使整个系统适应改变后的库；另外一个优点是，通过封装它们，我们可以使整个代码变得风格统一，易于阅读。</li>
<li>我们要为第三方代码编写测试，理由有两个：一是通过编写测试，我们可以很快了解它的用法，这叫做<strong>学习性测试</strong>，测试聚焦于我们想从API得到的东西；二是我们可以因此判断第三方代码提供的API功能有没有变动，避免发生不符合预期的错误。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>对所有对象都通用的方法</title>
    <url>/2017/09/21/%E5%AF%B9%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E9%80%9A%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>第八条：覆盖<code>equals</code>时请遵守通用约定<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/di-8-tiao-ff1a-fu-gai-equals-shi-qing-zun-shou-tong-yong-yue-ding.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/di-8-tiao-ff1a-fu-gai-equals-shi-qing-zun-shou-tong-yong-yue-ding.html</a><br><a href="http://www.jianshu.com/p/a986e25ae616" target="_blank" rel="noopener">http://www.jianshu.com/p/a986e25ae616</a></p>
<p>第九条：覆盖<code>equals</code>时总要覆盖<code>hashCode</code><br><a href="http://www.jianshu.com/p/40ee40f155aa" target="_blank" rel="noopener">http://www.jianshu.com/p/40ee40f155aa</a><a id="more"></a></p>
<p>第十条：始终要覆盖<code>toSting</code><br><a href="http://www.cnblogs.com/wangliyue/p/4451142.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangliyue/p/4451142.html</a></p>
<p>第十一条：谨慎地覆盖<code>clone</code><br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item11.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item11.html</a><br><a href="http://www.jianshu.com/p/40d8319ca937" target="_blank" rel="noopener">http://www.jianshu.com/p/40d8319ca937</a></p>
<p>第十二条：考虑实现<code>Comparable</code>接口<br><a href="http://www.jianshu.com/p/f0d39ab402eb" target="_blank" rel="noopener">http://www.jianshu.com/p/f0d39ab402eb</a></p>
]]></content>
      <tags>
        <tag>Effective Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML&amp;CSS简易入门</title>
    <url>/2017/09/20/HTML-CSS%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>to be continued…</p>
<ul>
<li>html和css关联：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div class="art"&gt;</span><br><span class="line"><span class="selector-class">.art</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>:<span class="number">40px</span>;               <span class="comment">/*段首缩进*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;             <span class="comment">/*文字居中*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;     <span class="comment">/*装饰线*/</span></span><br><span class="line">    <span class="attribute">text-decoration-style</span>:dotted;   <span class="comment">/*装饰线的样式*/</span></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> red;   <span class="comment">/*文字阴影*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id="a1"&gt;</span><br><span class="line"><span class="selector-id">#a1</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>边框盒与内容盒：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    border-box;     响应式</span></span><br><span class="line"><span class="comment">    content-box;    default</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>inline元素和block元素。</li>
<li>inline和block相互转化：<code>display:none</code>、<code>block</code>、<code>inline</code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>控制单个字：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'微软雅黑'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>:italic bold <span class="number">25px</span>/<span class="number">40px</span> <span class="string">'微软雅黑'</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>字体的顺序——不安全字体-&gt;安全字体-&gt;字体大类：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'静蕾体'</span>,<span class="string">'微软雅黑'</span>,<span class="string">'文泉驿正黑'</span>,<span class="string">'黑体'</span>,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>css设置图片背景：[background-color][background-image][background-repeat][background-attachment][background-position]<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(./pgy.png);</span><br><span class="line">    <span class="comment">/* background-repeat: repeat-x; */</span></span><br><span class="line">    <span class="comment">/* background-repeat: repeat-y; */</span></span><br><span class="line">    <span class="comment">/* background-repeat: no-repeat; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: gray <span class="built_in">url</span>(./pgy.png) no-repeat fixed right top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>多个元素共用大图背景：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./bg.png) -<span class="number">160px</span> -<span class="number">530px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>CSS选择器，id是唯一的，同一个class名可以有多个段：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test1</span> , <span class="selector-class">.test2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>CSS选择器的优先级：①内联样式表的权值最高1000；②ID选择器的权值为100；③Class类选择器的权值为10；④HTML标签选择器的权值为1。另——组合时可以相加来判断优先级大小。</li>
<li>CSS的引入方式（专门的CSS文件是不需要style标签的）：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* link */</span></span><br><span class="line">&lt;link rel="stylesheet" href="./28.css"&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS文件中再import（@import需要放在顶部） */</span></span><br><span class="line"><span class="keyword">@import</span> url(./<span class="number">28</span>-<span class="number">2</span>.css)</span><br><span class="line"></span><br><span class="line">/* 内联 */</span><br><span class="line">&lt;p id+<span class="string">"test1"</span> class=<span class="string">"test2"</span> style=<span class="string">"font-size:28px;font-weight:bold;"</span>&gt;</span><br><span class="line">    Hello World！</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>统一各浏览器默认值：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span>,<span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">form</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">hr</span>,<span class="selector-tag">input</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">p</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">td</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">th</span>,<span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> tahoma,arial,<span class="string">'Hiragino Sans GB'</span>,<span class="string">'\5b8b\4f53'</span>,sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">dfn</span>,<span class="selector-tag">em</span>,<span class="selector-tag">var</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span>,<span class="selector-tag">kbd</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">samp</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: courier new,courier,monospace</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">small</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: text-top</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: text-bottom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fieldset</span>,<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>无语义标签：<code>div</code>、<code>span</code></li>
<li>有语义标签：<code>h1-h6</code>（标题）、<code>p</code>（段落）、<code>img</code>（图片）、<code>a</code>（超链接和锚点）、<code>ul</code>（无序列表）、<code>ol</code>（有序列表）、<code>table</code>（表格）、<code>header</code>（头部）、<code>footer</code>（尾部）、<code>nav</code>（导航栏）、<code>article</code>（文章）、<code>aside</code>（侧边栏）、<code>time</code>（时间）、<code>embed</code>（视频）。</li>
<li>h1-h6标签：h1只能有一个。</li>
<li>列表：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span>   </span><br><span class="line">        ul&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">list-style-type</span><span class="selector-pseudo">:square</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>宋江<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>卢俊义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>吴用<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>表格：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        table &#123;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">        &#125;</span><br><span class="line">        th,td&#123;</span><br><span class="line">            border: 1px solid blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>身高<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张飞<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>180<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>关羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>190<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>身高<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张飞<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>180<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>关羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张飞<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>180<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>关羽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span>1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>图片引入：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"本机相对地址、互联网上的图片地址（注意是否防盗等）"</span> <span class="attr">alt</span>=<span class="string">"图片信息"</span> <span class="attr">title</span>=<span class="string">"鼠标放上去时显示的文字"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>img是内联置换元素——一种特殊的内联元素，可以设置宽和高。</li>
<li>a标签对应的地址可以使用本机相对地址或者互联网地址，如果需要跳出新窗口，用target属性：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https:www.baidu.com target="</span><span class="attr">_blank</span>"&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#&gt;空链接&lt;/a&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>锚点：HTML5直接拿id当锚点<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"q3"</span>&gt;</span>毕业薪资<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用锚点的地址样式：--&gt;</span></span><br><span class="line">http://...html#id</span><br></pre></td></tr></table></figure></li>
<li>CSS的伪类：选中的是元素的某个状态<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 顺序是lvha，不能乱写 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="comment">/* 正常的a，a:link===a */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="comment">/* 点击后的a */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/* 鼠标悬停的a */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="comment">/* 点击点击瞬间a的状态 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>字符实体：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;gt;</span>    <span class="comment">&lt;!-- 大于号 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>    <span class="comment">&lt;!-- 小于号 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span>  <span class="comment">&lt;!-- 版权 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;reg;</span>   <span class="comment">&lt;!-- 注册商标 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;yen;</span>   <span class="comment">&lt;!-- 人民币 等同于实体编号（Unicode编码）中的 &amp;#165; --&gt;</span></span><br><span class="line"><span class="symbol">&amp;quot;</span>  <span class="comment">&lt;!-- 双引号 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;apos;</span>  <span class="comment">&lt;!-- 单引号 --&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>CSS3强大的选择器：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="comment">/* 只能选中div下一层级的ul */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="comment">/* 紧贴在div后的p标签 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="comment">/* div后的所有同级的p标签 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 属性选择器 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=email]</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 伪类选择器 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 伪对象选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">'^_^'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">':('</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>引入Awesome外部字体：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line">                font-family: 'FontAwesome';</span><br><span class="line">                src: url('../fonts/fontawesome-webfont.eot?v=4.3.0');</span><br><span class="line">                src: url('../fonts/fontawesome-webfont.eot?#iefix&amp;v=4.3.0') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff2?v=4.3.0') format('woff2'), url('../fonts/fontawesome-webfont.woff?v=4.3.0') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.3.0') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.3.0#fontawesomeregular') format('svg');</span><br><span class="line">                font-weight: normal;</span><br><span class="line">                font-style: normal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            div &#123;</span><br><span class="line">                font-family: FontAwesome;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">                font-family: FontAwesome;</span><br><span class="line">                content: "\f075";</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;#xf075;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>9条评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>色彩的表达方式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#test1 &#123;</span><br><span class="line">    &#x2F;* background: rgb(255,255,255); *&#x2F;</span><br><span class="line">    background: rgb(100,34,72);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#test2 &#123;</span><br><span class="line">    background: #642248;</span><br><span class="line">    &#x2F;* background:#333333 &#x3D;&#x3D;等价于&#x3D;&#x3D;&#x3D; background: #333*&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#test3 &#123;</span><br><span class="line">    background: royalblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>尺寸的表示：<code>绝对尺寸——5px</code>、<code>相对尺寸——50%（相对父元素）</code>、<code>em（父元素中一个M字符的大小）</code>。</li>
<li>CSS圆角，画一个小太极：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test5</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">300px</span> solid white;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">300px</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#test5</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">100px</span> solid white;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#test5</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">100px</span> solid black;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>相对定位和绝对定位：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 相对定位就是相对自己的位置变动，不影响其他元素 */</span></span><br><span class="line"><span class="selector-id">#test1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: gray;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绝对定位就是先渲染别的元素，最后再将自己的投影映射上去，因此也带来了z-index的变化 */</span></span><br><span class="line"><span class="comment">/* 如果一个元素需要一个绝对定位，那么需要它的父亲也有一个position属性</span></span><br><span class="line"><span class="comment">position: absolute;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Overflow溢出处理：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;   <span class="comment">/*隐藏*/</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">scroll</span>;   <span class="comment">/*始终有滚动条*/</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;     <span class="comment">/*溢出时有滚动条*/</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>注册表单：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        action:URL,提交到哪去</span><br><span class="line">        method:get/post,提交方式</span><br><span class="line">        get:参数显示在URL地址栏上</span><br><span class="line">        post: 不在地址栏显示参数</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            用户名:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            密码:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            性别:</span><br><span class="line">        男:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>女:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            爱好:  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            篮球: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            足球: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"footerball"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            混球: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"hunqiu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            学历  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"xueli"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"docter"</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"da"</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"middle"</span>&gt;</span>中学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"small"</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            个人简介: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"intro"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"ip"</span> <span class="attr">value</span>=<span class="string">"192.168.1.100"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"赶紧提交"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"恢复原状"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>新增input属性：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birth"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span> <span class="attr">name</span>=<span class="string">"clock"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week"</span> <span class="attr">name</span>=<span class="string">"clock"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"18"</span> <span class="attr">max</span>=<span class="string">"99"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"请输入关键词"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>错误处理</title>
    <url>/2017/09/20/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>错误处理很重要，但是如果让错误处理搞乱了代码逻辑，就是错误的做法。</p>
</blockquote>
<ul>
<li>使用异常而非返回码。</li>
<li>使用不可控异常，换言之，尽量不要使用可控异常，理由是：如果你编写一套关键代码库，则可控异常有时也会有用：你必须捕捉异常；但对于一般的应用开发，<strong>其依赖成本要高于收益</strong>。<a id="more"></a></li>
<li>要给出异常发生环境的说明，因为默认的异常只会告诉你堆栈踪迹（stack trace），却不会告诉你该失败操作的初衷。如果你的应用程序有日志系统，传递足够的信息（如失败的操作和失败的类型）给catch块，并记录下来。</li>
<li>依调用者需要定义异常类：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原调用端捕获异常的代码</span></span><br><span class="line">ACMEPort port = <span class="keyword">new</span> ACMEPort(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    port.open();</span><br><span class="line">&#125; <span class="keyword">catch</span> (DeviceResponseException e) &#123;</span><br><span class="line">    reportPortError(e);</span><br><span class="line">    logger.log(<span class="string">"Device response exception"</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ATM1212UnlockedException e) &#123;</span><br><span class="line">    reportPortError(e);</span><br><span class="line">    logger.log(<span class="string">"Device response exception"</span>, e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (GMXError e) &#123;</span><br><span class="line">    reportPortError(e);</span><br><span class="line">    logger.log(<span class="string">"Device response exception"</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">↓ 将其调用打包成通用异常，简化检查端代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalPort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ACMEPort innerPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalPort</span><span class="params">(<span class="keyword">int</span> portNumber)</span> </span>&#123;</span><br><span class="line">        innerPort = <span class="keyword">new</span> ACMEPort(portNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            innerPort.open();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DeviceResponseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PortDeviceFailure(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ATM1212UnlockedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PortDeviceFailure(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GMXError e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PortDeviceFailure(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现调用端捕获异常的代码</span></span><br><span class="line">LocalPort port = <span class="keyword">new</span> LocalPort(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    port.open();</span><br><span class="line">&#125; <span class="keyword">catch</span> (PortDeviceFailure e) &#123;</span><br><span class="line">    reportPortError(e);</span><br><span class="line">    logger.log(e.getMessage(), e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>定义常规流程：将异常处理catch块中的操作流程封装到常规的流程中。这种手法叫做特例模式，创建一个类或配置一个对象，用来处理特例。</li>
<li>别返回<code>null</code>值，理由是：一旦你返回<code>null</code>值，那么就要随时检查<code>null</code>值，只要有一处忘记了判断<code>if(getSomeObject() != null)</code>，就非常容易引起<code>NullPointerException</code>。</li>
<li>别传递<code>null</code>值，理由是：多大仇啊，给人家传<code>null</code>值不就是给人家挖坑么…</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>对象和数据结构</title>
    <url>/2017/09/19/%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><strong>数据抽象</strong>：</p>
<ul>
<li>思考一个问题，我们为什么会用private变量呢？大概是因为我们不想让其他使用者依赖这些变量：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这样我们可以在心血来潮时能自由修改其类型或实现。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>第二个问题是那么为什么还是有那么多的程序员给对象添加赋值器和取值器，这不仍然暴露了私有变量吗？<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是的，虽然如此，但是我们可以：</span><br><span class="line">①隐藏实现——只是暴露抽象接口，以便用户无需了解数据的实现。</span><br><span class="line">②固定存取策略——譬如设定一个点的坐标，public方法是同时设置x、y的坐标，这样的原子操作，能够规避线程安全等问题。</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>我们不应该暴露数据细节，而是应该以抽象的形态表述数据。要以最好的方式呈现某个对象包含的数据需要做严肃的思考，傻乐着乱加取值器和赋值器，是最坏的选择。</li>
</ul>
<p><strong>数据、对象和反对称性</strong>：</p>
<ul>
<li>如果一个系统中添加新数据类型比添加函数更频繁（相对于正常的比例，并非真的指次数），那么就应该用面向对象的方法，因为加入新的数据类型的话，面向对象方法，不需要改变其他数据类型的代码。</li>
<li>反之，如果频繁增加函数而不是频繁添加新的数据类型，就应该用面向过程的编程方法，理由——面向过程的方法添加函数只需要在一处添加，而不用去每个类中添加。“<strong>一切都是对象</strong>”只是一个传说，有时候你真的想要在简单的数据结构上做一些过程式的操作。</li>
<li>面向过程的代码范例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> Point topLeft; <span class="keyword">public</span> <span class="keyword">double</span> side;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> Point topLeft; <span class="keyword">public</span> <span class="keyword">double</span> height; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> Point center; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geometry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(Object shape)</span> <span class="keyword">throws</span> NoSuchShapeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Square) &#123; </span><br><span class="line">            Square s = (Square)shape; </span><br><span class="line">            <span class="keyword">return</span> s.side * s.side;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle) &#123; </span><br><span class="line">            Rectangle r = (Rectangle)shape; </span><br><span class="line">            <span class="keyword">return</span> r.height * r.width;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">            Circle c = (Circle)shape;</span><br><span class="line">            <span class="keyword">return</span> PI * c.radius * c.radius; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchShapeException(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>面向对象的代码范例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Point topLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> side;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> side*side;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Point topLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> height * width;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Point center;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * radius * radius;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->







</li>
</ul>
<p><strong>得墨忒耳定律（Law of Demeter，缩写LoD）</strong>：</p>
<ul>
<li>类C的方法f只应调用以下方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①C类的静态方法；</span><br><span class="line">②由f所创建的对象的方法；</span><br><span class="line">③作为参数传递给f的对象的方法；</span><br><span class="line">④由C的实体变量持有对象的方法。</span><br><span class="line">——即，方法不应调用任何函数返回对象的方法。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>简单来说就是“人可以让狗走起来，但是人不应该直接控制狗的腿”。</li>
</ul>
<p><strong>数据传送对象</strong>：</p>
<ul>
<li>最精炼的数据结构，应该就是一个只有公共变量而没有任何函数的类，在这些纯数据结构中加入函数是不智的行为，这会导致数据结构和对象的混杂体。</li>
<li>好的办法是把<strong>Active Record</strong>当做数据结构，并创建包含业务规则、隐藏内部数据（可能就是Active Record实体）的独立对象。</li>
<li>Active Record就是一种特殊的数据传输对象（DTO），它们是拥有公共（或可豆式访问的）变量的数据结构，但通常也会有类似save()、find()这样的可浏览方法。它一般是对数据源的直接翻译。</li>
</ul>
<p><strong>总结</strong>：</p>
<ul>
<li>尽量不要把公共访问器、改值器与执行操作的函数放在一起。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>union-find算法</title>
    <url>/2017/09/17/union-find%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>本来想把Sedgewick教授的$《Algorithms;_{Fourth,Edition}》$做个小小的学习笔记，没想到网上已经有了排版优良的博客了，所以不重复啦（我偷懒了吗？并没有！）</p>
<p><a href="http://blog.csdn.net/itguangit/article/details/53002354" target="_blank" rel="noopener">http://blog.csdn.net/itguangit/article/details/53002354</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>格式</title>
    <url>/2017/09/17/%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>短文件通常比长文件好理解，一个已经被证实的真相是：我们可以用大多数200行、最长500行的单个文件构造出出色的系统。</li>
<li>源文件也要像报纸文章那样，名称应当简单且一目了然——名称本身应该告诉我们是否在正确的模块中。源文件最顶部应该给出高层次的概念和算法。细节应该往下渐次展开，直至找到源文件中最低层的函数和细节。</li>
<li>垂直方向上的间隔：譬如封包声明、导入声明和每个函数之间，都应该有空白行隔开，这极大提升了代码的可读性。<a id="more"></a></li>
<li>垂直方向上的靠近：紧密相关的代码应该相互靠近，譬如在类中声明两个实体变量时，就不要用大量的注释将它们隔开。</li>
<li>垂直方向上的距离：<ul>
<li>除非有很好的理由，否则就不要把关系密切的概念放在不同的文件之中。</li>
<li>变量声明应该尽可能靠近其使用的位置，因为函数很短，所以就可以放在函数开头。</li>
<li>循环中的控制变量应该总在循环语句中声明。</li>
<li>实体变量应该在类的顶部声明。</li>
<li>相关的函数应该放在一起，且函数的调用者总是应该放到被调用函数的上面。</li>
</ul>
</li>
<li>一行代码应该有多宽？最好在80个字符以内，最多也不要超过120个字符。</li>
<li>水平方向上的间隔：就是用空格，譬如赋值<code>=</code>两边要加空格，而方法名和<code>(</code>之间不加。</li>
<li>关于缩进：即是函数体只有一句话，也不要写在一行上，即使函数体是空的，最好也不要在同一行上放那个意义非凡的<code>;</code>。</li>
<li>如果有团队规则，当然以团队的规则为准，团队至上！</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>注释</title>
    <url>/2017/09/17/%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<ul>
<li>注释的最高境界就是——不写注释- -。</li>
<li>为什么要极力贬低注释——因为注释会撒谎：最开始的注释就不一定是对的，且，程序出了问题我们会及时改正程序，但是往往不能保证注释的更新，于是注释反而成了理解程序的障碍，还有很重要的一点是，有些注释存在误导性，譬如注释得不全面，没有写出函数的副作用，虽然注释得初衷是好的。</li>
<li>不要试图注释糟糕的代码，使其变得可读，因为花那个时间还不如重写。用代码阐述你的逻辑比用注释阐述你的逻辑要精确、简洁、直观得多。</li>
<li>好注释很少，但是也存在，譬如：<a id="more"></a><ul>
<li>法律信息；</li>
<li>对基本信息提供注释，譬如某个变量；</li>
<li>对令人费解的意图进行解释（譬如你写出了一个精妙但是难以理解的算法）；</li>
<li>阐释一些晦涩难明的参数或返回值——当你调用别人的API你别无选择时；</li>
<li>警示——在某个方法实现里面使用了对系统有其他副作用的代码时，警告其他程序员调用时注意；</li>
<li>// TODO形式的注释——有时需要用这种形式在源代码中放置要做的工作列表，我们要定期检查，尽力使它们表少；</li>
<li>放大某种看起来不合理的代码的重要性（譬如基于某种不得不的原因你写出了一段看起来冗余其实很重要的代码）；</li>
<li>公共API中的Javadoc——这是应该做的。</li>
</ul>
</li>
<li>坏的注释，比比皆是：<ul>
<li>其实大家并不怎么关心的你的喃喃自语；</li>
<li>废话注释——“定义了一个字符类型的变量”、“这是一段比较两个数大小的代码”；</li>
<li>误导性注释；</li>
<li>循规式注释，譬如“每个函数都要有Javadoc”这种愚蠢滑稽的言论；</li>
<li>日志式注释——我们又不是没有代码控制系统- -；</li>
<li>抱怨式注释——“我好困”；</li>
<li>不要滥用位置标记——“// Action ///////////////////////”；</li>
<li>归属和署名；</li>
<li>没什么用的所以注释掉的代码——为什么不直接删除- -；</li>
<li>括号后面的注释——或许有点用吧，为什么不直接把代码写短呢- -；</li>
<li>信息过多；</li>
<li>HTML格式的注释——这应该抽取注释的工具做的事情；</li>
<li>非本地信息——请确保将注释写在离它最近的代码；</li>
<li>函数头。</li>
</ul>
</li>
<li>范例：<ul>
<li>糟糕的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class Generates prime numbers up to a user specified</span></span><br><span class="line"><span class="comment"> * maximum. The algorithm used is the Sieve of Eratosthenes.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Eratosthenes of Cyrene, b. c. 276 BC, Cyrene, Libya --</span></span><br><span class="line"><span class="comment"> * d. c. 194, Alexandria. The first man to calculate the</span></span><br><span class="line"><span class="comment"> * circumference of the Earth. Also known for working on</span></span><br><span class="line"><span class="comment"> * calendars with leap years and ran the library at Alexandria.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The algorithm is quite simple. Given an array of integers</span></span><br><span class="line"><span class="comment"> * starting at 2. Cross out all multiples of 2. Find the next</span></span><br><span class="line"><span class="comment"> * uncrossed integer, and cross out all of its multiples.</span></span><br><span class="line"><span class="comment"> * Repeat untilyou have passed the square root of the maximum</span></span><br><span class="line"><span class="comment"> * value. *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Alphonse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 13 Feb 2002 atp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratePrimes</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxValue is the generation limit.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generatePrimes(<span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxValue &gt;= <span class="number">2</span>)  <span class="comment">// the only valid case </span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// declarations</span></span><br><span class="line">            <span class="keyword">int</span> s = maxValue + <span class="number">1</span>;   <span class="comment">// size of array </span></span><br><span class="line">            <span class="keyword">boolean</span>[] f = <span class="keyword">new</span> <span class="keyword">boolean</span>[s];</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="comment">// initialize array to true. </span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">                f[i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// get rid of known non-primes </span></span><br><span class="line">            f[<span class="number">0</span>] = f[<span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// sieve</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; Math.sqrt(s) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i])   <span class="comment">// if i is uncrossed, cross its multiples. </span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (j = <span class="number">2</span> * i; j &lt; s; j += i)</span><br><span class="line">                        f[j] = <span class="keyword">false</span>;   <span class="comment">// multiple is not prime</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// how many primes are there ?</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i])</span><br><span class="line">                    count++;    <span class="comment">// bump count.</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] primes = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">            <span class="comment">// move the primes into the result</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i])   <span class="comment">// if prime</span></span><br><span class="line">                    primes[j++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> primes;  <span class="comment">// return the prime</span></span><br><span class="line">        &#125; <span class="keyword">else</span>  <span class="comment">// maxValue &lt; 2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];  <span class="comment">// return null array if bad input.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>重构后的代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class Generates prime numbers up to a user specified</span></span><br><span class="line"><span class="comment"> * maximum. The algorithm used is the Sieve of Eratosthenes.</span></span><br><span class="line"><span class="comment"> * Given an array of integers starting at 2:</span></span><br><span class="line"><span class="comment"> * Find the first uncrossed integer, and cross out all its</span></span><br><span class="line"><span class="comment"> * multiples. Repeat until there are no more multiples</span></span><br><span class="line"><span class="comment"> * in the array.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] crossedOut;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generatePrimes(<span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxValue &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            uncrossIntegersUpTo(maxValue);</span><br><span class="line">            crossOutMultiples();</span><br><span class="line">            putUncrossedIntegersIntoResult();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uncrossIntegersUpTo</span><span class="params">(<span class="keyword">int</span> maxValue)</span> </span>&#123;</span><br><span class="line">        crossedOut = <span class="keyword">new</span> <span class="keyword">boolean</span>[maxValue + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; crossedOut.length; i++)</span><br><span class="line">            crossedOut[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">crossOutMultiples</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> limit = determineIterationLimit();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit; i++)</span><br><span class="line">            <span class="keyword">if</span> (notCrossed(i)) crossOutMultiplesOf(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">determineIterationLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Every multiple in the array has a prime factor that</span></span><br><span class="line">        <span class="comment">// is less than or equal to the root of the array size,</span></span><br><span class="line">        <span class="comment">// so we don't have to cross out multiples of numbers</span></span><br><span class="line">        <span class="comment">// larger than that root.</span></span><br><span class="line">        <span class="keyword">double</span> iterationLimit = Math.sqrt(crossedOut.length);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) iterationLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">crossOutMultiplesOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> multiple = <span class="number">2</span> * i;</span><br><span class="line">             multiple &lt; crossedOut.length; multiple += i)</span><br><span class="line">            crossedOut[multiple] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">notCrossed</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> crossedOut[i] == <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putUncrossedIntegersIntoResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">int</span>[numberOfUncrossedIntegers()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">2</span>; i &lt; crossedOut.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (notCrossed(i)) result[j++] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfUncrossedIntegers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; crossedOut.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (notCrossed(i)) count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/2017/09/16/%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li>函数应该短小、每个函数应该只做一件事，举例子：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    PageData pageData, <span class="keyword">boolean</span> isSuite)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isTestPage(pageData))</span><br><span class="line">        includeSetupAndTeardownPages(pagedata, isSuite);</span><br><span class="line">    <span class="keyword">return</span> pageData.getHtml();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>只做一件事的说明：如果函数只是做了该函数名下同一抽象层级上的步骤，则函数还是只做了一件事，只做一件事的函数无法被合理地切分为多个区段。</li>
<li>所谓同一个抽象层级的说明：字符串拼接就是相当低的层级，而函数调用就算比较高的层级，函数中混杂的层级会使读者难以区分是基础概念还是细节。</li>
<li>switch语句：</li>
<li>使用描述性名称：长而具有描述性的名称要比短而令人费解的名称好。长而具有描述性的名称，要比描述性的长注释好。命名方式包保持一致，使用与模块一脉相承的短语、名词和动词给函数命名。</li>
<li>函数参数：<ul>
<li>应该使用尽量少的参数，因为函数和参数是属于不同抽象层级的东西，它要求阅读函数的代码的人不得不去了解在当前不太重要的另一个层级的细节。</li>
<li>对于转换，使用输出参数而不使用返回值是令人迷惑的。如果函数对输入参数要进行转换操作，那么操作的结果就应该以返回值的形式体现。</li>
<li>如果函数只有输入参数而没有返回值，那么这个函数就应该是一个事件，通过输入的参数值来改变系统的某种状态（使用这种形式的函数应该让读者很清楚地了解这是一个事件，要谨慎地选择名称和上下文），否则一定要有返回值。</li>
<li>向函数传入布尔值简直是骇人听闻的做法，这样做，方法的签名立马就复杂了起来，会让可怜的读者摸不着头脑。</li>
<li>二元函数也是有风险的，因为很多时候，两个参数的顺序仅仅是一种约定，并不符合自然规律，需要特意去辨别，尤其两个参数是一个数据类型的时候，连IDEA也无法事先提示你哪写错了。</li>
<li>三元函数更是要难懂得多，能不用就不用。</li>
<li>四元及四元以上的函数，除非有足够足够的理由，否则千万不要用！如果函数看起来需要两个、三个或者之上的参数，就说明其中一些参数应该封装为类了。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Cicle <span class="title">makeCicle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> radius)</span></span>;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="function">Cicle <span class="title">makeCicle</span><span class="params">(Point center, <span class="keyword">double</span> radius)</span></span>;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>有可变参数的函数仍可能是三元函数，这是能够勉强容忍的，但是要超过三个参数，就有点不太妙了，容易出错。</li>
</ul>
</li>
<li>好的函数最好无副作用，如果有，应该在函数的命名中说明，虽然这样可能还是违背了“只做一件事的原则”。</li>
<li>在面向对象之前的岁月里，有时的确需要输出参数，但是现在，大概已经不太需要了吧，举个例子<code>public void appendFooter(StringBuffer report)</code>，但是只调用<code>appendFooter(s)</code>的时候，这是令人迷惑的，还得特意看一下函数的签名，这容易打断编程思路。普遍而言，我们总是认为参数是输入，所以在构建一个函数的时候，我们也尽量不要把输出作为参数。</li>
<li>分割指令与询问：我们经常会遇到，这样的函数——<code>public boolean set(String attribute, String value)</code>，顺势而生的是这句——<code>if (set(&quot;username&quot;, &quot;xijinian&quot;)) ...</code>，但是这是什么意思呢，什么时候返回false呢？是没有权限设置的时候还是username不存在的时候或者是因为某些原因设置失败的时候？使用者除非去找实现代码，否则就只能靠臆测！明确的代码应该这样写：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (attributeExists(<span class="string">"username"</span>)) &#123;</span><br><span class="line">    setAttribute(<span class="string">"Username"</span>, <span class="string">"xijinian"</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>使用异常来代替返回错误码（除非你只是做个提示，而不打算处理，那你就可以使用Log4j了- -）：如果你使用了错误码，就会要求你现场处理错误，这会导致深层次的不优雅的嵌套结构，而异常呢，你完全可以给它先抛出来后处理，更大的好处是——错误处理代码可以与主业务代码分离，程序的结构会更加清晰。<ul>
<li>抽离Try/Catch代码块：它们使代码丑陋不堪！搞乱了代码的结构！把错误处理和正常流程混为一谈，最好把try和catch代码块的主体部分抽离出来，另外形成函数  。在下例中，delete函数至于错误处理有关，很容易理解后忽略掉，这样我们完全可以心无旁骛得看deletePageAndAllReference函数的实现逻辑了：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        deletePageAndAllReference(page);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        logError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deletePageAndAllReference</span><span class="params">(Page page)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    deletePage(page);</span><br><span class="line">    registry.deleteReference(page.name);</span><br><span class="line">    configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logError</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    logger.log(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>错误处理就是一件事，因此错误处理的函数不应该再做其他的事，这意味着如果try在某个函数中存在，它就应该是这个函数主体的第一单词，且catch（或者finally）后面不应该再有其他句子（如上例）。</li>
<li>Error.java做成枚举是欠妥的：当Error枚举类型修改时，其他的导入这个枚举的类也被迫修改了，所有这些其他的类都需要重新编译和部署（那些以为可以不重新编译部署的人最终都自尝恶果），代价很大。使用异常代替错误码，新的异常就可以从异常类派生而出，源源不断，不必重新编译和步骤（开放闭合原则OCP的一个范例）。</li>
</ul>
</li>
<li>消灭重复代码，这可是代码优化的终极目标之一哈~</li>
<li>只要函数保持短小，Dijkstra的那套结构化编程规则意义不大，只有在大函数中，我们才要避免在循环中使用break、continue以及多个return，当然goto能禁止就禁止吧，不是啥好东西（Java中没有goto嘿嘿）。</li>
<li>如何写出这样短小的，美丽的函数：乱写之后慢慢重构、打磨，不太会有人一开始就按照上诉的规则写函数的，因为这很繁琐。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2017/09/15/Redis/</url>
    <content><![CDATA[<p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>换句话说，Redis就像是一个HashMap，不过不是在JVM中运行，而是以一个独立进程的形式运行。</p>
<ul>
<li>打开Redis服务端的方式：<code>src/redis-server</code></li>
<li>打开Redis客户端的方式：<code>src/redis-cli</code></li>
<li>Redis的5种数据类型：String、List、Hash、Set、Sorted Set（有序集合）。<a id="more"></a></li>
<li>String字符串相关的操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET key value                           设置key&#x3D;value</span><br><span class="line">GET key                                 或者键key对应的值</span><br><span class="line">GETRANGE key start end                  得到字符串的子字符串存放在一个键</span><br><span class="line">GETSET key value                        设置键的字符串值，并返回旧值</span><br><span class="line">GETBIT key offset                       返回存储在键位值的字符串值的偏移</span><br><span class="line">MGET key1 [key2..]                      得到所有的给定键的值</span><br><span class="line">SETBIT key offset value                 设置或清除该位在存储在键的字符串值偏移</span><br><span class="line">SETEX key seconds value                 键到期时设置值</span><br><span class="line">SETNX key value                         设置键的值，只有当该键不存在</span><br><span class="line">SETRANGE key offset value               覆盖字符串的一部分从指定键的偏移</span><br><span class="line">STRLEN key                              得到存储在键的值的长度</span><br><span class="line">MSET key value [key value...]           设置多个键和多个值</span><br><span class="line">MSETNX key value [key value...]         设置多个键多个值，只有在当没有按键的存在时</span><br><span class="line">PSETEX key milliseconds value           设置键的毫秒值和到期时间</span><br><span class="line">INCR key                                增加键的整数值一次</span><br><span class="line">INCRBY key increment                    由给定的数量递增键的整数值</span><br><span class="line">INCRBYFLOAT key increment               由给定的数量递增键的浮点值</span><br><span class="line">DECR key                                递减键一次的整数值</span><br><span class="line">DECRBY key decrement                    由给定数目递减键的整数值</span><br><span class="line">APPEND key value                        追加值到一个键</span><br><span class="line">DEL key                                 如果存在删除键</span><br><span class="line">DUMP key                                返回存储在指定键的值的序列化版本</span><br><span class="line">EXISTS key                              此命令检查该键是否存在</span><br><span class="line">EXPIRE key seconds                      指定键的过期时间</span><br><span class="line">EXPIREAT key timestamp                  指定的键过期时间。在这里，时间是在Unix时间戳格式</span><br><span class="line">PEXPIRE key milliseconds                设置键以毫秒为单位到期</span><br><span class="line">PEXPIREAT key milliseconds-timestamp    设置键在Unix时间戳指定为毫秒到期</span><br><span class="line">KEYS pattern                            查找与指定模式匹配的所有键</span><br><span class="line">MOVE key db                             移动键到另一个数据库</span><br><span class="line">PERSIST key                             移除过期的键</span><br><span class="line">PTTL key                                以毫秒为单位获取剩余时间的到期键</span><br><span class="line">TTL key                                 获取键到期的剩余时间</span><br><span class="line">RANDOMKEY                               从Redis返回随机键</span><br><span class="line">RENAME key newkey                       更改键的名称</span><br><span class="line">RENAMENX key newkey                     重命名键，如果新的键不存在</span><br><span class="line">TYPE key                                返回存储在键的数据类型的值</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>List列表相关的操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BLPOP key1 [key2 ] timeout              取出并获取列表中的第一个元素，或阻塞，直到有可用</span><br><span class="line">BRPOP key1 [key2 ] timeout              取出并获取列表中的最后一个元素，或阻塞，直到有可用</span><br><span class="line">BRPOPLPUSH source destination timeout   从列表中弹出一个值，它推到另一个列表并返回它；或阻塞，直到有可用</span><br><span class="line">LINDEX key index                        从一个列表其索引获取对应的元素</span><br><span class="line">LINSERT key BEFORE|AFTER pivot value    在列表中的其他元素之后或之前插入一个元素</span><br><span class="line">LLEN key                                获取列表的长度</span><br><span class="line">LPOP key                                获取并取出列表中的第一个元素</span><br><span class="line">LPUSH key value1 [value2]               在前面加上一个或多个值的列表</span><br><span class="line">LPUSHX key value                        在前面加上一个值列表，仅当列表中存在</span><br><span class="line">LRANGE key start stop                   从一个列表获取各种元素</span><br><span class="line">LREM key count value                    从列表中删除元素</span><br><span class="line">LSET key index value                    在列表中的索引设置一个元素的值</span><br><span class="line">LTRIM key start stop                    修剪列表到指定的范围内</span><br><span class="line">RPOP key                                取出并获取列表中的最后一个元素</span><br><span class="line">RPOPLPUSH source destination            删除最后一个元素的列表，将其附加到另一个列表并返回它</span><br><span class="line">RPUSH key value1 [value2]               添加一个或多个值到列表</span><br><span class="line">RPUSHX key value                        添加一个值列表，仅当列表中存在</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Hash字典、哈希表相关的操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HDEL key field[field...]                删除对象的一个或几个属性域，不存在的属性将被忽略</span><br><span class="line">HEXISTS key field                       查看对象是否存在该属性域</span><br><span class="line">HGET key field                          获取对象中该field属性域的值</span><br><span class="line">HGETALL key                             获取对象的所有属性域和值</span><br><span class="line">HINCRBY key field value                 将该对象中指定域的值增加给定的value，原子自增操作，只能是integer的属性值可以使用</span><br><span class="line">HINCRBYFLOAT key field increment        将该对象中指定域的值增加给定的浮点数</span><br><span class="line">HKEYS key                               获取对象的所有属性字段</span><br><span class="line">HVALS key                               获取对象的所有属性值</span><br><span class="line">HLEN key                                获取对象的所有属性字段的总数</span><br><span class="line">HMGET key field[field...]               获取对象的一个或多个指定字段的值</span><br><span class="line">HSET key field value                    设置对象指定字段的值</span><br><span class="line">HMSET key field value [field value ...] 同时设置对象中一个或多个字段的值</span><br><span class="line">HSETNX key field value                  只在对象不存在指定的字段时才设置字段的值</span><br><span class="line">HSTRLEN key field                       返回对象指定field的value的字符串长度，如果该对象或者field不存在，返回0</span><br><span class="line">HSCAN key cursor [MATCH pattern] [COUNT count] </span><br><span class="line">                                        类似SCAN命令</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Set集合相关命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SADD key member [member ...]            添加一个或者多个元素到集合(set)里</span><br><span class="line">SCARD key                               获取集合里面的元素数量</span><br><span class="line">SDIFF key [key ...]                     获得队列不存在的元素</span><br><span class="line">SDIFFSTORE destination key [key ...]    获得队列不存在的元素，并存储在一个关键的结果集</span><br><span class="line">SINTER key [key ...]                    获得两个集合的交集</span><br><span class="line">SINTERSTORE destination key [key ...]   获得两个集合的交集，并存储在一个集合中</span><br><span class="line">SISMEMBER key member                    确定一个给定的值是一个集合的成员</span><br><span class="line">SMEMBERS key                            获取集合里面的所有key</span><br><span class="line">SMOVE source destination member         移动集合里面的一个key到另一个集合</span><br><span class="line">SPOP key [count]                        获取并删除一个集合里面的元素</span><br><span class="line">SRANDMEMBER key [count]                 从集合里面随机获取一个元素</span><br><span class="line">SREM key member [member ...]            从集合里删除一个或多个元素，不存在的元素会被忽略</span><br><span class="line">SUNION key [key ...]                    添加多个set元素</span><br><span class="line">SUNIONSTORE destination key [key ...]   合并set元素，并将结果存入新的set里面</span><br><span class="line">SSCAN key cursor [MATCH pattern] [COUNT count] </span><br><span class="line">                                        迭代set里面的元素</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Sorted Set有序集合相关操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZADD key score1 member1 [score2 member2]添加一个或多个成员到有序集合，或者如果它已经存在更新其分数</span><br><span class="line">ZCARD key                               得到的有序集合成员的数量</span><br><span class="line">ZCOUNT key min max                      计算一个有序集合成员与给定值范围内的分数</span><br><span class="line">ZINCRBY key increment member            在有序集合增加成员的分数</span><br><span class="line">ZINTERSTORE destination numkeys key [key ...] </span><br><span class="line">                                        多重交叉排序集合，并存储生成一个新的键有序集合</span><br><span class="line"></span><br><span class="line">ZLEXCOUNT key min max                   计算一个给定的字典范围之间的有序集合成员的数量</span><br><span class="line">ZRANGE key start stop [WITHSCORES]      由索引返回一个成员范围的有序集合（从低到高）</span><br><span class="line">ZRANGEBYLEX key min max [LIMIT offset count]</span><br><span class="line">                                        返回一个成员范围的有序集合（由字典范围）</span><br><span class="line"></span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] </span><br><span class="line">                                        返回有序集key中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员，有序集成员按 score 值递增(从小到大)次序排列</span><br><span class="line"></span><br><span class="line">ZRANK key member                        确定成员的索引中有序集合</span><br><span class="line">ZREM key member [member ...]            从有序集合中删除一个或多个成员，不存在的成员将被忽略</span><br><span class="line">ZREMRANGEBYLEX key min max              删除所有成员在给定的字典范围之间的有序集合</span><br><span class="line">ZREMRANGEBYRANK key start stop          在给定的索引之内删除所有成员的有序集合</span><br><span class="line">ZREMRANGEBYSCORE key min max            在给定的分数之内删除所有成员的有序集合</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]   返回一个成员范围的有序集合，通过索引，以分数排序，从高分到低分</span><br><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES] </span><br><span class="line">                                        返回一个成员范围的有序集合，以socre排序从高到低</span><br><span class="line"></span><br><span class="line">ZREVRANK key member                     确定一个有序集合成员的索引，以分数排序，从高分到低分</span><br><span class="line">ZSCORE key member                       获取给定成员相关联的分数在一个有序集合</span><br><span class="line">ZUNIONSTORE destination numkeys key [key ...] </span><br><span class="line">                                        添加多个集排序，所得排序集合存储在一个新的键</span><br><span class="line"></span><br><span class="line">ZSCAN key cursor [MATCH pattern] [COUNT count] </span><br><span class="line">                                        增量迭代排序元素集和相关的分数</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j</title>
    <url>/2017/09/15/Log4j/</url>
    <content><![CDATA[<p><code>System.out.println</code> 固然方便，但是出现问题的时候，我们发现遇到了一些困难：①不知道调试信息是在哪个类，哪个线程里输出的；②不知道什么时候前后两句输出间隔了多少时间；③无法关闭调试信息，一旦 <code>System.out.println</code> 多了之后，到处都是输出，增加定位自己需要信息的难度…</p>
<p>于是Log4j应运而生，解决了上面所说的各种问题。<a id="more"></a></p>
<ul>
<li><p>一个应用Log4j的小例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLog4j</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基于类的名称来获取日志对象</span></span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(TestLog4j<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 进行默认配置</span></span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line">        <span class="comment">// 设置日志输出级别，低于所设定级别的日志统统不输出</span></span><br><span class="line">        logger.setLevel(Level.DEBUG);</span><br><span class="line">        logger.trace(<span class="string">"跟踪信息"</span>);</span><br><span class="line">        logger.debug(<span class="string">"调试信息"</span>);</span><br><span class="line">        logger.info(<span class="string">"输出信息"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        logger.warn(<span class="string">"警告信息"</span>);</span><br><span class="line">        logger.error(<span class="string">"错误信息"</span>);</span><br><span class="line">        logger.fatal(<span class="string">"致命信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>我们也可以进行一些对Log4j的设定，使用一个叫做log4j.properties的文件配置，然后在代码中读取应用这个配置就好，具体来说就是把前面那段代码的默认配置<code>BasicConfigurator.configure();</code>改变为<code>PropertyConfigurator.configure(&quot;/Users/staticvoid/IdeaProjects/j2se/src/main/java/com/how2java/log4j.properties&quot;);</code>就好。</p>
</li>
<li><p>解释一下配置文件log4j.properties的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置日志输出的等级为debug，低于debug就不会输出了；设置日志输出到两种地方，分别叫做stdout和R</span><br><span class="line">log4j.rootLogger&#x3D;debug, stdout, R</span><br><span class="line"></span><br><span class="line"># 第一个地方stdout, 即输出到控制台</span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line"></span><br><span class="line"># 输出格式是 %5p [%t] (%F:%L) - %m%n</span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%5p [%t] (%F:%L) - %m%n</span><br><span class="line"></span><br><span class="line"># 第二个地方R，以滚动的方式输出到文件，文件名是example.log，文件最大100k，最多滚动5个文件</span><br><span class="line">log4j.appender.R&#x3D;org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.R.File&#x3D;example.log</span><br><span class="line">log4j.appender.R.MaxFileSize&#x3D;100KB</span><br><span class="line">log4j.appender.R.MaxBackupIndex&#x3D;5</span><br><span class="line"></span><br><span class="line"># 输出格式是 %p %t %c - %m%n</span><br><span class="line">log4j.appender.R.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.R.layout.ConversionPattern&#x3D;%p %t %c - %m%n</span><br></pre></td></tr></table></figure></li>
<li><p>log4j.properties文件中输出格式的解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%c 输出日志信息所属的类的全名</span><br><span class="line">%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyyy-MM-dd HH:mm:ss&#125;，输出类似：2002-10-18 22:10:28</span><br><span class="line">%f 输出日志信息所属的类的类名</span><br><span class="line">%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行</span><br><span class="line">%m 输出代码中指定的信息，如log(message)中的message</span><br><span class="line">%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”</span><br><span class="line">%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推</span><br><span class="line">%r 输出自应用启动到输出该日志信息所耗费的毫秒数</span><br><span class="line">%t 输出产生该日志事件的线程名</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们也可以用xml文件来配置Log4j，网上一搜一大堆（本文相关的内容其实也…呃…），总之！这里略过不表啦嘿。****</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>有意义的命名</title>
    <url>/2017/09/14/%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<ul>
<li>命名要有意义，要名副其实。</li>
<li>命名要避免误导，譬如别用<code>accountList</code>来指称一组账号，除非它是真正的List类型，<code>accountGroup</code>甚至<code>accouts</code>都会更明确一些。更不能用小写<code>l</code>和大写<code>O</code>来做变量名，因为跟1、0很像，难以分清。</li>
<li>做有意义的区分，譬如<code>a</code>、<code>the</code>前缀不能乱用，让人很难快速看出它的意义。</li>
<li>使用能够读出来的名称，别用<code>cyrds</code>这样的读不出来的东西。</li>
<li>使用可搜索的名称，便于调试时查找。<a id="more"></a></li>
<li>避免使用编码：①不要给命名加上<code>String</code>、<code>Str</code>等前后缀，编译器自己就会区分；②不必使用<code>m</code>前缀来表明成员变量，有经验的程序员阅读时会自动忽略<code>m</code>，对菜鸟程序员<code>m</code>前缀更是一种干扰，阅读时还得特意去剥离这个前缀，除了增加阅读负担，意义不大；③不必给接口加一个<code>I</code>前缀来证明它是一个接口，意义不大，丑陋至极。</li>
<li>避免思维映射，<strong>明确是王道</strong>，专业程序员要编写其他程序员能理解的代码。能用程序员术语尽量用程序员术语，便于其他程序员维护，如果没有对应的程序员专业的术语，可以考虑一下软件本身领域（譬如医疗、建筑）的术语，至少其他程序员看不懂你写的含义时还可以问问那个领域的专家，不至于两眼一抹黑。</li>
<li>类名和对象名应当是名词或者名词短语，而不应当是动词。</li>
<li>方法名应当是动词或者动词短语，属性访问器、修改器和断言应该根据其值命名，并依JavaBean标准加上get、set和is前缀。</li>
<li>重载构造器使用描述参数的静态工厂方法名，例如<code>Complex fulcrumPoint = Complex.FromRealNumber(23.0);</code>通常好于<code>Complex fulcrumPoint = new Complex(23.0);</code>。</li>
<li>别扮可爱，别太耍宝，要言到意到，譬如别把<code>women</code>命名为<code>girlsOrGirlsMothers</code>，程序本身就不好理解，谁愿意去加班理解你那古怪的脑回路呢。</li>
<li>每个概念对应一个词，并且要一以贯之，譬如要么就选<code>controller</code>，要么就选<code>manager</code>，别变来变去，让人误以为是不同的概念。</li>
<li>别用双关语，譬如<code>add</code>明明是两个量相加的意思，那么将一个值插入某个集合中时，就不要用<code>add</code>，应该用<code>append</code>、<code>insert</code>之类的名字才对。</li>
<li>添加有意义的语境：很少有名称可以自我说明的，所以你需要有良好命名的类、函数或名称空间来放置名称，提供语境。如果没这样做，至少可以给同一个信息的变量们添加一个同样的前缀。</li>
<li>不要添加没有意义的语境，只要短名称足够清楚，就不要给名称加不必要的语境——对于<code>Address</code>类的实体来说，<code>accountAddress</code>和<code>customerAddress</code>都还不错，但是它们来做类名就会显得冗余。<code>Address</code>固然是一个好类名，但是跟<code>MAC</code>、<code>URI</code>一起使用的时候，最好使用<code>PostalAddress</code>，这才叫做<strong>有用的语境</strong>，这样的名称更加精确，精确就是命名的要点。</li>
</ul>
]]></content>
      <tags>
        <tag>Clean Code</tag>
      </tags>
  </entry>
  <entry>
    <title>创建和销毁对象</title>
    <url>/2017/09/14/%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>第一条：考虑用静态工厂方法代替构造器<br><a href="http://www.cnblogs.com/chenpi/p/5981084.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenpi/p/5981084.html</a></p>
<p>第二条：遇到多个构造器参数时要考虑用构建器<br><a href="http://blog.csdn.net/plain_maple/article/details/54695779" target="_blank" rel="noopener">http://blog.csdn.net/plain_maple/article/details/54695779</a></p>
<p>第三条：用私有构造器或者枚举类型强化Singleton属性<br><a href="http://blog.csdn.net/plain_maple/article/details/54710270" target="_blank" rel="noopener">http://blog.csdn.net/plain_maple/article/details/54710270</a><a id="more"></a></p>
<p>第四条：通过私有构造器强化不可实例化的能力<br><a href="http://www.jianshu.com/p/8cd8b4a5bf66" target="_blank" rel="noopener">http://www.jianshu.com/p/8cd8b4a5bf66</a></p>
<p>第五条：避免创建不必要的对象<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/item5.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/item5.html</a>  </p>
<p>第六条：消除过期的对象引用<br><a href="http://www.jianshu.com/p/65d413287090" target="_blank" rel="noopener">http://www.jianshu.com/p/65d413287090</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-jtp11225/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-jtp11225/</a></p>
<p>第七条：避免使用终结方法<br><a href="https://zhengyq.gitbooks.io/effective-java-2/content/di-7-tiao-ff1a.html" target="_blank" rel="noopener">https://zhengyq.gitbooks.io/effective-java-2/content/di-7-tiao-ff1a.html</a><br><a href="http://coolview.github.io/2016/11/06/Effective-Java-读书笔记07-避免使用终结方法/" target="_blank" rel="noopener">http://coolview.github.io/2016/11/06/Effective-Java-读书笔记07-避免使用终结方法/</a></p>
]]></content>
      <tags>
        <tag>Effective Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL必知必会（三）</title>
    <url>/2017/09/13/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h1><ul>
<li><p>建表语法实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># NULL 为默认设置，如果不指定 NOT NULL，则为 NULL</span><br><span class="line"># 每个表只允许一个 AUTO_INCREMENT 列，而且它必须被索引（如使它成为主键）</span><br><span class="line"># AUTO_INCREMENT 可以被覆盖，只要在 INSERT 语句中指定一个值(新值)</span><br><span class="line"># 该值将被用来替代自动生成的值，后续的增量将开始使用该手工插入的值</span><br><span class="line">CREATE TABLE customers IF NOT EXISTS (</span><br><span class="line">  cust_id      int       NOT NULL	AUTO_INCREMENT,</span><br><span class="line">  cust_name    char(50)  NOT NULL,</span><br><span class="line">  cust_address char(50)  NULL,</span><br><span class="line">  cust_city    char(50)  NULL,</span><br><span class="line">  cust_state   char(5)   NULL,</span><br><span class="line">  cust_zip     char(10)  NULL,</span><br><span class="line">  cust_country char(50)  NULL,</span><br><span class="line">  cust_contact char(50)  NULL,</span><br><span class="line">  cust_email   char(255) NULL,</span><br><span class="line">  PRIMARY KEY (cust_id)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br><span class="line"></span><br><span class="line"># 主键需要唯一，当然其实我们可以创建多个列组成的主键</span><br><span class="line"># 主键中只能使用不允许 NULL 值的列，允许 NULL 值的列不能作为唯一标识</span><br><span class="line">CREATE TABLE orderitems (</span><br><span class="line">  order_num  int          NOT NULL ,</span><br><span class="line">  order_item int          NOT NULL ,</span><br><span class="line">  prod_id    char(10)     NOT NULL ,</span><br><span class="line">  quantity   int          NOT NULL ,</span><br><span class="line">  item_price decimal(8,2) NOT NULL ,</span><br><span class="line">  PRIMARY KEY (order_num, order_item)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在使用 AUTO_INCREMENT 列时可以通过<code>last_insert_id()</code> 函数获得这个值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT last_insert_id();</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定默认值——如果在插入行时没有给出值，MySQL允许使用此字段的默认值，默认值用 CREATE TABLE 语句的列定义中的 DEFAULT 关键字指定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 与大多数 DBMS 不一样，MySQL 不允许使用函数作为默认值，它只支持常量</span><br><span class="line"># 许多数据库开发人员使用默认值而不是 NULL 列,这是更好的习惯</span><br><span class="line">CREATE TABLE orderitems</span><br><span class="line">(</span><br><span class="line">  order_num  int          NOT NULL,</span><br><span class="line">  order_item int          NOT NULL,</span><br><span class="line">  prod_id    char(10)     NOT NULL,</span><br><span class="line">  quantity   int          NOT NULL	DEFAULT 1,</span><br><span class="line">  item_price decimal(8,2) NOT NULL,</span><br><span class="line">  PRIMARY KEY (order_num, order_item)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引擎类型：</p>
<ul>
<li>InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索；</li>
<li>MEMORY 在功能等同于 MyISAM ，但由于数据存储在内存（不是磁盘）中，速度很快（特别适合于临时表）；</li>
<li>MyISAM 是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</li>
</ul>
</li>
<li><p>混用引擎的大缺陷：外键（用于强制实施引用完整性，如第1章所述）不能跨引擎——使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p>
</li>
<li><p>更新表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加列</span><br><span class="line">ALTER TABLE vendors</span><br><span class="line">ADD vend_phone CHAR(20);</span><br><span class="line"></span><br><span class="line"># 删除列</span><br><span class="line">ALTER TABLE vendors</span><br><span class="line">DROP COLUMN vend_phone;</span><br><span class="line"></span><br><span class="line"># 定义外键（fk_orderitems_orders 是外键名）</span><br><span class="line">ALTER TABLE orderitems</span><br><span class="line">ADD CONSTRAINT fk_orderitems_orders</span><br><span class="line">FOREIGN KEY (order_num) REFERENCES orders (order_num);</span><br><span class="line"></span><br><span class="line"># 删除外键</span><br><span class="line">ALTER TABLE orderitems</span><br><span class="line">DROP FOREIGN KEY fk_orderitems_orders;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂的表结构更改一般需要手动删除过程，涉及以下步骤：</p>
<ul>
<li>用新的列布局创建一个新表；</li>
<li>使用INSERT SELECT 语句从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；</li>
<li>检验包含所需数据的新表；</li>
<li>重命名旧表（如果确定，可以删除它）；</li>
<li>用旧表原来的名字重命名新表；</li>
<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>
</ul>
</li>
<li><p>删除表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE customers2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重命名表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RENAME TABLE backup_customers TO customers,</span><br><span class="line">             backup_vendors TO vendors,</span><br><span class="line">             backup_products TO products;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h1><ul>
<li><p>我所理解的视图有点像是自动化脚本的名字。</p>
</li>
<li><p>为什么使用视图：</p>
<ul>
<li>重用 SQL 语句；</li>
<li>简化操作，隐藏细节；</li>
<li>使用表的组成部分而不是表，这样更简单、安全。</li>
<li>更改数据格式、形式，使之与需要的返回类型匹配。</li>
</ul>
</li>
<li><p>视图的规则和限制：</p>
<ul>
<li>和创建表一样，创建视图也需要唯一命名，且创建的数目没有限制；</li>
<li>创建视图也需要足够的访问权限；</li>
<li>视图可以嵌套（当然因为视图都是快捷方式，所以需要一点一点执行，多重嵌套可能会影响速度）；</li>
<li>视图不能索引，也不能有关联的触发器和默认值；</li>
<li>视图可以和表一起使用。</li>
</ul>
</li>
<li><p>使用视图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建视图</span><br><span class="line"># CREATE OR REPLACE VIEW 也可以</span><br><span class="line">CREATE VIEW productcustomers AS</span><br><span class="line">SELECT cust_name, cust_contact, prod_id</span><br><span class="line">FROM customers, orders, orderitems</span><br><span class="line">WHERE customers.cust_id &#x3D; orders.cust_id</span><br><span class="line">  AND orderitems.order_num &#x3D; orders.order_num;</span><br><span class="line">  </span><br><span class="line"># 删除视图</span><br><span class="line">DROP VIEW viewname;</span><br><span class="line"></span><br><span class="line"># 显示创建视图语句</span><br><span class="line">SHOW CREATE VIEW viewname;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新视图——视图本身是没有数据的，所以如果你想要更新视图，实际上就是对源数据的更新。因此不是所有的视图都可以更新（插入、删除），这些不能更新的视图有以下几类：</p>
<ul>
<li>分组（使用 GROUP BY 和 HAVING）；</li>
<li>联结；</li>
<li>子查询；</li>
<li>并；</li>
<li>聚集函数（<code>Min()</code>、<code>Count()</code>、<code>Sum()</code> 等）;</li>
<li>DISTINCT;</li>
<li>导出（计算）列。</li>
</ul>
</li>
<li><p>一般来说，我们应该将视图应用于检索，而不是更新。</p>
</li>
</ul>
<h1 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h1><ul>
<li><p>我所理解的存储过程也有点像是自动化脚本的名字，当然它和视图是两个完全不一样的东西，希望你明白我的意思。存储过程简单来说，就是为以后的使用而保存的一条或多条 MySQL 语句的集合。</p>
</li>
<li><p>使用存储过程的理由：简单统一、安全高效。</p>
</li>
<li><p>一个简单的存储过程实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建</span><br><span class="line">CREATE PROCEDURE productpricing()</span><br><span class="line">BEGIN</span><br><span class="line">   SELECT Avg(prod_price) AS priceaverage</span><br><span class="line">   FROM products;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL productpricing();</span><br><span class="line"></span><br><span class="line"># 在命令行中创建，DELIMITER 告诉命令行实用程序——代码所使用的语句分隔符</span><br><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line">  CREATE PROCEDURE productpricing()</span><br><span class="line">  BEGIN</span><br><span class="line">     SELECT Avg(prod_price) AS priceaverage</span><br><span class="line">     FROM products;</span><br><span class="line">  END &#x2F;&#x2F;</span><br><span class="line">  DELIMITER ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除存储过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注意没有使用后面的() ，只给出存储过程名。</span><br><span class="line">DROP PROCEDURE productpricing;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># COMMENT 不是必需的，但如果给出，将在 SHOW PROCEDURE STATUS 的结果中显示</span><br><span class="line">CREATE PROCEDURE ordertotal(</span><br><span class="line">   IN onumber INT,</span><br><span class="line">   IN taxable BOOLEAN,</span><br><span class="line">   OUT ototal DECIMAL(8,2)</span><br><span class="line">) COMMENT &#39;Obtain order total, optionally adding tax&#39;</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">   DECLARE total DECIMAL(8,2);</span><br><span class="line">   </span><br><span class="line">   # 定义百分比 taxrate 变量和其默认值 6%</span><br><span class="line">   DECLARE taxrate INT DEFAULT 6;</span><br><span class="line">   </span><br><span class="line">   # 计算合计</span><br><span class="line">   SELECT Sum(item_price*quantity)</span><br><span class="line">   FROM orderitems</span><br><span class="line">   WHERE order_num &#x3D; onumber</span><br><span class="line">   INTO total;</span><br><span class="line"></span><br><span class="line">   IF taxable THEN</span><br><span class="line">      SELECT total+(total&#x2F;100*taxrate) INTO total;</span><br><span class="line">   END IF;</span><br><span class="line">   SELECT total INTO ototal;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">CALL ordertotal(20005, 0, @total);</span><br><span class="line">SELECT @total;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查存储过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE ordertotal;</span><br><span class="line"></span><br><span class="line"># 为了获得包括何时、由谁创建等详细信息的存储过程列表，可使用</span><br><span class="line">SHOW PROCEDURE STATUS；</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h1><ul>
<li><p>使用游标的步骤：</p>
<ul>
<li>在能够使用游标前，必须声明（定义）它。这个过程实际上没有检索数据，它只是定义要使用的 SELECT 语句；</li>
<li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的 SELECT 语句把数据实际检索出来；</li>
<li>对于填有数据的游标，根据需要取出（检索）各行；</li>
<li>在结束游标使用时，必须关闭游标；</li>
<li>在声明游标后，可根据需要频繁地打开和关闭游标。在游标打开后，可根据需要频繁地执行取操作。</li>
</ul>
</li>
<li><p>创建游标：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE processorders()</span><br><span class="line">BEGIN</span><br><span class="line">   # 用 DECLARE 语句定义的局部变量必须在定义任意游标或句柄之前定义</span><br><span class="line">   # 而句柄必须在游标之后定义</span><br><span class="line">   DECLARE done BOOLEAN DEFAULT 0;</span><br><span class="line">   DECLARE o INT;</span><br><span class="line">   DECLARE t DECIMAL(8,2);</span><br><span class="line">   </span><br><span class="line">   DECLARE ordernumbers CURSOR</span><br><span class="line">   FOR</span><br><span class="line">   SELECT order_num FROM orders;</span><br><span class="line">   </span><br><span class="line">   # 02000 是 MySQL 的一个错误代码，MySQL5 使用的错误代码列表，请参阅</span><br><span class="line">   # http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;mysql&#x2F;en&#x2F;error-handling.html</span><br><span class="line">   DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done&#x3D;1;</span><br><span class="line">   </span><br><span class="line">   CREATE TABLE IF NOT EXISTS ordertotals (</span><br><span class="line">       order_num INT,</span><br><span class="line">       total DECIMAL(8,2)</span><br><span class="line">   );</span><br><span class="line">      </span><br><span class="line">   OPEN ordernumbers;</span><br><span class="line">   REPEAT</span><br><span class="line">      FETCH ordernumbers INTO o;</span><br><span class="line">      CALL ordertotal(o, 1, t);</span><br><span class="line">      INSERT INTO ordertotals(order_num, total)</span><br><span class="line">      VALUES(o, t);</span><br><span class="line">   UNTIL done END REPEAT;</span><br><span class="line">   CLOSE ordernumbers;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h1><ul>
<li><p>MySQL 语句在需要时被执行，存储过程也是如此。但是，如果你想要某条语句（或某些语句）在事件发生时自动执行，就需要用到触发器。</p>
</li>
<li><p>触发器是 MySQL 响应 DELETE、INSERT、UPDATE 语句而自动执行的一条 MySQL 语句。</p>
</li>
<li><p>创建触发器所需的 4 个信息：</p>
<ul>
<li>唯一的触发器名；</li>
<li>触发器关联的表；</li>
<li>触发器应该响应的活动（DELETE、INSERT 或 UPDATE）；</li>
<li>触发器何时执行（处理之前或之后）。</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>只有表才支持触发器，视图不支持（临时表也不支持）；</li>
<li>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器。因此，每个表最多支持6个触发器（每条 INSERT、UPDATE 和 DELETE 的之前和之后）。</li>
<li>如果 BEFORE 触发器失败，则 MySQL 将不执行请求的操作。此外，如果 BEFORE 触发器或语句本身失败，MySQL 将不执行 AFTER 触发器（如果有的话）。</li>
<li>遗憾的是，MySQL 触发器中不支持 CALL 语句。这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器内。</li>
</ul>
</li>
<li><p>删除触发器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TRIGGER newproduct;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 INSERT 触发器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER neworder AFTER INSERT ON orders</span><br><span class="line">FOR EACH ROW SELECT NEW.order_num;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 DELETE 触发器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用OLD 保存将要被删除的行到一个存档表中</span><br><span class="line">CREATE TRIGGER deleteorder BEFORE DELETE ON orders</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">   INSERT INTO archive_orders(order_num, order_date, cust_id)</span><br><span class="line">   VALUES(OLD.order_num, OLD.order_date, OLD.cust_id);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 UPDATE 触发器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors</span><br><span class="line">FOR EACH ROW SET NEW.vend_state &#x3D; Upper(NEW.vend_state);</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h1><ul>
<li><p>MySQL 支持集中基本的数据库引擎，但并非所有的引擎都支持事务处理。MyISAM 和 InnoDB 是两种最常用的引擎，前者不支持明确的事务处理系统，而后者支持。</p>
</li>
<li><p>事务处理可以用来维护操作的完整性，要么完全执行一系列操作，要么完全不执行。</p>
</li>
<li><p>控制事务处理：</p>
<ul>
<li><p>标识事务的开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">START TRANSACTION;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>ROLLBACK（只能在一个事务处理中内使用）</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ROLLBACK 语句回退 START TRANSACTION 之后的所有语句</span><br><span class="line"># 当 ROLLBACK 执行后，事务自动关闭(将来的更改会隐含提交)</span><br><span class="line">SELECT * FROM ordertotals;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM ordertotals;</span><br><span class="line">SELECT * FROM ordertotals;</span><br><span class="line">ROLLBACK;</span><br><span class="line">SELECT * FROM ordertotals;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>COMMIT</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一般的MySQL语句都是直接针对数据库表执行和编写的，这就是所谓的隐含提交。</span><br><span class="line"># 即提交（写或保存）操作是自动进行的。但是在事务处理块中，提交不会隐含地进行。</span><br><span class="line"># 为明确提交，使用 COMMIT。当其执行后，事务自动关闭(将来的更改会隐含提交)</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM orderitems WHERE order_num &#x3D; 20010;</span><br><span class="line">DELETE FROM orders WHERE order_num &#x3D; 20010;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用保留点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 保留点在事务处理完成（执行一条 ROLLBACK 或 COMMIT）后自动释放</span><br><span class="line">SAVEPOINT delete1;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ROLLBACK TO delete1;</span><br><span class="line"></span><br><span class="line"># 明确释放保留点</span><br><span class="line">RELEASE SAVEPOINT;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改默认的提交行为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET autocommit &#x3D; 0;</span><br></pre></td></tr></table></figure>





</li>
</ul>
</li>
</ul>
<h1 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h1><ul>
<li><p><strong>字符集</strong>为字母和符号的集合。</p>
</li>
<li><p><strong>编码</strong>为某个字符集成员的内部表示。</p>
</li>
<li><p><strong>校对</strong>为规定字符如何比较的指令（影响排序、搜索等操作的结果）。</p>
</li>
<li><p>查看字符集：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示所有可用的字符集以及每个字符集的描述和默认校对</span><br><span class="line">SHOW CHARACTER SET;</span><br><span class="line"></span><br><span class="line"># 查看每个字符集所支持校对的完整列表</span><br><span class="line">SHOW COLLATION;</span><br><span class="line"></span><br><span class="line"># 确定所用的字符集</span><br><span class="line">SHOW VARIABLES LIKE &#39;character%&#39;;</span><br><span class="line"></span><br><span class="line"># 确定所用的校对</span><br><span class="line">SHOW VARIABLES LIKE &#39;collation%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给表指定字符集和校对：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE mytable (</span><br><span class="line">  columnn1  INT,</span><br><span class="line">  columnn2	VARCHAR(10)</span><br><span class="line">) DEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给每个列设置字符集和校对：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE mytable (</span><br><span class="line">  columnn1  INT,</span><br><span class="line">  columnn2  VARCHAR(10),</span><br><span class="line">  columnn3  VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_general_ci</span><br><span class="line">) DEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci;</span><br></pre></td></tr></table></figure>
</li>
<li><p>甚至你可以使用与创建表时不同的校对顺序，来排序特定的 SELECT 语句结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM customers</span><br><span class="line">ORDER BY lastname, firstname COLLATE latin1_general_cs;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<ul>
<li><p>设置校对的关键字 <code>COLLATE</code> 还可以用于 <code>GROUP BY</code>、<code>HAVING</code>、聚集函数和别名等。</p>
</li>
<li><p>如果绝对需要，串可以使用 <code>Cast()</code> 或 <code>Convert()</code> 函数，在字符集之间进行转换。</p>
</li>
</ul>
</li>
</ul>
<h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><ul>
<li><p>访问控制的目的不仅仅是防止用户的恶意企图。数据梦魇更为常见的是无意识错误的结果，如错打MySQL语句，在不合适的数据库中操作或其他一些用户错误。通过保证用户不能执行他们不应该执行的语句，访问控制有助于避免这些情况的发生。</p>
</li>
<li><p>管理用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &quot;mysql&quot;数据库有一个名为&quot;user&quot;的表，它包含所有用户账号</span><br><span class="line"># &quot;user&quot;表有一个名为&quot;user&quot;的列，它存储所有用户的登录名</span><br><span class="line"># 获取所有数据库用户的账号列表：</span><br><span class="line">USE mysql;</span><br><span class="line">SELECT user FROM user;</span><br><span class="line"></span><br><span class="line"># 创建新的用户账号：</span><br><span class="line"># 我们还可以使用 CRANT 命令或者通过直接插入行到&quot;user&quot;表来增加用户,均不推荐</span><br><span class="line">CREATE USER ben IDENTIFIED BY &#39;p@$$w0rd&#39;;</span><br><span class="line"></span><br><span class="line"># 重命名用户：</span><br><span class="line">RENAME USER ben TO chongming;</span><br><span class="line"></span><br><span class="line"># 删除用户账号：</span><br><span class="line">DROP USER chongming;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置访问权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看已经授予的权限：</span><br><span class="line">SHOW GRANTS FOR xijinian;</span><br><span class="line"></span><br><span class="line"># 使用 GRANT 语句：</span><br><span class="line">GRANT SELECT ON crashcource.* TO xijinian;</span><br><span class="line"></span><br><span class="line"># 撤销授权：</span><br><span class="line">REVOKE SELECT ON crashcourse.* TO xijinian;</span><br><span class="line"></span><br><span class="line"># 简化多个授权：</span><br><span class="line">GRANT SELECT,INSERT ON crashcource.* TO xijinian;</span><br></pre></td></tr></table></figure>
</li>
<li><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p>
<ul>
<li>整个服务器——使用 GRANT ALL 和 REVOKE ALL;</li>
<li>整个数据库——使用 ON somedatabase.*;</li>
<li>特定的表——使用 ON somedatabase.sometable;</li>
<li>特定的列——使用 ON somedatabase.sometable.somecolumn；</li>
<li>特定的存储过程。</li>
</ul>
</li>
<li><p>注意：在使用 GRANT 和 REVOKE 时，用户账号必须存在，但对所涉及的对象没有这个要求。这允许管理员在创建数据库和表之前设计和实现安全措施。这样做的副作用是，当某个数据库或表被删除时（用 DROP 语句），相关的访问权限仍然存在。而且，如果将来重新创建该数据库或表，这些权限仍然起作用。</p>
</li>
<li><p>更改用户口令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># SET PASSWORD 更新用户口令。新口令必须传递到 Password() 函数进行加密</span><br><span class="line"># 如果不指定更改口令的用户名，那么就是更改当前用户的口令</span><br><span class="line">SET PASSWORD FOR xijinian &#x3D; Password(&#39;n3w p@$$w0rd&#39;);</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><ul>
<li><p>MySQL 数据库就是基于磁盘的文件，然而因为这些文件总是处于打开的状态，所以普通的文本副本备份不一定总是有效。</p>
</li>
<li><p>解决这个问题的几个方案：</p>
<ul>
<li><p>我们可以使用命令行实用程序 <code>mysqldump</code> 转存数据库内容到某个外部文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 备份表内容到某个文件</span><br><span class="line">mysqldump [options] dbname [tables] &gt; filename</span><br><span class="line">mysqldump -h localhost -u root -pp@$$w0rd xscj xs kc &gt; twotables.sql</span><br><span class="line"></span><br><span class="line"># 还原表结构(同时数据清空)</span><br><span class="line">mysqldump -u root -pp@$$w0rd xscj &lt; D:&#x2F;file&#x2F;xs.sql</span><br><span class="line"></span><br><span class="line"># 备份一个或者多个数据库到某个文件</span><br><span class="line">mysqldump [options] --databases [options] [dbs] &gt; filename</span><br><span class="line">mysqldump -u root -pp@$$w0rd --databases xscj test &gt; D:&#x2F;file&#x2F;data.sql</span><br><span class="line"></span><br><span class="line"># 还原数据库</span><br><span class="line">mysqldump -u root -pp@$$w0rd --databases xscj test &lt; D:&#x2F;file&#x2F;data.sql</span><br><span class="line"></span><br><span class="line"># 备份所有数据库到文件</span><br><span class="line">mysqldump -u root -pp@$$w0rd --all-databases &gt; D:&#x2F;file&#x2F;all.sql</span><br><span class="line"></span><br><span class="line"># 将数据库多文件存放，建表语句存为.sql，数据存为.txt</span><br><span class="line"># --tab 命令不能与 --databases 或者 --all-databases 同时使用</span><br><span class="line"># 且 Mysqldump 必须运行在服务器上</span><br><span class="line">mysqldump -u root -pp@$$w0rd --tab&#x3D;D:&#x2F;file&#x2F; xscj</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用命令行实用程序 <code>mysqlhotcopy</code> 从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）。</p>
</li>
<li><p>可以使用 MySQL 的 <code>BACKUP TABLE</code> 或 <code>SELECT INTO OUTFILE</code> 转存所有数据到某个外部文件。这两条语句都要求这个文件在被这个命令创建前不存在与磁盘，否则会出错。数据可以用 <code>RESTORE TABLE</code> 来复原。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这两条语句不是很理想，已经不推荐使用了</span><br><span class="line">BACKUP TABLE tablename... TO &#39;&#x2F;path&#x2F;to&#x2F;backup&#x2F;directory&#39;</span><br><span class="line">RESTORE TABLE tablename... FROM &#39;&#x2F;path&#x2F;to&#x2F;backup&#x2F;directory&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>为了保证所有数据被写到磁盘（包括索引），可能需要在进行备份之前使用 <code>FLUSH TABLES</code> 语句。</strong></p>
</li>
</ul>
</li>
<li><p>进行数据库维护：</p>
<ul>
<li><p>检查表键是否正确——<code>ANALYZE TABLE orders;</code></p>
</li>
<li><p>检查表是否有错语句（只对使用 MyISAM 和 InnoDB 引擎的表起作用）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHECK TABLE tablename... [option]....</span><br><span class="line"># [option] -&gt; QUICK FAST MEDIUM EXTENDED CHANGED</span><br><span class="line"># QUICK    -&gt; 不扫描行，不检查错误的链接，这是最快的方法</span><br><span class="line"># FAST     -&gt; 只检查表未正常关闭的表</span><br><span class="line"># CHANGED  -&gt; 检查自最后一次检查以来改动过的表，以及未正常关闭的表</span><br><span class="line"># MEDIUM   -&gt; 扫描行，检查所有被删除的链接并进行键检验</span><br><span class="line"># EXTENDED -&gt; 执行最彻底的检查</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果 MyISAM、ARCHIVE 表访问产生不正确或者不一致的结果，可能需要用 <code>REPAIR TABLE</code> 来修复相应的表（当然这条语句理论上不应该也不需要经常使用）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPAIR [LOCAL|NO_WRITE_TO_BINLOG] TABLE tablename... [option]</span><br><span class="line"># [option] -&gt; QUICK EXTENDED USE_FRM</span><br><span class="line"># QUICK    -&gt; 只尝试修复索引树</span><br><span class="line"># EXTENDED -&gt; 一行一行地创建索引行，代替使用分类一次创建一个索引</span><br><span class="line"># USE_FRM  -&gt; 如果 MYI 索引文件缺失或者标题被破坏，必须使用此选项</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算表校验和：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHECKSUM TABLE tablename... [option]</span><br><span class="line"># [option] -&gt; QUICK EXTENDED</span><br><span class="line"># QUICK    -&gt; 如果表使用 MyISAM 引擎，则报告表校验和，否则报告 NULL</span><br><span class="line"># EXTENDED -&gt; anyway，只计算表检验和</span><br></pre></td></tr></table></figure>
</li>
<li><p>优化表结构，整理碎片。此命令只对 MyISAM、BDB 和 InnoDB 表起作用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIMIZE [LOCAL|NO_WRITE_TO_BINLOG] tablename...</span><br><span class="line">eg -&gt; OPTIMIZE table xs;</span><br></pre></td></tr></table></figure>
</li>
<li><p>还有一些关于 Binlog 的知识，已经超出了本书范围，可以参考朱小厮的博客：<a href="https://blog.csdn.net/u013256816/article/details/53020335" target="_blank" rel="noopener">MySQL Binlog 解析</a>、<a href="https://blog.csdn.net/u013256816/article/details/52536283" target="_blank" rel="noopener">MySQL 主备复制原理、实现及异常处理</a>。</p>
</li>
</ul>
</li>
</ul>
<h1 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h1><ul>
<li>首先，MySQL（与所有 DBMS 一样）具有特定的硬件建议。在学习和研究 MySQL 时，使用任何旧的计算机作为服务器都可以。但对用于生产的服务器来说，应该坚持遵循这些硬件建议。一般来说，关键的生产DBMS应该运行在自己的专用服务器上。</li>
<li>MySQL 是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等（为查看当前设置，可使用 <code>SHOW VARIABLES;</code> 和 <code>SHOW STATUS;</code> ）。</li>
<li>MySQL 是一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用 <code>SHOW PROCESSLIST;</code> 显示所有活动进程（以及它们的线程 ID 和执行时间）。你还可以用 <code>KILL</code> 命令终结某个特定的进程（使用这个命令需要作为管理员登录）。</li>
<li>总是有不止一种方法编写同一条SELECT 语句。应该试验联结、并、子查询等，找出最佳的方法。</li>
<li>使用 <code>EXPLAIN</code> 语句让 MySQL 解释它将如何执行一条 <code>SELECT</code> 语句。</li>
<li>一般来说，存储过程执行得比一条一条地执行其中的各条 MySQL 语句快。</li>
<li>应该总是使用正确的数据类型。</li>
<li>决不要检索比需求还要多的数据。换言之，不要用 <code>SELECT*</code>（除非你真正需要每个列）。</li>
<li>有的操作（包括 <code>INSERT</code>）支持一个可选的 DELAYED 关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li>
<li>在导入数据时，应该关闭自动提交。你可能还需删除索引（包括 FULLTEXT 索引），然后在导入完成后再重建它们。</li>
<li>必须索引数据库表以改善数据检索的性能。确定索引什么不是一件微不足道的任务，需要分析使用的 <code>SELECT</code> 语句以找出重复的 <code>WHERE</code> 和 <code>ORDER BY</code> 子句。如果一个简单的 <code>WHERE</code> 子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li>
<li>你的 <code>SELECT</code> 语句中有一系列复杂的 OR 条件吗？通过使用多条 <code>SELECT</code> 语句和连接它们的<code>UNION</code> 语句，你能看到极大的性能改进。</li>
<li>索引改善数据检索的性能，但损害数据插入、删除和更新的性能。如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们（索引可根据需要添加和删除）。</li>
<li><code>LIKE</code> 很慢，一般来说，最好是使用 FULLTEXT 索引而不是 <code>LIKE</code>。</li>
<li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li>
<li>最重要的规则就是，每条规则在某些条件下都会被打破。</li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2017/09/13/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<ul>
<li>类对象就是描述这种类有什么属性什么方法的，跟实例对象不是同样的东西。</li>
<li>获取类对象有3种方式：①Class.forName(“Hero”)；②Hero.class；③new Hero().getClass()。</li>
<li><strong><em>注意</em></strong>：一个 Class 对象实际上表示的是一个类型，这个类型不一定是一个类。例如，int 不是类，但是 int.class 是一个 Class 对象。</li>
<li>鉴于历史原因，数组类型使用getName()方法时会得到一个奇怪的返回结果。<br>——在一个JVM中，一种类，只会有一个类对象存在。所以以上三种方式取出来的类对象，都是一样的。<a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String className = <span class="string">"how2j.reflection.Hero"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class pClass1 = Class.forName(className);</span><br><span class="line">            Class pClass2 = Hero<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            Class pClass3 = <span class="keyword">new</span> Hero().getClass();</span><br><span class="line">            System.out.println(pClass1 == pClass2);</span><br><span class="line">            System.out.println(pClass1 == pClass3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure></li>
<li>获取了类对象后，可以直接使用 .newInstance() 方法返回一个这个类的实例，注意：直接调用这个方法只能使用这个类的无参构造方法构建实例，如果这个类没有无参的构造方法会抛出一个异常；如果不想使用默认（或无参）的构造方法就要使用 java.lang.reflect.Constructor 类中的静态方法——<code>Object newInstance(Object[] args)</code>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//使用反射的方式创建对象</span></span><br><span class="line">    String className = <span class="string">"charactor.Hero"</span>;</span><br><span class="line">    <span class="comment">//类对象</span></span><br><span class="line">    Class pClass = Class.forName(className);</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    Constructor c = pClass.getConstructor();</span><br><span class="line">    <span class="comment">//通过构造器实例化</span></span><br><span class="line">    Hero h2 = (Hero) c.newInstance();</span><br><span class="line">    h2.name = <span class="string">"gareen"</span>;</span><br><span class="line">    System.out.println(h2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取类对象的时候，会使得类的属性被初始化。</li>
<li>利用反射分析类的能力：java.lang.reflect 包中有三个类  <code>Field</code>、<code>Method</code>  和 <code>Constructor</code>，这三个类中都有一个叫做 <code>getName()</code> 的方法，用来返回项目的名称。<code>Field</code> 类中有一个 <code>getType()</code> 方法，用来返回描述域所属类型的 Class 对象（然后这个对象再调用 getName() 就获得了类名还不是美滋滋）；<code>Method</code> 类和 <code>Constructor</code> 类中还有能获取参数类型的方法——<code>getParameterTypes()</code>；与直观相一致，<code>Method</code> 类中还有一个获取方法返回值类型的方法——getReturnType()。这三个类还有一个共同的方法就做 getModifiers() 的方法，它将返回一个整型数值，用不同的开关位表示不同的关键字（public、static、final…），我们可以使用 java.lang.reflect 包中的 Modifier 类的静态方法（如toString()、isPublic()、isFinal()对这个整型数值进行分析。</li>
<li>Class 类中的 <code>getFields()、getMethods()、getConstructors()</code> 和 <code>getDeclaredField()、getDeclaredMethods()、getDeclaredConstructors()</code>的区别：短的那组只能获取 public 的域、方法和构造器数组，包括从父类继承来的公有成员；长的那组可以获取本类所有的域、方法个构造器数组，包括 private、protected 的（这里只能获取到 private 的字段，但并不能访问该 private 字段的值）。</li>
<li>我们使用 Field 类中的 get 方法查看数据域的值，如果 f 是一个 Field 类型的对象，obj 是某个包含 f 域的类的对象，那么 <code>f.get(obj)</code> 将返回一个对象，其值为 obj 域的当前值。如果数据域中的值是私有的，那么需要将 <code>f.setAccessible(true)</code>，然后再 <code>f.get(obj)</code>。</li>
<li>通过反射来访问属性并修改它的值：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取类对象</span></span><br><span class="line">        Class classHero = Class.forName(<span class="string">"how2j.reflection.Hero"</span>);</span><br><span class="line">        <span class="comment">// 获取类对象的构造器</span></span><br><span class="line">        Constructor constructorHero = classHero.getConstructor();</span><br><span class="line">        <span class="comment">// 用类对象的构造器生成一个类的实例</span></span><br><span class="line">        Hero hero = (Hero) constructorHero.newInstance();</span><br><span class="line">        <span class="comment">// 获取类Hero的名字叫做name的字段</span></span><br><span class="line">        Field f1 = classHero.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 修改某实例对应这个字段的值</span></span><br><span class="line">        f1.set(hero, <span class="string">"teemo"</span>);</span><br><span class="line">        <span class="comment">// 打印被修改后的值</span></span><br><span class="line">        System.out.println(hero.name);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在对象方法前，加上修饰符synchronized，同步对象是当前实例；在类方法前，加上修饰符synchronized，同步对象是类对象。</li>
<li>通过反射机制，编写泛型数组代码——首先你需要判断是不是数组，然后得到数组的类型，再构造新数组，举个例子：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">goofCopyOf</span><span class="params">(Object a, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    Class c1 = a.getClass();</span><br><span class="line">    <span class="keyword">if</span> (!c1.isArray()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Class componentType = c1.getComponentType();</span><br><span class="line">    <span class="keyword">int</span> length = Array.getLength(a);</span><br><span class="line">    Object newArray = Array.newInstance(componentType, newLength);</span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, newArray, <span class="number">0</span>, Math.min(length, newLength));</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通过反射机制调用任何方法：<ul>
<li>①获取方法的名字：<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Method getMethod(String name, Class... parameterTypes)</span></span><br><span class="line">Method m1 = Exployee.class.getMethod("getName");</span><br><span class="line">Method m2 = Exployee.class.getMethod("raiseSalary", double.class);</span><br></pre></td></tr></table></figure></li>
<li>②使用方法（注意：<code>invoke()</code> 方法的参数和返回值都是 Object 类型的，所以一定要进行多次的类型转换，譬如返回值不可能是基本类型，需要一个包装类替代基本类型；如果反射的是静态方法，它非对象使用，那么第一个隐式参数就可以设置为 null）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public Object invoke(Object implicitParameter, Object... explicitParamenters)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取这个方法的名字叫做setName，参数类型是String的方法</span></span><br><span class="line">            Method m = h.getClass().getMethod(<span class="string">"setName"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 对h对象，调用这个方法</span></span><br><span class="line">            m.invoke(h, <span class="string">"盖伦"</span>);</span><br><span class="line">            <span class="comment">// 使用传统的方式，调用getName方法</span></span><br><span class="line">            System.out.println(h.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2017/09/10/JDBC/</url>
    <content><![CDATA[<p>写到这里，真是感触良多，很久之前开始装模作样编程<br>然后——学C语言停止在链表，学 Java 停止在 JDBC，学安卓停止在 SQL Lite，恍恍惚惚<br>真不算是很好的记忆啊…<a id="more"></a></p>
<ul>
<li><p>Hello JDBC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>);Statement s = c.createStatement();) &#123; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                String sql = <span class="string">"insert into hero values</span></span><br><span class="line"><span class="string">                    (null,"</span> + <span class="string">"'英雄"</span> + i + <span class="string">"'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">                s.execute(sql);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CRUD：详见”MySQL必知必会”系列文章。</p>
</li>
<li><p>使用 ResultSet 设计一个分页查询方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>); Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"select * from hero limit "</span> + start + <span class="string">","</span> + count;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询语句，并把结果集返回给ResultSet</span></span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);<span class="comment">// 可以使用字段名</span></span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);<span class="comment">// 也可以使用字段的顺序</span></span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                System.out.printf(<span class="string">"%d\t%s\t%f\t%d%n"</span>, id, name, hp, damage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        list(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用预编译 Statement ——性能比 Statement 更好的、可以杜绝 SQL 注入的 PreparedStatement：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, </span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>);PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 设置参数</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"提莫"</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">313.0f</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            ps.execute();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>execute 和 executeUpdate：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, </span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>);Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不同1：execute 可以执行查询语句，然后通过 getResultSet 把结果集取出来</span></span><br><span class="line">            <span class="comment">// executeUpdate 不能执行查询语句 s.executeUpdate(sqlSelect);</span></span><br><span class="line">            String sqlSelect = <span class="string">"select * from hero"</span>;</span><br><span class="line"></span><br><span class="line">            s.execute(sqlSelect);</span><br><span class="line">            ResultSet rs = s.getResultSet();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不同2：execute 返回 boolean 类型，true 表示执行的是查询语句</span></span><br><span class="line">            <span class="comment">// false 表示执行的是 insert,delete,update 等等</span></span><br><span class="line">            <span class="comment">// executeUpdate 返回的是int，表示有多少条数据受到了影响</span></span><br><span class="line">            <span class="keyword">boolean</span> isSelect = s.execute(sqlSelect);</span><br><span class="line">            System.out.println(isSelect);</span><br><span class="line"></span><br><span class="line">            String sqlUpdate = <span class="string">"update Hero set hp = 300 where id &lt; 100"</span>;</span><br><span class="line">            <span class="keyword">int</span> number = s.executeUpdate(sqlUpdate);</span><br><span class="line">            System.out.println(number);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>无论是 execute 还是 executeUpdate 都不会返回这个自增长id是多少，若需获取该id需要通过 Statement 的 getGeneratedKeys()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, </span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>);</span><br><span class="line">            PreparedStatement ps = </span><br><span class="line">            c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);) &#123;</span><br><span class="line">            </span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"盖伦"</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">616</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行插入语句</span></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在执行完插入语句后，MySQL会为新插入的数据分配一个自增长 id</span></span><br><span class="line">            <span class="comment">// JDBC通过getGeneratedKeys获取该id</span></span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                System.out.println(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取表的元数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看数据库层面的元数据</span></span><br><span class="line"><span class="comment">// 即数据库服务器版本，驱动版本，都有哪些数据库等等</span></span><br><span class="line">DatabaseMetaData dbmd = c.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据库服务器产品名称</span></span><br><span class="line">System.out.println(<span class="string">"数据库产品名称:\t"</span> + dbmd.getDatabaseProductName());</span><br><span class="line"><span class="comment">// 获取数据库服务器产品版本号</span></span><br><span class="line">System.out.println(<span class="string">"数据库产品版本:\t"</span> + dbmd.getDatabaseProductVersion());</span><br><span class="line"><span class="comment">// 获取数据库服务器用作类别和表名之间的分隔符 如test.user</span></span><br><span class="line">System.out.println(<span class="string">"数据库和表分隔符:\t"</span> + dbmd.getCatalogSeparator());</span><br><span class="line"><span class="comment">// 获取驱动版本</span></span><br><span class="line">System.out.println(<span class="string">"驱动版本:\t"</span> + dbmd.getDriverVersion());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据名称</span></span><br><span class="line">System.out.println(<span class="string">"可用的数据库列表："</span>);</span><br><span class="line">ResultSet rs = dbmd.getCatalogs();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"数据库名称:\t"</span> + rs.getString(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务——一堆任务一次提交，要么全部提交成功，要么什么都不执行，避免遇到任务执行一半被迫暂停造成数据混乱的尴尬：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">        <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, </span><br><span class="line">        <span class="string">"xijinian"</span>, <span class="string">"password"</span>);Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在事务中的多个操作，要么都成功，要么都失败</span></span><br><span class="line">        c.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加血的SQL</span></span><br><span class="line">        String sql1 = <span class="string">"update hero set hp = hp + 1 where id = 22"</span>;</span><br><span class="line">        s.execute(sql1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 减血的SQL</span></span><br><span class="line">        <span class="comment">// 不小心写错写成了 updata(而非update)</span></span><br><span class="line">        String sql2 = <span class="string">"updata hero set hp = hp - 1 where id = 22"</span>;</span><br><span class="line">        s.execute(sql2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动提交</span></span><br><span class="line">        c.commit();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ORM思想——一个对象，对应数据库里的一条记录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, </span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>);Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"select * from hero where id = "</span> + id;</span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 因为 id 是唯一的，ResultSet 最多只能有一条记录</span></span><br><span class="line">            <span class="comment">// 所以使用 if 代替 while</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = get(<span class="number">22</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DAO —— Data Access Object，实际上就是把数据库相关的操作都封装在一个类里面，其他地方看不到JDBC的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Hero类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加id属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> damage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="comment">// DAO接口</span></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现对Hero类的DAO</span></span><br><span class="line"><span class="keyword">package</span> how2j.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroDAO</span> <span class="keyword">implements</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(</span><br><span class="line">            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, </span><br><span class="line">            <span class="string">"xijinian"</span>, <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"select count(*) from hero"</span>;</span><br><span class="line"></span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"total:"</span> + total);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = getConnection(); </span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line"></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"update hero set name= ?, hp = ? , damage = ? where id = ?"</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = getConnection(); </span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line">            ps.setInt(<span class="number">4</span>, hero.id);</span><br><span class="line"></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line">            String sql = <span class="string">"delete from hero where id = "</span> + id;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line">            </span><br><span class="line">            String sql = <span class="string">"select * from hero where id = "</span> + id;</span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="number">0</span>, Short.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">        String sql = <span class="string">"select * from hero order by id desc limit ?,? "</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = getConnection(); </span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line">            </span><br><span class="line">            ps.setInt(<span class="number">1</span>, start);</span><br><span class="line">            ps.setInt(<span class="number">2</span>, count);</span><br><span class="line"></span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                heros.add(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heros;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库连接池——当有多个线程，每个线程都需要连接数据库执行SQL语句的话，那么每个线程都会创建一个连接，并且在使用完毕后，关闭连接。创建连接和关闭连接的过程也是比较消耗时间的，当多线程并发的时候，系统就会变得很卡顿。同时，一个数据库同时支持的连接总数也是有限的，如果多线程并发量很大，那么数据库连接的总数就会被消耗光，后续线程发起的数据库连接就会失败。与传统方式不同，连接池在使用之前，就会创建好一定数量的连接。如果有任何线程需要使用连接，那么就从连接池里面借用，而不是自己重新创建。使用完毕后，又把这个连接归还给连接池供下一次或者其他线程使用。倘若发生多线程并发情况，连接池里的连接被借用光了，那么其他线程就会临时等待，直到有连接被归还回来，再继续使用。整个过程，这些连接都不会被关闭，而是不断的被循环使用，从而节约了启动和关闭连接的时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 构造方法约定了这个连接池一共有多少连接，并在 init() 初始化方法中创建</span></span><br><span class="line"><span class="comment"> * 2. 这里需要保持连接不关闭状态，所以不能使用 try-with-resource</span></span><br><span class="line"><span class="comment"> * 3. getConnection()，判断是否为空，如果是空的就 wait 等待，否则就借用一条连接出去</span></span><br><span class="line"><span class="comment"> * 4. returnConnection()，在使用完毕后，归还这个连接到连接池</span></span><br><span class="line"><span class="comment"> *    并且在归还完毕后，调用notifyAll，通知那些等待的线程，有新的连接可以借用了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Connection&gt; cs = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里不能使用try-with-resource的方式</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                Connection c = DriverManager.getConnection(</span><br><span class="line">                    <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                    <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">                cs.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (cs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Connection c = cs.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnConnection</span><span class="params">(Connection c)</span> </span>&#123;</span><br><span class="line">        cs.add(c);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConnectionPool cp = <span class="keyword">new</span> ConnectionPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> WorkingThread(<span class="string">"working thread"</span> + i, cp).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkingThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConnectionPool cp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkingThread</span><span class="params">(String name, ConnectionPool cp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.cp = cp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection c = cp.getConnection();</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">":\t 获取了一根连接，并开始工作"</span>);</span><br><span class="line">        <span class="keyword">try</span> (Statement st = c.createStatement()) &#123;</span><br><span class="line">            <span class="comment">// 模拟时耗１秒的数据库SQL语句</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            st.execute(<span class="string">"select * from hero"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        cp.returnConnection(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL必知必会（二）</title>
    <url>/2017/09/03/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h1><ul>
<li>常用的文本处理函数：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjb9rme77kj30cu05st8s.jpg" alt=""></li>
<li>Upper函数举例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_name, UPPER(vend_name) AS vend_name_upcase</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>Soundex函数举例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_name, cust_contact</span><br><span class="line">FROM customers</span><br><span class="line">WHERE Soundex(cust_contact) &#x3D; Soundex(&#39;Y Lie&#39;);</span><br></pre></td></tr></table></figure></li>
<li>常用的日期和时间处理函数：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjbarn75kkj30cw0a3gm1.jpg" alt=""></li>
<li>无论你什么时候指定一个日期，不管是插入更新还是用<strong>WHERE</strong>语句进行过滤，日期的格式必须为<strong>yyyy-mm-dd</strong>，如2017-09-03。</li>
<li>转化为可靠的日期函数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_id, order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE order_date &#x3D; &#39;2005-09-01&#39;;</span><br><span class="line"></span><br><span class="line"># 转换为→</span><br><span class="line"></span><br><span class="line">SELECT cust_id, order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Date(order_date) &#x3D; &#39;2005-09-01&#39;;</span><br></pre></td></tr></table></figure></li>
<li>日期区间匹配：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_id, order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Date(order_date) BETWEEN &#39;2005-09-01&#39; AND &#39;2005-09-30&#39;;</span><br><span class="line"></span><br><span class="line">SELECT cust_id, order_num</span><br><span class="line">FROM orders</span><br><span class="line">WHERE Year(order_date) &#x3D; 2005 AND Month(order_date) &#x3D; 9;</span><br></pre></td></tr></table></figure></li>
<li>常用的数值处理函数：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjbb58w24oj30cu05pt8r.jpg" alt=""></li>
</ul>
<h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><ul>
<li>SQL聚集函数：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjccwt9vfcj30cu03vjrb.jpg" alt=""></li>
<li>AVG函数举例：<code>SELECT AVG(prod_price) AS avg_price FROM products;</code></li>
<li>COUNT函数说明：使用COUNT(*)对表中行的数进行计数，不管表列中包含的是空值(NULL)还是非空值；使用COUNT(column)对指定列中具有值的行进行计数，忽略NULL值。</li>
<li>SUM函数举例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT SUM(item_price*quantity) AS total_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num &#x3D; 20005;</span><br></pre></td></tr></table></figure></li>
<li>组合聚集函数（在指定别名以包含某个聚合函数的结果时，不应该使用表中实际的列名，虽然这样做并非不合法，但使用唯一的名字会使你的SQL更易于理解和使用）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) AS num_items,</span><br><span class="line">       MIN(prod_price) AS price_min,</span><br><span class="line">       MAX(prod_price) AS price_max,</span><br><span class="line">       AVG(prod_price) AS price_avg</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h1><ul>
<li>一些例子：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) AS num_prods</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id &#x3D; 1003;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">SELECT vend_id, COUNT(*) AS num_prods</span><br><span class="line">FROM products</span><br><span class="line">GROUP BY vend_id;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">SELECT vend_id, COUNT(*) AS num_prods</span><br><span class="line">FROM products</span><br><span class="line">GROUP BY vend_id WITH ROLLUP;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">SELECT cust_id, COUNT(*) AS orders</span><br><span class="line">FROM orders</span><br><span class="line">GROUP BY cust_id</span><br><span class="line">HAVING COUNT(*) &gt;&#x3D; 2;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">SELECT vend_id, COUNT(*) AS num_prods</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &gt;&#x3D; 10</span><br><span class="line">GROUP BY vend_id</span><br><span class="line">HAVING COUNT(*) &gt;&#x3D; 2;</span><br></pre></td></tr></table></figure></li>
<li><code>ORDER BY</code>与<code>GROUP BY</code>：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjdqaablexj30ct02o0sr.jpg" alt=""></li>
<li>不要忘记<code>ORDER BY</code>一般在使用<code>GROUP BY</code>子句时，应该也给出<code>ORDER BY</code>子句。这是保证数据正确排序的唯一方法。千万不要仅依赖<code>GROUP BY</code>排序数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT order_num, SUM(quantity*item_price) AS ordertotal</span><br><span class="line">FROM orderitems</span><br><span class="line">GROUP BY order_num</span><br><span class="line">HAVING SUM(quantity*item_price) &gt;&#x3D; 50</span><br><span class="line">ORDER BY ordertotal;</span><br></pre></td></tr></table></figure></li>
<li>SELECT子句顺序：<code>SELECT</code>→<code>FROM</code>→<code>WHERE</code>→<code>GROUP BY</code>→<code>HAVING</code>→<code>ORDER BY</code>→<code>LIMIT</code>。</li>
</ul>
<h1 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h1><ul>
<li>利用子查询进行过滤：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_name, cust_contact</span><br><span class="line">FROM customers</span><br><span class="line">WHERE cust_id IN (SELECT cust_id</span><br><span class="line">                  FROM orders</span><br><span class="line">                  WHERE order_num IN (SELECT order_num</span><br><span class="line">                                      FROM orderitems</span><br><span class="line">                                      WHERE prod_id &#x3D; &#39;TNT2&#39;));</span><br></pre></td></tr></table></figure></li>
<li>作为计算字段使用子查询：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_name, cust_state, (SELECT COUNT(*) FROM orders</span><br><span class="line">                               WHERE orders.cust_id &#x3D; customers.cust_id) AS orders</span><br><span class="line">FROM customers</span><br><span class="line">ORDER BY cust_name;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><ul>
<li>创建简单联结（内部联结，又称等值联结）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_name, prod_name, prod_price</span><br><span class="line">FROM vendors, products</span><br><span class="line">WHERE vendors.vend_id &#x3D; products.vend_id</span><br><span class="line">ORDER BY vend_name, prod_name;</span><br><span class="line"># 没有联结条件的表关系返回的结果为笛卡儿积，其行数将是第一个表中的行数乘以第二个表中的行数</span><br><span class="line"># 所以应该保证所有联结都有WHERE 子句，否则MySQL将返回比想要的数据多得多的数据</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"># 下面是另一种写法，更符合ANSI SQL规范</span><br><span class="line">SELECT vend_name, prod_name, prod_price</span><br><span class="line">FROM vendors INNER JOIN products</span><br><span class="line">ON vendors.vend_id &#x3D; products.vend_id</span><br><span class="line">ORDER BY vend_name, prod_name;</span><br></pre></td></tr></table></figure></li>
<li>联结多个表：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name, vend_name, prod_price, quantity</span><br><span class="line">FROM orderitems, products, vendors</span><br><span class="line">WHERE products.vend_id &#x3D; vendors.vend_id</span><br><span class="line">  AND orderitems.prod_id &#x3D; products.prod_id</span><br><span class="line">  AND order_num &#x3D; 20005;-</span><br></pre></td></tr></table></figure></li>
<li>将子查询改成联结的方式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cust_name, cust_contact</span><br><span class="line">FROM customers</span><br><span class="line">WHERE cust_id IN (SELECT cust_id</span><br><span class="line">                  FROM orders</span><br><span class="line">                  WHERE order_num IN (SELECT order_num</span><br><span class="line">                                      FROM orderitems</span><br><span class="line">                                      WHERE prod_id &#x3D; &#39;TNT2&#39;));</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line">SELECT cust_name, cust_contact</span><br><span class="line">FROM customers, orders, orderitems</span><br><span class="line">WHERE customers.cust_id &#x3D; orders.cust_id</span><br><span class="line">  AND orderitems.order_num &#x3D; orders.order_num</span><br><span class="line">  AND prod_id &#x3D; &#39;TNT2&#39;;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h1><ul>
<li>自联结：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT p1.prod_id, p1.prod_name</span><br><span class="line">FROM products AS p1, products AS p2</span><br><span class="line">WHERE p1.vend_id &#x3D; p2.vend_id</span><br><span class="line">  AND p2.prod_id &#x3D; &#39;DTNTR&#39;;</span><br></pre></td></tr></table></figure></li>
<li>自然联结（标准联结返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次，这一般是通过对一个表使用通配符<code>SELECT *</code>，对所有其他表的列使用明确的子集来完成的）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT c.*, o.order_num, o.order_date,</span><br><span class="line">       oi.prod_id, oi.quantity, OI.item_price</span><br><span class="line">FROM customers AS c, orders AS o, orderitems AS oi</span><br><span class="line">WHERE c.cust_id &#x3D; o.cust_id</span><br><span class="line">  AND oi.order_num &#x3D; o.order_num</span><br><span class="line">  AND prod_id &#x3D; &#39;FB&#39;;</span><br></pre></td></tr></table></figure></li>
<li>外部联结：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。</span><br><span class="line"># 在使用 OUTER JOIN 语法时，必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表</span><br><span class="line">#（RIGHT 指出的是 OUTER JOIN 右边的表，而LEFT 指出的是OUTER JOIN 左边的表）</span><br><span class="line"># 它们之间的唯一差别是所关联的表的顺序不同</span><br><span class="line"></span><br><span class="line">SELECT customers.cust_id, orders.order_num</span><br><span class="line">FROM customers LEFT OUTER JOIN orders</span><br><span class="line"> ON customers.cust_id &#x3D; orders.cust_id;</span><br></pre></td></tr></table></figure></li>
<li>使用带有聚集函数的联结：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT customers.cust_name,</span><br><span class="line">       customers.cust_id,</span><br><span class="line">       COUNT(orders.order_num) AS num_ord</span><br><span class="line">FROM customers LEFT OUTER JOIN orders</span><br><span class="line"> ON customers.cust_id &#x3D; orders.cust_id</span><br><span class="line">GROUP BY customers.cust_id;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><ul>
<li><p>创建组合查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有错，用一个 UNION 就可以了，怕不怕</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &lt;&#x3D; 5</span><br><span class="line">UNION</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1001,1002);</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"># UNION 总是可以被 WHERE 子句替代</span><br><span class="line"># 除非想要每个条件的匹配行全部出现（包括重复行），那么必须使用 UNION ALL 而不是 WHERE</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &lt;&#x3D; 5</span><br><span class="line">  OR vend_id IN (1001,1002);</span><br></pre></td></tr></table></figure></li>
<li><p><strong>UNION</strong> 规则：</p>
<ul>
<li><p><strong>UNION</strong> 必须由两条或两条以上的 <strong>SELECT</strong> 语句组成，语句之间用关键字 <strong>UNION</strong> 分隔（因此，如果组合4条 <strong>SELECT</strong> 语句，将要使用3个 <strong>UNION</strong> 关键字）。</p>
</li>
<li><p><strong>UNION</strong> 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</p>
</li>
<li><p>列数据类型必须兼容：类型不必完全相同，但必须是<strong>DBMS</strong>可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</p>
</li>
<li><p><strong>UNION</strong> 从查询结果集中自动去除了重复的行（换句话说，它的行为与单条 <strong>SELECT</strong> 语句中使用多个 <strong>WHERE</strong> 子句条件一样）。“这是UNION 的默认行为，但是如果需要，可以改变它。事实上，如果想返回所有匹配行，可使用<code>UNION ALL</code> 而不是 <code>UNION</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &lt;&#x3D; 5</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1001,1002);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>对组合查询的结果排序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># SELECT 语句的输出用 ORDER BY 子句排序</span><br><span class="line"># 只能使用一条 ORDER BY 子句，且它必须出现在最后一条 SELECT 语句之后</span><br><span class="line"># 对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况</span><br><span class="line"># 因此不允许使用多条 ORDER BY 子句</span><br><span class="line"># 本代码中虽然 ORDER BY 子句似乎只是最后一条SELECT 语句的组成部分</span><br><span class="line"># 但实际上 MySQL 将用它来排序所有 SELECT 语句返回的所有结果</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_price &lt;&#x3D; 5</span><br><span class="line">UNION</span><br><span class="line">SELECT vend_id, prod_id, prod_price</span><br><span class="line">FROM products</span><br><span class="line">WHERE vend_id IN (1001,1002)</span><br><span class="line">ORDER BY vend_id, prod_price;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h1><ul>
<li>并非所有的引擎都支持本书所描述的全文本搜索。两个最常使用的引擎为MyISAM 和InnoDB ，前者支持全文本搜索，而后者不支持。</li>
<li>之间介绍过 <code>LIKE</code> 操作符，接着又引入了正则表达式，但是这些搜索机制仍存在几个重要的限制：<ul>
<li>性能——通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。</li>
<li>无法精确控制——例如，指定一个词必须匹配，一个词必须不匹配。</li>
<li>搜索结果不够智能。</li>
</ul>
</li>
<li>开启全文本搜索：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 FULLTEXT 进行对列的索引</span><br><span class="line">CREATE TABLE productnotes</span><br><span class="line">(</span><br><span class="line">  note_id    int           NOT NULL AUTO_INCREMENT,</span><br><span class="line">  prod_id    char(10)      NOT NULL,</span><br><span class="line">  note_date datetime       NOT NULL,</span><br><span class="line">  note_text  text          NULL ,</span><br><span class="line">  PRIMARY KEY(note_id),</span><br><span class="line">  FULLTEXT(note_text)</span><br><span class="line">) ENGINE&#x3D;MyISAM;</span><br></pre></td></tr></table></figure></li>
<li>如果正在导入数据到一个新表，此时不应该启用 FULLTEXT 索引。应该首先导入所有数据，然后再修改表，定义 FULLTEXT 。这样有助于更快地导入数据（而且使索引数据的总时间小于在导入每行时分别进行索引所需的总时间）。</li>
<li>进行全文本搜索：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在索引之后，使用两个函数Match() 和Against() 执行全文本搜索</span><br><span class="line"># 其中Match() 指定被搜索的列，Against() 指定要使用的搜索表达式</span><br><span class="line"># 传递给 Match() 的值必 FULLTEXT() 中定义中的相同</span><br><span class="line"># 如果指定多个列，则必须列出它们（而且次序正确）</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;rabbit&#39;);</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"># 可以在 WHERE 子句中使用 LIKE 关键字替换上面的：</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE note_text LIKE &#39;%rabbit%&#39;;</span><br></pre></td></tr></table></figure></li>
<li>全文本搜索的一个重要部分就是对结果排序——具有较高等级的行先返回，用代码展示这个排序：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT note_text, Match(note_text) Against(&#39;rabbit&#39;) AS rank</span><br><span class="line">FROM productnotes;</span><br></pre></td></tr></table></figure></li>
<li>扩展查询——找出可能相关的结果，而不要求那么精确：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;anvils&#39; WITH QUERY EXPANSION);</span><br></pre></td></tr></table></figure></li>
<li>布尔文本搜索（即使没有 FULLTEXT 索引也可以使用，但是很慢）——可能提供更详细的查询设定，譬如要匹配的词和要排斥的词，甚至可以设置多个匹配词的优先级：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;heavy rope*&#39; IN BOOLEAN MODE);</span><br><span class="line"></span><br><span class="line"># 包含这两个单词</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;+rabbit +bait&#39; IN BOOLEAN MODE);</span><br><span class="line"></span><br><span class="line"># 至少包含其中一个单词</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;rabbit bait&#39; IN BOOLEAN MODE);</span><br><span class="line"></span><br><span class="line"># 匹配的是一个短语</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;&quot;rabbit bait&quot;&#39; IN BOOLEAN MODE);”</span><br><span class="line"></span><br><span class="line"># 匹配两个词，但是增加前者等级，降低后者等级</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;&gt;rabbit &lt;carrot&#39; IN BOOLEAN MODE);”</span><br><span class="line"></span><br><span class="line"># 同时匹配两者，但是降低后者的等级</span><br><span class="line">SELECT note_text</span><br><span class="line">FROM productnotes</span><br><span class="line">WHERE Match(note_text) Against(&#39;+safe +(&lt;combination)&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></figure>
<img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftfncye9kdj30cp04wq30.jpg" alt=""></li>
<li>重要说明：<ul>
<li>索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li>
<li>MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参阅MySQL文档以了解如何完成此工作）。</li>
<li>MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE 。</li>
<li>如果表中的行数少于等于2行，则全文本搜索不返回结果（因为每个词或者不出现，或者至少出现在50%的行中）。</li>
<li>忽略词中的单引号。例如，don’t 索引为dont 。</li>
<li>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li>
<li>如前所述，仅在MyISAM 数据库引擎中支持全文本搜索。</li>
</ul>
</li>
</ul>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><ul>
<li>插入完整的行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 第一列 cust_id（建列信息为 NOT NULL AUTO_INCREMENT）也为 NULL</span><br><span class="line"># 这是因为每次插入一个新行时，该列由 MySQL 自动增量</span><br><span class="line"># 你不想给出一个值（这是 MySQL 的工作），又不能省略此列</span><br><span class="line"># 所以需要给此类指定一个 NULL 值</span><br><span class="line">INSERT INTO Customers</span><br><span class="line">VALUES(NULL,</span><br><span class="line">       &#39;Pep E. LaPew&#39;,</span><br><span class="line">       &#39;100 Main Street&#39;,</span><br><span class="line">       &#39;Los Angeles&#39;,</span><br><span class="line">       &#39;CA&#39;,</span><br><span class="line">       &#39;90046&#39;,</span><br><span class="line">       &#39;USA&#39;,</span><br><span class="line">       NULL,</span><br><span class="line">       NULL);</span><br></pre></td></tr></table></figure></li>
<li>插入行的一部分：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一种更安全却更繁琐的方法如下</span><br><span class="line"># 这种方法不依赖表中各个的顺序，即使表的结构改变，此语句仍然能正确工作</span><br><span class="line"># 且 cust_id 列（建列信息为 NOT NULL AUTO_INCREMENT）是不必要的</span><br><span class="line"># 使用这种语法，还可以省略列。这表示可以只给某些列提供值，给其他列不提供值</span><br><span class="line"># 省略的列必须满足以下某个条件，否则会出现插入错误：</span><br><span class="line"># ① 该列定义为允许 NULL 值（无值或空值）</span><br><span class="line"># ② 在表定义中给出默认值。这表示如果不给出值，将使用默认值</span><br><span class="line">INSERT INTO customers(cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country,</span><br><span class="line">                      cust_contact,</span><br><span class="line">                      cust_email)</span><br><span class="line">VALUES(&#39;Pep E. LaPew&#39;,</span><br><span class="line">       &#39;100 Main Street&#39;,</span><br><span class="line">       &#39;Los Angeles&#39;,</span><br><span class="line">       &#39;CA&#39;,</span><br><span class="line">       &#39;90046&#39;,</span><br><span class="line">       &#39;USA&#39;,</span><br><span class="line">       NULL,</span><br><span class="line">       NULL);</span><br></pre></td></tr></table></figure></li>
<li>插入多个行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO customers(cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line">VALUES(&#39;Pep E. LaPew&#39;,</span><br><span class="line">       &#39;100 Main Street&#39;,</span><br><span class="line">       &#39;Los Angeles&#39;,</span><br><span class="line">       &#39;CA&#39;,</span><br><span class="line">       &#39;90046&#39;,</span><br><span class="line">       &#39;USA&#39;);</span><br><span class="line">INSERT INTO customers(cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line">VALUES(&#39;M. Martian&#39;,</span><br><span class="line">       &#39;42 Galaxy Way&#39;,</span><br><span class="line">       &#39;New York&#39;,</span><br><span class="line">       &#39;NY&#39;,</span><br><span class="line">       &#39;11213&#39;,</span><br><span class="line">       &#39;USA&#39;);</span><br><span class="line">       </span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"># 只要每条INSERT 语句中的列名（和次序）相同，可以这样简写：</span><br><span class="line">INSERT INTO customers(cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line">VALUES(&#39;Pep E. LaPew&#39;,</span><br><span class="line">       &#39;100 Main Street&#39;,</span><br><span class="line">       &#39;Los Angeles&#39;,</span><br><span class="line">       &#39;CA&#39;,</span><br><span class="line">       &#39;90046&#39;,</span><br><span class="line">       &#39;USA&#39;</span><br><span class="line">      ),</span><br><span class="line">      (&#39;M. Martian&#39;,</span><br><span class="line">       &#39;42 Galaxy Way&#39;,</span><br><span class="line">       &#39;New York&#39;,</span><br><span class="line">       &#39;NY&#39;,</span><br><span class="line">       &#39;11213&#39;,</span><br><span class="line">       &#39;USA&#39;</span><br><span class="line">      );</span><br></pre></td></tr></table></figure></li>
<li>插入检索出的数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这个例子在 INSERT 和 SELECT 语句中使用了相同的列名，但这非必须</span><br><span class="line"># 事实上，MySQL 甚至不关心 SELECT 返回的列名。它使用的是列的位置</span><br><span class="line"></span><br><span class="line">INSERT INTO customers(cust_id,</span><br><span class="line">                      cust_contact,</span><br><span class="line">                      cust_email,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line">SELECT cust_id,</span><br><span class="line">	   cust_contact,</span><br><span class="line">	   cust_email,</span><br><span class="line">	   cust_name,</span><br><span class="line">	   cust_address,</span><br><span class="line">	   cust_city,</span><br><span class="line">	   cust_state,</span><br><span class="line">	   cust_zip,</span><br><span class="line">	   cust_country</span><br><span class="line">FROM custnew;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h1 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h1><ul>
<li>更新数据：<ul>
<li>更新表中的特定行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE customers</span><br><span class="line">SET cust_name &#x3D; &#39;The Fudds&#39;,</span><br><span class="line">    cust_email &#x3D; &#39;elmer@fudd.com&#39;</span><br><span class="line">WHERE cust_id &#x3D; 10005;</span><br></pre></td></tr></table></figure></li>
<li><strong>IGNORE</strong> 关键字——如果用 UPDATE 语句更新多行，并且在更新这些行中的一行或多行时出现错误，则整个 UPDATE 操作被取消（错误发生前更新的所有行被恢复到它们原来的值）。但是如果你偏要不计代价的执行更新的话，可以使用 IGNORE 关键字：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE IGNORE customers...</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>删除数据：<ul>
<li>DELETE 不需要列名或通配符，DELETE 删除整行而不是删除列：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM customers</span><br><span class="line">WHERE cust_id &#x3D; 10006;</span><br></pre></td></tr></table></figure></li>
<li>更快的删除——如果想从表中删除所有行，不要使用 DELETE，可使用 <strong>TRUNCATE TABLE</strong> 语句，它完成相同的工作，但速度更快（TRUNCATE 实际是删除原来的表并重新创建一个表，而不是逐行删除表中的数据）。</li>
</ul>
</li>
<li>注意事项：<ul>
<li>在对 UPDATE 或 DELETE 语句使用 WHERE 子句前，应该先用 SELECT 进行测试，保证它过滤的是正确的记录，以防编写的 WHERE 子句不正确。</li>
<li>除非确实打算更新和删除每一行，否则绝对不要使用不带WHERE 子句的UPDATE 或DELETE 语句。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>应用层</title>
    <url>/2017/09/03/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    <content><![CDATA[<ul>
<li>两种主流的应用程序体系结构：CS、P2P。</li>
<li>CS体系结构中，C之间不直接通信，还有S具有固定的、周知的IP地址。</li>
<li>P2P体系结构最吸引人的特性之一是它们的<strong>自扩展性</strong>，然而它仍面临严峻的挑战：①ISP友好；②安全性；③激励。</li>
<li>在操作系统的术语中，进行通信的实际上是进程。当两个进程运行在同一个端系统上的时候，它们使用进程间的通信机制（由操作系统确定）进行通信；当两个进程运行在不同的端系统上时，就需要跨越计算机网络交换<strong>报文</strong>。</li>
<li>在给定的一对进程之间的通信会话场景中，发起通信的进程是C，而等待联系的进程被称为S。<a id="more"></a></li>
<li>进程通过一个称为<strong>套接字</strong>的软件接口向网络发送和接收报文。</li>
<li>套接字是同一台端系统内应用层和运输层的接口，所以也称为<strong>应用程序编程接口</strong>（API）。应用程序的开发者可以控制套接字在应用层的一切，但是对于运输层的套接字部分毫无办法。应用程序开发者对运输层的权限仅在于：①选择运输层协议；②可能设定及格运输层参数。</li>
<li>表示接收进程：①主机的地址（IP地址）；②定义在目的主机中的接收进程（套接字）的标识符（端口号）。</li>
<li>具有吞吐量要求的应用程序被称为<strong>宽带敏感的应用</strong>，而<strong>弹性应用</strong>能够根据情况或多或少地利用可供使用的吞吐量。（当然，我们永远不会嫌弃吞吐量太多的）</li>
<li>TCP的两种服务：①面向连接的服务——在应用层数据报文开始流动之前，TCP让客户和服务器相互交换运输层控制信息，使它们为大量分组的到来做好准备。握手阶段后，一个TCP连接就在这两个进程的套接字之间建立了，这条链接是全双工的，当应用程序结束报文发送时，必须拆除该链接；②可靠的数据传送服务。</li>
<li>当发送方和接收方之间的网络出现拥塞时，TCP的拥塞控制机制会抑制发送进程，此外，TCP拥塞控制机制也试图限制每个TCP连接，使给它们达到公平共享网络带宽的目的。</li>
<li>UDP是一种不提供不必要服务的轻量级运输协议，UDP协议并不保证该报文将到达接收进程，甚至到达接收进程的报文也可能是乱序到达的。</li>
<li>无论TCP还是UDP都没有提供任何加密机制，于是出现了TCP++，即SSL，这种强化是在应用层上实现的——当一个应用使用SSL时，发送进程向SSL套接字传递明文数据；在发送主机中的SSL则加密该数据并将加密的数据传递给TCP套接字；加密的数据经因特网传送到接收进程中的TCP套接字；再传递给SSL解密；SSL通过它的SSL套接字将明文数据传递给接收进程。</li>
<li>今天的因特网通常能够为时间敏感应用提供满意的服务，但它不能提供任何定时或带宽保证。</li>
<li>应用层协议定义了：①交换的报文类型；②何种报文类型的语法；③字段的语义；④一个进程何时以及如何发送报文，对报文进行响应的规则。</li>
<li>HTTP选择了TCP作为它运输层的协议。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Git from the inside out</title>
    <url>/2017/08/31/Git-from-the-inside-out/</url>
    <content><![CDATA[<p>忘记了是秋百万、猴子还是高爷，在微博上转载过这篇文章。</p>
<p>当时我就随手收藏了，很惭愧，才想起来这个东西，本想转载到我的博客，想想算了，我也懒得去要授权了，直接贴上原文链接吧：<br><a href="https://maryrosecook.com/blog/post/git-from-the-inside-out" target="_blank" rel="noopener">https://maryrosecook.com/blog/post/git-from-the-inside-out</a></p>
<p>然后我Google了一个翻译，我还没看，同样直接上链接吧，喜欢的同学可以给他一个Star~：<br><a href="https://github.com/pysnow530/git-from-the-inside-out" target="_blank" rel="noopener">https://github.com/pysnow530/git-from-the-inside-out</a></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2017/08/31/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>Talk is cheap, show you the code.</p>
</blockquote>
<ul>
<li>获取本机IP地址：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        InetAddress host = InetAddress.getLocalHost();</span><br><span class="line">        String ip = host.getHostAddress();</span><br><span class="line">        System.out.println(<span class="string">"本机ip地址："</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>Server.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">            InputStream inputStream = s.getInputStream();</span><br><span class="line">            DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line">            OutputStream outputStream = s.getOutputStream();</span><br><span class="line">            DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(outputStream);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String strReceive = dataInputStream.readUTF();</span><br><span class="line">                System.out.println(strReceive);</span><br><span class="line"></span><br><span class="line">                String strSend = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">                dataOutputStream.writeUTF(strSend);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>Client.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            OutputStream outputStream = s.getOutputStream();</span><br><span class="line">            DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(outputStream);</span><br><span class="line">            InputStream inputStream = s.getInputStream();</span><br><span class="line">            DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                String strSend = scanner.nextLine();</span><br><span class="line">                dataOutputStream.writeUTF(strSend);</span><br><span class="line"></span><br><span class="line">                String strReceive = dataInputStream.readUTF();</span><br><span class="line">                StdOut.println(strReceive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统概述</title>
    <url>/2017/08/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<ul>
<li><strong>并发</strong>是个同一时间间隔，<strong>并行</strong>是同一时刻。</li>
<li>操作系统的并发性是通过分时得以实现的，而并行性需要有相关的硬件支持。</li>
<li><strong>共享</strong>分为两种形式：<strong>互斥共享方式</strong>（如打印机）和<strong>同时访问方式</strong>（如磁盘）。</li>
<li>并发和共享是操作系统两个最基本的特征，其他还有<strong>虚拟</strong>和<strong>异步</strong>。</li>
<li>操作系统作为系统资源的管理者，管理以下方面：<strong>处理机</strong>、<strong>存储器</strong>、<strong>文件</strong>以及<strong>设备</strong>。</li>
<li>操作系统是用户与计算机硬件系统之间的接口，接口分为<strong>命令接口</strong>和<strong>程序接口</strong>。<a id="more"></a></li>
<li>命令接口分为<strong>联机命令接口</strong>（交互式命令接口）和<strong>脱机命令接口</strong>（批处理命令接口）。</li>
<li>程序接口是一组<strong>系统调用命令</strong>。</li>
<li><strong>通道</strong>是独立于CPU的控制I/O的设备。</li>
<li>库函数是语言或者应用程序的一部分，可以运行在用户空间中；而系统调用是操作系统的一部分，是内核提供给用户的程序接口，运行在内核空间中。许多库函数会使用系统调用的功能，其执行效率通常比没有使用系统调用功能的库函数低，原因是其使用系统调用时，需要上下文的切换以及状态的转换（从用户态转换为核心态）。</li>
<li>操作系统呃发展与分类：<strong>手工操作阶段</strong>（此阶段无操作系统），<strong>批处理阶段</strong>（单道批处理系统、多道批处理系统）、<strong>分时操作系统</strong>、<strong>实时操作系统</strong>、<strong>网络操作系统和分布式计算机系统</strong>。</li>
<li>手工操作阶段的两大明显局限：①资源利用率奇低无比；②CPU等待手工操作，CPU利用极其不充分。</li>
<li>为了解决CPU和I/O设备速度不匹配的矛盾，出现了<strong>单道批处理系统</strong>——系统对作业的处理是成批进行的，但内存中始终保持一道作业，其特点是：自动性、顺序性以及单道性。</li>
<li>为了进一步解决CPU和I/O设备速度不匹配的矛盾，出现了<strong>多道批处理系统</strong>——当一道程序因I/O请求而暂停的时候，CPU便立即转去运行另一道程序，使系统的各个组成部分尽量“忙”，从而提高效率，其特点是：多道、宏观上并行、微观上串行。</li>
<li>为了提供<strong>人机交互</strong>的能力，出现了分时系统，其特点是：同时性、交互性、独立性还有及时性。</li>
<li>为了适应某些对及时性要求极其高的场合，产生了<strong>实时操作系统</strong>，其主要特点是：及时性、可靠性。</li>
<li>大多数<strong>操作系统内核</strong>包括以下四个方面的内容：①<strong>时钟管理</strong>；②<strong>中断机制</strong>；③<strong>原语</strong>；④<strong>系统控制的数据结构及处理</strong>。</li>
<li><strong>时钟管理</strong>：系统管理的方方面面都依赖于时钟。譬如分时操作系统中，<strong>时间片轮转调度</strong>的实现；实时操作系统中，按截止时间控制运行的实现；批处理系统中通过时钟管理来衡量一个作业的运行程度。</li>
<li><strong>中断机制</strong>：初衷是为了提高多道程序运行环境中CPU的利用率，而且主要是针对外围设备的，现已成为操作系统各项操作的基础，例如：键盘或鼠标信息的输入、进程的管理和调度、系统功能的调度、设备驱动、文件访问等等——可以说，现代操作系统是靠中断驱动的软件。中断机制中，只有一小部分功能属于内核，负责保护和恢复中断现场的信息，转移控制权到相关的处理程序。这样可以减少中断的处理时间，提高系统的并行处理能力。</li>
<li><strong>原语</strong>：底层一些可以被调用的公共小程序，操作具有<strong>原子性</strong>，运行时间短、调用频繁。定义原语的直接方法时关闭中断，让它的所有动作执行完再打开中断。</li>
<li><strong>系统控制的数据结构及处理</strong>：管理作业控制块、进程控制块（PCB）、设备控制块、各类链表、消息队列、缓冲区、空闲区登记表、内存分配表等，常见的操作有以下3种——①进程管理、②存储器管理、③设备管理。</li>
<li>核心态指令实际上包括系统调用类指令和一些针对时钟、中断以及原语的操作指令。</li>
<li>想要进入核心态有两种方法：<strong>中断</strong>或者<strong>异常</strong>。</li>
<li><strong>中断</strong>也称<strong>外中断</strong>，此类中断通常是与当前程序运行无关的事件；<strong>异常</strong>也称<strong>内中断</strong>、<strong>例外</strong>或<strong>陷入（Trap）</strong>，指源自CPU执行指令内部的时间，对异常的处理一般要依赖于当前程序的运行现场，且异常不能被屏蔽，一旦出现应立即处理。</li>
<li>一个操作系统提供的**系统调用命令有几十乃至上百条，按功能可分为一下几类：①设备管理；②文件管理；③进程管理；④进程通信；⑤内存管理。</li>
<li>如果程序的运行由用户态转到核心态，不仅转换了状态，而且所使用的堆栈也可能需要由用户堆栈切换为系统堆栈，但这个系统堆栈也是属于该进程的。</li>
<li>用户态转核心态需要用到访管指令，此为非特权命令；核心态转用户态通常是中断返回指令，这是特权命令。</li>
<li>计算机通过<strong>硬件中断机制</strong>完成用户态到核心态的转换。</li>
<li>子程序调用只需保存程序断点，即该指令的下一条指令的地址；中断调用子程序不仅要保护断点（PC的内容），还要保护程序状态字寄存器的内容PSW；在中断处理程序中，最重要的两个寄存器是PC和PSWR。</li>
<li>外部中断处理过程，PC值由中断隐指令自动保存，而通用寄存器内容由操作系统保存。</li>
<li>当在用户态使用特权指令时，将产生中断来阻止用户使用特权指令。</li>
<li>访管指令不是特权指令，其基本功能是让程序拥有“自愿进管”的手段，从而引起<strong>访管中断</strong>。系统根据访管指令的操作数执行访管中断处理程序，访管中断处理程序将按系统调用的操作数和参数转到相应的例行子程序。完成服务功能后，退出中断。</li>
<li>微内核结构有效地分离了内核与服务、服务与服务，使它们之间的接口更清晰，维护的代价大大降低，它们的执行相互独立，交互都借助于微内核进行通信——因此需要频繁切换用户态——慢但简单、可靠。相当多的实验表明，体系结构不是引起性能下降的主要原因，微内核结构显然是利大于弊的——但追求永无止境，为减少开销，有人提出将系统服务作为运行库链接到用户程序，这样的体系结构被称为<strong>库操作系统</strong>。</li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL必知必会（一）</title>
    <url>/2017/08/23/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h1><ul>
<li><code>SHOW DATABASES;</code></li>
<li><code>USE static</code></li>
<li><code>SHOW TABLES</code></li>
<li><code>SHOW COLUMNS FROM customers;</code> = <code>DESC customers;</code></li>
<li><code>SHOW STATUS;</code></li>
<li>常用的SHOW命令：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE DATABASE db_name;</span><br><span class="line">SHOW CREATE EVENT event_name;</span><br><span class="line">SHOW CREATE FUNCTION func_name;</span><br><span class="line">SHOW CREATE PROCEDURE proc_name;</span><br><span class="line">SHOW CREATE TABLE tbl_name;</span><br><span class="line">SHOW CREATE TRIGGER trigger_name;</span><br><span class="line">SHOW CREATE VIEW view_name;</span><br><span class="line">SHOW GRANTS;</span><br><span class="line">SHOW ERRORS;</span><br><span class="line">SHOW WARNINGS;</span><br></pre></td></tr></table></figure>
<a id="more"></a>





</li>
</ul>
<h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><ul>
<li><code>SELECT prod_name FROM products;</code></li>
<li><code>SELECT prod_id, prod_name, prod_price FROM products;</code></li>
<li><code>SELECT * FROM products;</code></li>
<li><code>SELECT DISTINCT vend_id FROM products;</code>——<strong>DISTINCT</strong>表示只返回不同的值</li>
<li><code>SELECT prod_name FROM products LIMIT 5;</code></li>
<li><code>SELECT prod_name FROM products LIMIT 4,5;</code>——第一个数是开始的行号（行0起），第二个数是行数</li>
<li><code>SELECT prod_name FROM products LIMIT 5 OFFSET 4;</code>——等同于上一条语句</li>
<li><code>SELECT products.prop_name FROM static.products;</code></li>
</ul>
<h1 id="排序检测数据"><a href="#排序检测数据" class="headerlink" title="排序检测数据"></a>排序检测数据</h1><ul>
<li><code>SELECT prod_name FROM products ORDER BY prod_name;</code>——ORDER BY子句中使用的列不一定是<strong>SELECT</strong>的列</li>
<li><code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price, prod_name;</code></li>
<li><code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC;</code>——<strong>DESC</strong>指倒序</li>
<li><code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name;</code></li>
<li><code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name LIMIT 1;</code></li>
</ul>
<h1 id="使用WHERE关键字过滤数据"><a href="#使用WHERE关键字过滤数据" class="headerlink" title="使用WHERE关键字过滤数据"></a>使用WHERE关键字过滤数据</h1><ul>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE prod_price = 2.50;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE prod_price &lt; 10;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE prod_price BETWEEN 5 AND 10;</code></p>
</li>
<li><p><code>SELECT prod_name FROM products WHERE prod_price IS NULL;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE prod_price &lt; 10 AND vend_id = 1003;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE (vend_id = 1002 OR vend_id = 1003) AND prop_price &gt;= 10;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE vend_id IN (1002,1003) ORDER BY prod_name;</code></p>
</li>
<li><p><code>SELECT prod_name, prod_price FROM products WHERE vend_id NOT IN (1002,1003) ORDER BY prod_name;</code></p>
</li>
</ul>
<h1 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a>用通配符进行过滤</h1><ul>
<li><code>SELECT prod_name, prod_price FROM products WHERE prod_name LIKE &#39;jet%&#39;;</code></li>
<li><code>SELECT prod_name, prod_price FROM products WHERE prod_name LIKE &#39;%anvil%&#39;;</code></li>
<li><code>SELECT prod_name, prod_price FROM products WHERE prod_name LIKE &#39;s%e&#39;;</code></li>
<li><code>SELECT prod_name, prod_price FROM products WHERE prod_name LIKE &#39;_e&#39;;</code></li>
</ul>
<h1 id="用正则表达式进行搜索"><a href="#用正则表达式进行搜索" class="headerlink" title="用正则表达式进行搜索"></a>用正则表达式进行搜索</h1><ul>
<li><code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;.000&#39; ORDER BY prod_name;</code></li>
<li><code>SELECT prod_name FROM products WHERE prod_name REGEXP BINARY &#39;JetPack .000</code>//强制分大小写</li>
<li><code>SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[123] Ton&#39; ORDER BY prod_name;</code>//正则表达式<code>[123]Ton</code>为<code>[1|2|3]Ton</code>的缩写，但是我们不能省略[]</li>
<li><code>[0-9]</code>=<code>[0123456789]</code></li>
<li><code>[^123]</code>是<code>[123]</code>的取反，表示匹配这些字符之外的字符</li>
<li><code>.</code>在REGEXP中是通配符，如果想在表达式中将它们作为普通字符处理，需要用<code>\\.</code>，其他特殊的还有<code>\\f</code>、<code>\\n</code>、<code>\\r</code>、<code>\\t</code>、<code>\\v</code>、<code>\\-</code>、<code>\\\</code>等等</li>
<li>为更方便工作，可以使用预定义的字符集，称为<strong>字符类</strong>：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fj0oky0l66j30cu06jq39.jpg" alt=""></li>
<li>为了对匹配数目进行更强的控制，我们可以使用<strong>重复元素符</strong>，它对其前一位出现的任何字符进行数量筛选：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fj0oln8debj30cs03ndft.jpg" alt=""></li>
<li>例子——匹配连在一起的四位数字：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;[[:digit:]]&#123;4&#125;&#39;</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure></li>
<li>为了匹配特定位置的文本。我们使用<strong>定位符</strong>：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fj0pfbms4oj30cw039dfp.jpg" alt=""></li>
<li>一个例子：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">WHERE prod_name REGEXP &#39;^[0-9\\.]&#39;</span><br><span class="line">ORDER BY prod_name;</span><br></pre></td></tr></table></figure></li>
<li>简单的正则表达式测试——我们可以在不使用数据表的情况下用SELECT来测试正则表达式，REGEXP检查返回0表示没有匹配，返回1代表匹配，例子：<code>SELECT &#39;hello&#39; REGEXP &#39;[0-9]&#39;;</code></li>
</ul>
<h1 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h1><ul>
<li>拼接字段：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(vend_name, &#39; (&#39;, vend_country, &#39;)&#39;)</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure></li>
<li>Trim函数(还有LTrim和RTrim)：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(RTrim(vend_name), &#39; (&#39;, RTrim(vend_country), &#39;)&#39;)</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure></li>
<li>别名（又名导出列，这个东西可以被其它函数直接用别名引用）：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT Concat(RTrim(vend_name), &#39; (&#39;, RTrim(vend_country), &#39;)&#39;)</span><br><span class="line">AS vend_title</span><br><span class="line">FROM vendors</span><br><span class="line">ORDER BY vend_name;</span><br></pre></td></tr></table></figure></li>
<li>计算：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT prod_id,</span><br><span class="line">       quantity,</span><br><span class="line">       item_price,</span><br><span class="line">       quantity*item_price AS expanded_price</span><br><span class="line">FROM orderitems</span><br><span class="line">WHERE order_num &#x3D; 20005;</span><br></pre></td></tr></table></figure></li>
<li>测试计算：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 3*2;</span><br><span class="line">SELECT Trim(&#39; 123  &#39;);</span><br><span class="line">SELECT Now();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2017/08/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>创建多线程的方式：</p>
<ul>
<li>继承线程类：设计一个类继承Thread，并且重写run方法；启动线程需要实例化一个此类的对象，并且调用其start方法。</li>
<li>实现Runnable接口：设计一个类实现Runnable接口，启动的时候，首先创建一个此类的对象，然后再根据该这个对象创建一个线程对象，并启动。</li>
<li>匿名类：使用匿名类，继承Thread，重写run方法，直接在run方法中写业务代码。匿名类的一个好处是可以很方便的访问外部的局部变量，前提是外部的局部变量需要被声明为final。(JDK7以后就不需要了)<a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Thread t1= <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//匿名类中用到外部的局部变量teemo，必须把teemo声明为final</span></span><br><span class="line">            <span class="comment">//但是在JDK7以后，就不是必须加final的了</span></span><br><span class="line">            <span class="keyword">while</span>(!teemo.isDead())&#123;</span><br><span class="line">                gareen.attackHero(teemo);</span><br><span class="line">            &#125;               </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->





</li>
</ul>
<p>常见线程方法：</p>
<ul>
<li><strong>当前线程暂停</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><strong>加入到当前线程中</strong>（所有进程，至少会有一个线程即主线程，即main方法开始执行，就会有一个看不见的主线程存在。执行t.join，即表明在主线程中加入该线程。主线程会等待该线程结束完毕，才会往下运行）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1= <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!teemo.isDead())&#123;</span><br><span class="line">            gareen.attackHero(teemo);</span><br><span class="line">        &#125;               </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码执行到这里，一直是main线程在运行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//t1线程加入到main线程中来，只有t1线程运行结束，才会继续往下走</span></span><br><span class="line">    t1.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!leesin.isDead())&#123;</span><br><span class="line">            bh.attackHero(leesin);</span><br><span class="line">        &#125;               </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//会观察到盖伦把提莫杀掉后，才运行t2线程</span></span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><strong>线程优先级</strong>（当线程处于竞争关系的时候，优先级高的线程会有更大的几率获得CPU资源）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">t2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><strong>当前线程临时暂停</strong>，使得其他线程可以有更多的机会占用CPU资源：<code>Thread.yield();</code></li>
<li><strong>守护线程</strong>的概念是当一个进程里，所有的线程都是守护线程的时候，结束当前进程：<code>t1.setDaemon(true);</code></li>
</ul>
<p>同步问题：</p>
<ul>
<li>多线程问题又叫Concurrency（并发）问题。</li>
<li>第一种解决方式，利用专门的同步对象——<code>synchronized</code>表示当前线程独占对象someObject，其他线程试图占有对象someObject，就会等待，直到当前线程释放对someObject的占用（synchronized块自然结束，或者有异常抛出时，释放同步对象）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object someObject =<span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">synchronized</span>(someObject) &#123;</span><br><span class="line">  <span class="comment">//此处的代码只有占有了someObject后才可以执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>第二种解决方式，利用想要进行多线程操作的对象本身：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//使用gareen作为synchronized</span></span><br><span class="line">        <span class="keyword">synchronized</span> (gareen) &#123;</span><br><span class="line">            gareen.recover();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用gareen作为synchronized</span></span><br><span class="line">        <span class="comment">//在方法hurt中有synchronized(this)</span></span><br><span class="line">        gareen.hurt();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>第三种解决方式，利用synchronized方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hp = hp + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//掉血</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hurt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用this作为同步对象</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        hp = hp - <span class="number">1</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->





</li>
</ul>
<p>线程安全的类：</p>
<ul>
<li>如果一个类，其方法都是有synchronized修饰的，那么该类就叫做线程安全的类。</li>
<li>把非线程安全的集合转换为线程安全——<code>List&lt;Hero&gt; heros = (List&lt;Hero&gt;) Collections.synchronizedList(new LinkedList&lt;Hero&gt;());</code></li>
</ul>
<p>死锁：</p>
<ul>
<li>演示：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程1 首先占有对象1，接着试图占有对象2 </span><br><span class="line">线程2 首先占有对象2，接着试图占有对象1 </span><br><span class="line">线程1 等待线程2释放对象2 </span><br><span class="line">与此同时，线程2等待线程1释放对象1 </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<!--lalala-->





</li>
</ul>
<p>线程之间的交互通知：</p>
<ul>
<li>wait()：让占用了这个同步对象的线程，临时释放当前的占用，并且等待。所以调用wait是有前提条件的，一定是在synchronized块里，否则就会出错。</li>
<li>notify()：通知一个等待在这个同步对象上的线程，你可以苏醒过来了，有机会重新占用当前对象了。</li>
<li>notifyAll()：通知所有的等待在这个同步对象上的线程，你们可以苏醒过来了，有机会重新占用当前对象了。</li>
<li>wait方法和notify方法，并不是Thread线程上的方法，它们是Object上的方法。因为所有的Object都可以被用来作为同步对象，所以准确的讲，wait和notify是同步对象上的方法。</li>
<li>示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;T&gt; values = <span class="keyword">new</span> LinkedList&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (values.size() &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        values.addLast(t);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (values.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> values.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> values.getLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->





</li>
</ul>
<p>线程池：</p>
<ul>
<li>线程池类ThreadPoolExecutor在包java.util.concurrent下。</li>
<li>使用<code>ThreadPoolExecutor threadPool = new ThreadPoolExecutor(10, 15, 60, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个参数10，表示这个线程池初始化了10个线程在里面工作；</span><br><span class="line">第二个参数15，表示如果10个线程不够用了，就会自动增加到最多15个线程；</span><br><span class="line">第三个参数60，结合第四个参数TimeUnit.SECONDS，表示经过60秒，多出来的线程还没有接到活儿，就会回收，最后保持池子里就10个；</span><br><span class="line">第四个参数TimeUnit.SECONDS，如上；</span><br><span class="line">第五个参数new LinkedBlockingQueue()，用来放任务的集合。</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>示例代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor threadPool= <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">   </span><br><span class="line">threadPool.execute(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"任务1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--lalala-->





</li>
</ul>
<p>Lock:</p>
<ul>
<li>Lock是一个接口，为了使用一个Lock对象，需要用到<code>Lock lock = new ReentrantLock();</code>。</li>
<li>与synchronized(someObject)类似的，lock()方法表示当前线程占用lock对象，一旦占用，其他线程就不能占用了。与synchronized不同的是，一旦synchronized块结束，就会自动释放对someObject的占用。lock却必须调用unlock方法进行手动释放，为了保证释放的执行，往往会把unlock() 放在finally中进行：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log(<span class="string">"线程启动"</span>);</span><br><span class="line">            log(<span class="string">"试图占有对象：lock"</span>);</span><br><span class="line"></span><br><span class="line">            lock.lock();</span><br><span class="line"></span><br><span class="line">            log(<span class="string">"占有对象：lock"</span>);</span><br><span class="line">            log(<span class="string">"进行5秒的业务操作"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log(<span class="string">"释放对象：lock"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        log(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t2.setName(<span class="string">"t2"</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>trylock方法：synchronized是不占用到手不罢休的，会一直试图占用下去。与synchronized的钻牛角尖不一样，Lock接口还提供了一个trylock方法——trylock会在指定时间范围内试图占用，成不成看天意。因为使用trylock有可能成功，有可能失败，所以后面unlock释放锁的时候，需要判断是否占用成功了，如果没占用成功也unlock，就会抛出异常：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log(<span class="string">"线程启动"</span>);</span><br><span class="line">            log(<span class="string">"试图占有对象：lock"</span>);</span><br><span class="line"></span><br><span class="line">            locked = lock.tryLock(<span class="number">1</span>,TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span>(locked) &#123;</span><br><span class="line">                log(<span class="string">"占有对象：lock"</span>);</span><br><span class="line">                log(<span class="string">"进行5秒的业务操作"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log(<span class="string">"经过1秒钟的努力，还没有占有对象，放弃占有"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(locked)&#123;</span><br><span class="line">                log(<span class="string">"释放对象：lock"</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.setName(<span class="string">"t1"</span>);</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>使用synchronized方式进行线程交互，用到的是同步对象的wait、notify和notifyAll方法；Lock也提供了类似的解决办法，首先通过lock对象得到一个Condition对象，然后分别调用这个Condition对象的await、signal和signalAll方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line">     </span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log(<span class="string">"线程启动"</span>);</span><br><span class="line">                log(<span class="string">"试图占有对象：lock"</span>);</span><br><span class="line"></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                log(<span class="string">"占有对象：lock"</span>);</span><br><span class="line">                log(<span class="string">"进行5秒的业务操作"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                log(<span class="string">"临时释放对象 lock， 并等待"</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">                log(<span class="string">"重新占有对象 lock，并进行5秒的业务操作"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                log(<span class="string">"释放对象：lock"</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            log(<span class="string">"线程结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t1.setName(<span class="string">"t1"</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->





</li>
</ul>
<p>原子操作：</p>
<ul>
<li>所谓的原子性操作即不可中断的操作，它是线程安全的。</li>
<li>i++不是原子访问、线程安全的；可以转变为线程安全：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AtomicInteger atomicI =<span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">int</span> i = atomicI.decrementAndGet();</span><br><span class="line">        <span class="keyword">int</span> j = atomicI.incrementAndGet();</span><br><span class="line">        <span class="keyword">int</span> k = atomicI.addAndGet(<span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言</title>
    <url>/2017/08/20/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p><strong>本节内容基于LC-3</strong></p>
</blockquote>
<p>概述：</p>
<ul>
<li>高级语言通常是“ISA无关”的，而低级语言通常是“ISA相关的”。事实上，对于特定的ISA，通常只存在一种对应的汇编语言。</li>
</ul>
<p>指令：</p>
<ul>
<li>汇编语言的指令格式：<code>LABEL OPCODE OPERANDS ;COMMENTS</code>:<code>LABEL</code>和<code>;COMMENTS</code>字段都是可选的。</li>
<li><code>LABEL</code>是指向内存单元的一个符号名，它可以在程序中直接引用。</li>
<li><code>COMMENTS</code>有两个作用：为代码提供更深的<strong>洞察力</strong>；一行中额外的空格用来分割代码片段。<a id="more"></a>


</li>
</ul>
<p>伪操作：</p>
<ul>
<li>伪操作一个更标准的名字是“汇编指令”。之所以称为伪操作是因为程序执行它们的时候不产生任何操作。</li>
<li>伪操作可以理解为是程序员传给汇编器的消息，用于指导汇编器的汇编操作。</li>
<li><code>.ORIG</code>告诉汇编器内存的位置。</li>
<li><code>.FILL</code>告诉汇编器开始（占用）下一个地址，并填充初始值（如操作数）。</li>
<li><code>.BLKW</code>告诉汇编器在程序空间中，开始占用一连串的地址空间，具体数目由其操作数决定。特别适用于操作数值不确定的场合。</li>
<li><code>.STRINGZ</code>告诉汇编器连续占用并初始化n+1个单元，其操作数是双括号括起来的n个字符。n+1个内存单元的前n个字的内容分别是字符串对应字符的ASKII码的<strong>零扩展</strong>值，内存的最后一个字则被初始化为0。</li>
<li><code>.END</code>告诉汇编器“程序结束了”，出现其后的代码都将不再执行（它并不会停止程序的执行）。</li>
<li>代码示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	  .ORIG x3050</span><br><span class="line">	  .FILL x0006</span><br><span class="line">	  .BLKW 1</span><br><span class="line">;</span><br><span class="line">	  .ORIG x3010</span><br><span class="line">HELLO .STRINGZ &quot;Hello, World!&quot;</span><br><span class="line">	  .END</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>汇编过程：</p>
<ul>
<li>从汇编语言翻译成LC-3 ISA格式的机器语言代码，需要借助汇编器。</li>
<li>汇编的过程需要经过两遍扫描，即：<strong>符号表的构建</strong>以及<strong>将所有的汇编指令翻译成对应的机器指令</strong>。</li>
<li>符号表的构建过程：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①丢弃注释行。</span><br><span class="line">②.ORIG伪操作，为第一条指令分配如参数所示的地址；采用一个地址跟踪计数器LC，LC的初始值由.ORIG指定。</span><br><span class="line">③每成功识别一条有效指令LC+1，如果该指令的头部存在“标识”字段，则为该标识创建二元组[符号][地址值]，其中地址值就是LC计数器当前的内容。</span><br><span class="line">④继续识别，直到.END。</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>相关知识：</p>
<ul>
<li>当计算机开始程序的执行时，执行实体又称为“可执行映像”，通常是由多个相互独立的模块组装在一起形成的。所有这些模块组装之前，都是一个个独立的目标文件，最后是通过<strong>链接</strong>操作将这些目标文件拼装成一个可执行映像的。</li>
<li>库函数都是目标格式文件，而不是源代码格式。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>算法分析</title>
    <url>/2017/08/19/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ul>
<li><strong>科学方法</strong>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①细致地观察真是世界的特点，通常还要有精确的测量。</span><br><span class="line">②根据观察结果提出假设模型。</span><br><span class="line">③根据模型来预测未来时间。</span><br><span class="line">④继续观察并核实预测的准确性。</span><br><span class="line">⑤如此反复。</span><br></pre></td></tr></table></figure></li>
<li>科学方法的关键性原则：设计的实验可重现、所有的假设可证伪。<a id="more"></a><blockquote>
<p>“再多的实验也不一定能够证明我是对的，但只需要一个实验就能证明我是错的” —— 爱因斯坦</p>
</blockquote>
</li>
<li>常见的增长数量级函数：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fip3u0puj6j30ad06hweg.jpg" alt=""></li>
<li>对增长数量级的常见假设：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fip3pemgc4j30sg0f7gmt.jpg" alt=""></li>
<li>算法分析中的常见函数：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fip3n3rc3zj30rh08ejrs.jpg" alt=""></li>
<li>算法分析中常用的近似函数：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fip3o47v4oj30rq08nwev.jpg" alt=""></li>
<li>常见数据类型的内存需求：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fip3vbgapkj3077051dfo.jpg" alt=""></li>
<li>对程序性能做分析的时候，存在一些需要注意的地方，这些地方可能会误导你得出错误的答案：①<strong>大常数</strong>；②<strong>非决定性的内循环</strong>；③<strong>指令时间</strong>；④<strong>系统因素</strong>；⑤<strong>不分伯仲</strong>；⑥<strong>对输入的强烈依赖</strong>；⑦<strong>多个问题参量</strong>。</li>
<li><strong>大常数</strong>：譬如我们将$2N^2+cN$时，我们假设是$c$很小，如果实际上$c$并不小，这就代表我们不应该忽略它。</li>
<li>非决定性内循环：有些程序在内循环之外也有大量指令需要考虑。</li>
<li><strong>多个问题参量</strong>：如使用二分查找的白名单问题，其中白名单有$N$个整数而输入中有$M$个整数，运行时间一般和$M\log_2 N$成正比。</li>
<li>一般内存的使用都会被填充为8字节（64位计算机中的机器字）的倍数。</li>
<li>当程序调用一个方法时，系统会从内存中的一个特定区域为方法分配所需要的内存（用于保存局部变量），这个区域叫做<strong>栈</strong>（Java系统的下压栈）。当方法返回时，它所占用的的内存也返回给了系统栈。因此，在递归程序中创建数组或者其他大型对象是很危险的。</li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 表达式</title>
    <url>/2017/08/17/Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>匿名类</p>
<ul>
<li>原匿名类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Hero&gt; c = <span class="keyword">new</span> Comparator&lt;Hero&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照hp进行排序</span></span><br><span class="line">        <span class="keyword">if</span>(h1.hp&gt;=h2.hp)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//正数表示h1比h2要大</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Collections.sort(heros,c);</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>转为Lambda形式：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(heros, (h1, h2) -&gt; h1.hp &gt;= h2.hp ? <span class="number">1</span> : -<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>由此可见，匿名类转为Lambda表达式的步骤为：①把外面的壳子去掉，只保留方法参数和方法体。②把return和{}去掉。③把参数类型和圆括号去掉(只有一个参数的时候，才可以去掉圆括号)。④直接把表达式作为参数传递。</li>
</ul>
<p>引用静态方法</p>
<ul>
<li>show code：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        HeroChecker c = <span class="keyword">new</span> HeroChecker() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Hero h)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用匿名类过滤"</span>);</span><br><span class="line">        filter(heros, c);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用Lambda表达式"</span>);</span><br><span class="line">        filter(heros, h -&gt; h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"在Lambda表达式中使用静态方法"</span>);</span><br><span class="line">        filter(heros, h -&gt; TestLambda.testHero(h));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"直接引用静态方法"</span>);</span><br><span class="line">        filter(heros, TestLambda::testHero);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">testHero</span><span class="params">(Hero h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List&lt;Hero&gt; heros, HeroChecker checker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checker.testHero(hero))</span><br><span class="line">                System.out.print(hero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>引用对象的方法</p>
<ul>
<li>利用对象使用Lambda表达式：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestLambda testLambda = <span class="keyword">new</span> TestLambda();</span><br><span class="line">filter(heros, testLambda::testHero);</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>引用容器中的对象的方法</p>
<ul>
<li>首先为Hero添加一个方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matched</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.hp &gt; <span class="number">100</span> &amp;&amp; <span class="keyword">this</span>.damage &lt; <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>使用Lambda表达式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter(heros, h -&gt; h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>在Lambda表达式中调用容器中的对象Hero的方法matched<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter(heros,h -&gt; h.matched());</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>matched恰好就是容器中的对象Hero的方法，那就可以进一步改写为<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter(heros, Hero::matched);</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>引用构造器</p>
<ul>
<li>有的接口中的方法会返回一个对象，比如<code>java.util.function.Supplier</code>提供了一个get方法，返回一个对象。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>设计一个方法，参数是这个接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getList</span><span class="params">(Supplier&lt;List&gt; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>为了调用这个方法，有3种方式——第一种匿名类：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;List&gt; s = <span class="keyword">new</span> Supplier&lt;List&gt;() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">List list1 = getList(s);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>第二种：Lambda表达式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list2 = getList(() -&gt; <span class="keyword">new</span> ArrayList());</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>第三种：引用构造器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list3 = getList(ArrayList::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>Java集合的聚合操作</p>
<ul>
<li><strong>Stream</strong>和<strong>Collection</strong>结构化的数据不一样，Stream是一系列的元素，就像是生产线上的罐头一样，一串串的出来。</li>
<li>管道指的是一系列的聚合操作，它分为三个部分：<strong>管道源</strong>、<strong>中间操作</strong>和<strong>结束操作</strong>。</li>
<li><strong>管道源</strong>：源可能是一个数组（Arrays.stream(hs)或者Stream.of(hs)）、一个Collection（heros.stream()）…</li>
<li><strong>中间操作</strong>：每个中间操作，又会返回一个Stream，比如.filter()又返回一个Stream, 中间操作是“懒”操作，并不会真正进行遍历：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对元素进行筛选：</span><br><span class="line">filter 匹配</span><br><span class="line">distinct 去除重复(根据equals判断)</span><br><span class="line">sorted 自然排序</span><br><span class="line">sorted(Comparator&lt;T&gt;) 指定排序</span><br><span class="line">limit 保留</span><br><span class="line">skip 忽略</span><br><span class="line"></span><br><span class="line">转换为其他形式的流：</span><br><span class="line">mapToDouble 转换为double的流</span><br><span class="line">map 转换为任意类型的流</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><strong>结束操作</strong>：当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。结束操作不会返回Stream，但是会返回int、float、String、 Collection或者像forEach，什么都不返回。结束操作才进行真正的遍历行为，在遍历的时候，才会去进行中间操作的相关判断：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常见结束操作如下：</span><br><span class="line">forEach() 遍历每个元素</span><br><span class="line">toArray() 转换为数组</span><br><span class="line">min(Comparator&lt;T&gt;) 取最小的元素</span><br><span class="line">max(Comparator&lt;T&gt;) 取最大的元素</span><br><span class="line">count() 总数</span><br><span class="line">findFirst() 第一个元素</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型</title>
    <url>/2017/08/16/%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li><p>泛型的类型参数使用大写形式，且比较短，一般一个字母。在java库中：使用变量E表示集合的元素类型；K和V分别表示键与值的类型（比如：Map的键与值）；T（需要时还可以用临近的字母U和S）表示任意类型。</p>
</li>
<li><p>可以将运行时错误在编译时检查出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面这样的代码会在编译时直接报错</span></span><br><span class="line">Comparable&lt;Date&gt; date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date.compareTo(<span class="string">"lalala"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>取出时无需进行类型转换，编译器知道它的类型，而不像之前的都是<strong>Object</strong>类型的对象。</p>
<a id="more"></a>
</li>
<li><p>尖括号<code>&lt;&gt;</code>中必须是引用类型。譬如<code>ArrayList&lt;int&gt;</code>就不行，但是<code>ArrayList&lt;Integer&gt;</code>没毛病，而且这样创建的ArrayList也可以直接add基本类型，因为基本类型会自动装箱，理所当然，拿出来的时候也可以自动拆箱，直接<code>int a = list.get(0)</code>这样就行了。</p>
</li>
<li><p>为了定义一个类为泛型类型，要将泛型类型放在类名之后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneticStack</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了定义一个方法为泛型类型，要将类型变量放在方法返回类型之前、修饰符之后（可以定义静态方法为泛型类型），当调用一个泛型方法的时候，在方法名前的尖括号中放入具体的类型（大部分情况下可省略尖括号）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">max</span><span class="params">(E o1, E o2)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个E类型的参数表示，这两个参数必须是同一个类型，另外，它们还必须是GeometricObject类型或其子类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends GeometricObject&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">equalArea</span><span class="params">(E o1, E o2)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 一个类型或者通配符可以有多个限定，例如 T extends Comparable &amp; Serializable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(E[] list)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法：当程序调用泛型方法时，如果擦除返回类型，编译器将插入强制类型转换</span></span><br><span class="line"><span class="comment">// 当存取一个泛型域时也要插入强制类型转换 Employee buddy = buddies.first;</span></span><br><span class="line">String middle = ArragAlg.&lt;String&gt;getMiddle(<span class="string">"John"</span>, <span class="string">"Q."</span>, <span class="string">"Public"</span>);</span><br><span class="line">↓</span><br><span class="line">String middle = ArragAlg.getMiddle(<span class="string">"John"</span>, <span class="string">"Q."</span>, <span class="string">"Public"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有具体指定具体类型的泛型类和泛型接口被称为原始类型，用于和早期Java版本向后兼容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GenericStack stack = <span class="keyword">new</span> GenericStack();</span><br><span class="line">↓</span><br><span class="line">GenericStack&lt;Object&gt; stack = <span class="keyword">new</span> GenericStack&lt;Object&gt;();</span><br><span class="line">↓</span><br><span class="line">GenericStack&lt;Object&gt; stack = <span class="keyword">new</span> GenericStack&lt;&gt;();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在虚拟机中没有泛型，只有普通的类和方法。在 Java 中的泛型实际上是一种语法糖。转到字节码的时候，编译器会进行原始代码类型擦除——无论何时定义一个泛型类型，都自动提供一个相应的原始类型。原始类型的名字就是删去类型参数后的泛型类型名。擦除类型变量，并替换为第一个限定类型（无限定的变量用Object）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span> &amp; <span class="title">Serializable</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T lower;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(T first, T second)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Comparable lower;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(Comparable first, Comparable second)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑一下 class Interval&lt;T extends Serializable &amp; Comparable&gt; implements Serializable</span></span><br><span class="line"><span class="comment">// 所以为了提高效率，应该将标签接口(没有方法的接口)放在限定类型列表的尾部</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Serializable lower;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(Comparable first, Comparable second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((Comparable)first.compareTo((Comparable)second) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            lower = first;</span><br><span class="line">            upper = second;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lower = second;</span><br><span class="line">            upper = first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>翻译泛型方法（这部分的内容由编译器自动完成）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataInteral</span> <span class="keyword">extends</span> <span class="title">Pair</span>&lt;<span class="title">LocalDate</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(LocalDate second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (second.compareTo(getFirst()) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">super</span>.setSecond(second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateInteral</span> <span class="keyword">extends</span> <span class="title">Pair</span> </span>&#123;    <span class="comment">//类型擦除后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(LocalDate second)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事实上存在另一个从Pair继承的setSecond方法：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateInteral</span> <span class="keyword">extends</span> <span class="title">Pair</span> </span>&#123;    <span class="comment">//类型擦除后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(LocalDate second)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(Object second)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是类型擦除和多态发生了冲突，要解决这个问题，就要使用一个桥方法；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateInteral</span> <span class="keyword">extends</span> <span class="title">Pair</span> </span>&#123;    <span class="comment">//类型擦除后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(LocalDate second)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecond</span><span class="params">(Object second)</span> </span>&#123;</span><br><span class="line">        setSecond((Date)second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问器的类型擦除和多态发生了冲突，所以当然也需要桥接器，神奇的地方是访问器方法没有参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getSecond</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSecond</span><span class="params">()</span> </span>&#123;...    <span class="comment">//桥接到返回类型为 Date 的 getSecond() 方法&#125;</span></span><br><span class="line"><span class="comment">// 真正的Java代码是不能只靠方法的返回类型不同区分一个方法的</span></span><br><span class="line"><span class="comment">// 但是编译器可能产生两个仅返回类型不同的方法字节码，而虚拟机可以正确处理这一情况</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型的实现其实废了很大的力气，最后的结果还总被其它语言嘲讽，实际上  Java 的泛型可以做的更好，但是为了兼容老代码，不得不做了一些牺牲。在没有泛型之前的类型，可以与实现泛型的同类互转。转的时候会有一些警告，如果你想消除这些警告（并且你确定你的代码是对的情况下），可以在表达式之前使用 Java 注解 <code>@SuppressWarnings(&quot;unchecked&quot;)</code>或者直接在方法的上方使用这个注解，消除方法内的所有泛型、非泛型的同类互转带来的警告。</p>
</li>
<li><p>约束与局限：</p>
<ul>
<li><p><strong>不能使用基本类型实例化参数类型</strong>——类型擦除后，Object 无法承载基本类型变量</p>
</li>
<li><p><strong>运行时类型查询只适用于原始类型</strong>——<code>getClass()</code>只能返回<code>***.class，</code>；<code>a instanceof Pair&lt;T&gt;</code>更是直接报错。</p>
</li>
<li><p><strong>不能实例化 参数化类型 的数组</strong>——对于泛型类型，擦除会使不符合类型要求的元素通过数组存储检查，因此不允许创建参数类型的数组（但是允许声明）。可以声明通配类型的数组，进行类型转换绕过这个限制<code>Pair&lt;String&gt;[] table = (Pair&lt;String&gt;[])new Pair&lt;?&gt;[10]</code>，但是这也不怎么安全，用的时候要特别小心。真正的安全有效的方法是使用<code>ArrayList&lt;Pair&lt;String&gt;&gt;</code>。</p>
</li>
<li><p><strong>Varargs 警告</strong>——可变参数列表和数组实际上一回事，所以也会出现警告，解决办法是在那个方法前增加注解 <code>@SuppressWarnings(&quot;unchecked&quot;)</code>或者用<code>@SafeVarargs</code>直接标注这个方法。</p>
</li>
<li><p><strong>不能实例化类型变量</strong>——即<code>new T(...)</code>之类的操作，因为类型擦除后就变成了<code>new Object()</code>了，如果想实例化可以使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pair&lt;String&gt; p = Pair.makePair(String::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Supplier&lt;T&gt; 是一个函数式接口，表示一个无参且返回类型为 T 的函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Pair&lt;T&gt; <span class="title">makePair</span><span class="params">(Supplier&lt;T&gt; constr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;&gt;(constr.get(), constr.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------旧方法-------------------------</span></span><br><span class="line">Pair&lt;String&gt; p = Pair.makePair(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">pair&lt;T&gt; <span class="title">makePair</span><span class="params">(Class&lt;T&gt; cl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;&gt;(cl.newInstance(), cl.newInstance());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>不能构造泛型数组</strong>——如果类型变量被擦除，这样构造数组就相当于构造了<code>new Object[2]</code>、<code>new Comparable[2]</code>等等等。现在比较好的生成一个具有正确数组类型的方法举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; T[] minmax(IntFunction&lt;T[]&gt; constr, T... a) &#123;</span><br><span class="line">    T[] mm = constr.apply(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用如下：</span></span><br><span class="line">String[] ss = ArrayAlg.minmax(String[]:<span class="keyword">new</span>, <span class="string">"Tom"</span>, <span class="string">"Dick"</span>, <span class="string">"Harry"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------旧方法-------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; T[] minmax(T... a) &#123;</span><br><span class="line">    T[] mm = (T[])Array.newInstance(a.getClass().getComponentType(), <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>泛型类的静态上下文中的类型标量无效</strong>——禁止使用带有类型变量的静态域和方法</p>
</li>
<li><p><strong>不能抛出或捕获泛型类的实例</strong>——甚至泛型类不能继承 Throwable 类，但是泛型类型参数作为方法名后的<code>throws T</code>是可以的</p>
</li>
<li><p><strong>可以消除受查异常的检查</strong>——就是将一个受检异常转换为运行时异常，“哄骗”虚拟机。这样的意义就是很多时候你的方法声明为不抛出异常，所以你要在方法内将所有的异常处理掉，而这样哄骗过后就无需处理甚至也无需包装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">body</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tread <span class="title">toTread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    body();</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    Block.&lt;RuntimeException&gt;throwsAs(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarning</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Throwable&gt; <span class="function"><span class="keyword">void</span> <span class="title">throwAs</span><span class="params">(Throwable e)</span> <span class="keyword">throws</span> T </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> (T)e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意擦除后的冲突</strong>——这主要是桥方法带来的限制，如上面提到的，一些泛型方法被继承后由于泛型被擦除，子类继承的实际上是 Object 类型方法，子类由编译器自动生成桥方法。这时候就有冲突的隐患。例如你在父类做一个泛型的<code>equals</code>方法，子类继承的实际上是<code>boolean equals(Object o)</code>，这就和子类从 Object 类中继承的<code>equals</code>方法产生了冲突，解决办法是父类不要取那些可能产生冲突的方法名。另一个例子：一个子类继承了两个带有同一方法名且参数同为泛型的两个方法，这时候子类的桥方法会觉得无所适从，因为不知道该桥接到哪个方法上，从而产生冲突。</p>
</li>
</ul>
</li>
<li><p>泛型类型的继承规则</p>
<ul>
<li><p>子类泛型不可以转换为父类泛型，父类泛型也不能转型为子类泛型，举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    GenericStack&lt;Integer&gt; intStack = <span class="keyword">new</span> GenericStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 编译错误，因为虽然Integer是Number的子类型，但是</span></span><br><span class="line"><span class="comment">    * GenericStack&lt;Integer&gt;不是GenericStack&lt;Number&gt;的子类型</span></span><br><span class="line"><span class="comment">    * intStack不是GenericStack&lt;Number&gt;的实例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    System.out.println(max(intStack));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(GenericStack&lt;Number&gt; stack)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，所谓的不能互转是指“&lt;&gt;”里面的类型，“&lt;&gt;”前面类型不一致是可以互转的，如：</span></span><br><span class="line"><span class="comment">// ArrayList&lt;T&gt; 类实现 List&lt;T&gt; 接口，ArrayList&lt;Manager&gt; 转换为一个 List&lt;Manager&gt;</span></span><br><span class="line"><span class="comment">// 当然，如前文所述，ArrayList&lt;Manager&gt; 不能转换为 ArrayList&lt;Enployee&gt; &amp; List&lt;Employee&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ul>
<li><p>为了避免上一条那样的局限，引入了通配符：<code>?</code>、<code>? extends T</code>、<code>? super T</code>。</p>
<ul>
<li><p><code>&lt;? extends T&gt;</code>的方法可以作用于T类型和其子类型的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决上一条的编译错误</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(GenericStack&lt;? extends Number&gt; stack)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是这并不能往里面放东西，因为 set 方法往往是这样的：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(? extends Employee a)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 编译器只知道是子类型，但是不知道是具体是什么，它拒绝传递任何特定的类型</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;? extend T&gt;</code>，用于实现更为灵活的读取，使得方法可以读取 T 或者 T 的任意子类型的容器对象。它们可以用类型参数的形式代替，但通配符形式更为简洁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用类型参数的形式代替上一条是可行的</span></span><br><span class="line"><span class="comment">// 且类型参数的形式可以写入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(GenericStack&lt;T extends Number&gt; stack)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择通配符还是类型参数？</span></span><br><span class="line"><span class="comment">// &lt;?&gt; 以及 &lt;? extend E&gt; 能做的，类型参数都能做</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * if (类型参数之间有依赖关系||返回值依赖类型参数||需要写操作) &#123;</span></span><br><span class="line"><span class="comment"> *     用类型参数;</span></span><br><span class="line"><span class="comment"> * &#125; else &#123;</span></span><br><span class="line"><span class="comment"> *     用&lt;?&gt; 以及 &lt;? extend E&gt;;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;? super T&gt;</code>叫做超类型通配符，表示类型 T 或者 T 的父类型，用于实现更为灵活的写入和比较，使得<strong>对象可以写入父容器</strong>，使得<strong>父类型的比较方法可以应用于子类对象</strong>。不能被类型参数替代。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子类继承后不能使用的 max 方法，原因如下</span></span><br><span class="line"><span class="comment">// Java会将 max 方法的类型参数 T 推断为 Child 类型</span></span><br><span class="line"><span class="comment">// 但类型 T 的要求是 extends Comparable&lt;T&gt;</span></span><br><span class="line"><span class="comment">// 而Child并没有实现 Comparable&lt;Child&gt;，它实现的是 Comparable&lt;Base&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(DynamicArray&lt;T&gt; arr)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类集成后可以直接使用的 max 方法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(DynamicArray&lt;T&gt; arr)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再分享一个灵活写入的例子：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyTo</span><span class="params">(DynamicArray&lt;? <span class="keyword">super</span> E&gt; dest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">        dest.add(get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>LC-3结构</title>
    <url>/2017/08/16/LC-3%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>ISA</p>
<ul>
<li>ISA定义了软件编程所需要的<strong>必要而完整</strong>的描述。</li>
<li>ISA给出了<strong>内存组织方式</strong>、<strong>寄存器组</strong>、<strong>指令集（包括操作码、数据类型、寻址模式）</strong>等信息。</li>
</ul>
<p>内存组织</p>
<ul>
<li>LC-3的可寻址空间大小是$2^{16}$，寻址基本单位是16位。$2^{16}$大小的空间并非全部用于内存。</li>
<li>由于LC-3中数据小狐狸的基本单位是16位，所以我们在此称这16位为一个<strong>字</strong>，同时我们也称LC-3是一个<strong>字寻址</strong>机器。<a id="more"></a></li>
</ul>
<p>寄存器组</p>
<ul>
<li>寄存器和内存的特性是一样的：①记忆特性；②独立寻址。</li>
<li>LC-3中提供了8个GPR，即标识编号只需要3位就够了（$2^3=8$）。</li>
</ul>
<p>指令集（包括操作码、数据类型、寻址模式）</p>
<ul>
<li>操作码<ul>
<li>LC-3的操作码合集（+表示该指令将改变条件码）：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1filnjzvavcj30e30p00u8.jpg" alt=""></li>
<li><strong>条件码</strong>：几乎所有的ISA都拥有“基于之前指令的执行结果来改变指令执行序列”的能力，其中的机制就是“条件码”。</li>
<li>我们称存在指令之中的操作数为“字面值”或者“立即数”。</li>
<li>在LC-3中：每当8个通用寄存器中任意一个被改写或者写入的时候，三个单bit位就会发生变化（置1或者置0）。三个位寄存器分别是N、Z和P。根据写入结果是负数、零、正数来决定三位单bit的数值。</li>
<li>在一条指令中，同一个寄存器可以同时扮演源寄存器和目的寄存器。</li>
<li>LC-3只支持三种操作指令：ADD、AND和NOT。</li>
<li>在执行节拍，检查条件码，若检查后发现任何一个条件码为1，都将使PC内容重新修改。若bit[11:9]三个位都是1，则称为“<strong>无条件跳转</strong>”。若都是0，则不检查。</li>
<li><code>JMP</code>（操作码1100）指令的任务就是将寄存器的内容装入PC作为指令跳转的地址，这样，PC就可以指向内存空间的任意地址。</li>
<li><code>TRAP</code>（操作码1111）的任务是改变PC内容，使其<strong>陷入</strong>操作系统的某个代码入口，因此我们还将<code>TRAP</code>指令称为激活了操作系统的服务调用。</li>
</ul>
</li>
<li>数据类型<ul>
<li><strong>数据类型</strong>是指类型的表达方式，即意味着ISA是怎样表达信息的。LC-3的ISA唯一支持的数据类型：<strong>补码整数</strong>。</li>
</ul>
</li>
<li>寻址模式<ul>
<li><strong>寻址模式</strong>是定义操作数来源（位置）的一种机制。操作数可能存在的地方无非是以下三种：内存、寄存器或者指令本身。</li>
<li>LC-3共支持5种寻址模式：<strong>立即数</strong>、<strong>寄存器</strong>、<strong>相对</strong>、<strong>间接</strong>和<strong>基址偏移</strong>。</li>
<li>数据从内存移入寄存器为“<strong>装载</strong>”，而从寄存器转入内存叫做“<strong>存储</strong>”。</li>
</ul>
</li>
</ul>
<p>数据通路</p>
<ul>
<li>循环控制的两种方法：①计算器方法；②哨兵法（采用一个事前知道不可能出现的值作为数据序列尾部的哨兵，当发现到它的时候，循环就结束）</li>
<li>LC-3的数据通路图：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fimwijpc1wj30jl0ozgmt.jpg" alt=""></li>
<li>基本部件：全局总线、内存、ALU和寄存器文件、PC和PCMUX以及MARMUX。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>集合框架</title>
    <url>/2017/08/14/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>ArrayList</p>
<ul>
<li>ArrayList常用的方法：add、contains、get、indexOf、remove、set、size、toArray、addAll、clear。</li>
<li>add：<br><code>heros.add(new Hero(&quot;hero &quot; + i));</code><br><code>heros.add(3, specialHero);</code></li>
<li>contains：<br><code>heros.contains(specialHero)</code></li>
<li>get：<a id="more"></a><br><code>heros.get(5)</code></li>
<li>indexOf：<br><code>heros.indexOf(specialHero)</code></li>
<li>remove：<br><code>heros.remove(2);</code><br><code>heros.remove(2);</code></li>
<li>set：<br><code>heros.set(5, new Hero(&quot;hero 5&quot;)</code></li>
<li>size：<br><code>heros.size()</code></li>
<li>toArray：<br><code>Hero hs[] = (Hero[])heros.toArray(new Hero[]{});</code></li>
<li>addAll：<br><code>heros.addAll(anotherHeros)</code></li>
<li>ArrayList实现了List接口。</li>
<li>对于不使用泛型的容器，可以往里面放任何类的实例：<code>List heros = new ArrayList();</code></li>
<li>如果声明容器的时候，就指定了固定的容器，则只能放Hero，放其他的就会出错：<code>List&lt;Hero&gt; genericheros = new ArrayList&lt;Hero&gt;();</code></li>
<li>泛型的简写（聊胜于无- -）：<code>List&lt;Hero&gt; genericheros2 = new ArrayList&lt;&gt;();</code></li>
<li>遍历ArrayList，借助size()和get()方法的标准for循环：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heros.size(); i++) &#123;</span><br><span class="line">    Hero h = heros.get(i);</span><br><span class="line">    System.out.println(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>遍历ArrayList，借助迭代器：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fijtb61adej309f09ut8q.jpg" alt=""><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Hero&gt; it= heros.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    Hero h = it.next();</span><br><span class="line">    System.out.println(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>遍历ArrayList，增强for循环：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Hero h : heros) &#123;</span><br><span class="line">    System.out.println(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>LinkedList</p>
<ul>
<li>LinkedList也实现了List接口，实现了诸如add、remove、contains等方法。</li>
<li>LinkedList是一个双向链表结构的list:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Hero&gt; ll =<span class="keyword">new</span> LinkedList&lt;Hero&gt;();       </span><br><span class="line">ll.addLast(<span class="keyword">new</span> Hero(<span class="string">"hero1"</span>));</span><br><span class="line">ll.addFirst(<span class="keyword">new</span> Hero(<span class="string">"heroX"</span>));</span><br><span class="line">System.out.println(ll.getFirst());</span><br><span class="line">System.out.println(ll.getLast());</span><br><span class="line">System.out.println(ll.removeFirst());</span><br><span class="line">System.out.println(ll.removeLast());</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>二叉树</p>
<ul>
<li>实现一个二叉树，并遍历：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node leftNode;</span><br><span class="line">    <span class="keyword">public</span> Node rightNode;</span><br><span class="line">    <span class="keyword">public</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            value = obj;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((Integer) (obj) &lt; (Integer) (value)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (leftNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    leftNode = <span class="keyword">new</span> Node();</span><br><span class="line">                &#125;</span><br><span class="line">                leftNode.add(obj);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rightNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    rightNode = <span class="keyword">new</span> Node();</span><br><span class="line">                &#125;</span><br><span class="line">                rightNode.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != leftNode) &#123;</span><br><span class="line">            values.addAll(leftNode.values());</span><br><span class="line">        &#125;</span><br><span class="line">        values.add(value);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rightNode) &#123;</span><br><span class="line">            values.addAll(rightNode.values());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> randoms[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">67</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">81</span>, <span class="number">10</span>, <span class="number">74</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Node roots = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> number : randoms) &#123;</span><br><span class="line">            roots.add(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(roots.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->


</li>
</ul>
<p>HashMap</p>
<ul>
<li>HashMap的常用方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; dictionary = <span class="keyword">new</span> HashMap&lt;&gt;();`</span><br><span class="line">dictionary.put(<span class="string">"adc"</span>, <span class="string">"物理英雄"</span>);</span><br><span class="line">String a = dictionary.get(<span class="string">"adc"</span>);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>keySet()可以获取所有的key，values()可以获取所有的value</li>
</ul>
<p>HashSet</p>
<ul>
<li>HashSet自身并没有独立的实现，而是在里面封装了一个Map，HashSet是作为Map的key而存在的。</li>
<li>HashSet是Set的实现类。</li>
</ul>
<p>Collection</p>
<ul>
<li><strong>Collection</strong>是Set、List、Quque（先进先出队列）和Deque（双向链表）的接口。Collection和Map之间没有关系，Collection是放一个一个对象的，Map是放键值对的。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fikfclpyhmj30ar03m3yf.jpg" alt=""></li>
</ul>
<p>Collections</p>
<ul>
<li>Collections是一个类，容器的工具类，就如同Arrays是数组的工具类。</li>
<li>reverse：<code>Collections.reverse(numbers)</code></li>
<li>shuffle（混淆）：<code>Collections.shuffle(numbers)</code></li>
<li>sort：<code>Collections.sort(numbers)</code></li>
<li>swap：<code>Collections.swap(numbers, 0, 5)</code></li>
<li>rotate（滚动）：<code>Collections.rotate(numbers,2)</code></li>
<li>synchronizedList(线程安全化)：<code>List&lt;Integer&gt; synchronizedNumbers = (List&lt;Integer&gt;) Collections.synchronizedList(numbers);</code></li>
</ul>
<p>区别</p>
<ul>
<li>ArrayList有顺序、可以重复；HashSet无顺序、不可以重复。</li>
<li>ArrayList插入、删除数据慢，定位快；LinkedList插入、删除数据快，定位慢。</li>
<li>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">区别1： </span><br><span class="line">HashMap可以存放null</span><br><span class="line">Hashtable不能存放null</span><br><span class="line">区别2：</span><br><span class="line">HashMap不是线程安全的类</span><br><span class="line">Hashtable是线程安全的类</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>几种set（所有set的数据都不能重复）：HashSet无序；LinkedHashSet按照插入顺序；TreeSet从小到大排序。</li>
</ul>
<p>hashcode</p>
<ul>
<li>所有的对象，都有一个对应的hashcode（散列值），比如字符串“gareen”对应的是1001 (实际上不是，这里是方便理解，假设的值)，比如字符串“temoo”对应的是1004，比如字符串“db”对应的是1008，比如字符串“annie”对应的也是1008。</li>
<li>key是否重复，是由两个步骤判断的——①hashcode是否一样：如果hashcode不一样，就是在不同的坑里，一定是不重复的；②如果hashcode一样，就是在同一个坑里，还需要进行equals比较：如果equals一样，则是重复数据，如果equals不一样，则是不同数据。</li>
</ul>
<p>Comparator（比较器）和Comparable接口</p>
<ul>
<li>假设Hero有三个属性name、hp和damage，那么一个集合中放存放10个Hero，通过Collections.sort对这10个Hero进行排序，那么到底是hp小的放前面？还是damage小的放前面？Collections.sort也无法确定，这时会出现编译错误。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Comparator，指定比较的算法</span></span><br><span class="line">Comparator&lt;Hero&gt; c = <span class="keyword">new</span> Comparator&lt;Hero&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照hp进行排序</span></span><br><span class="line">        <span class="keyword">if</span>(h1.hp &gt;= h2.hp)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//正数表示h1比h2要大</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Collections.sort(heros,c);</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>使Hero类实现Comparable接口，在类里面提供比较算法，Collections.sort就有足够的信息进行排序了，也无需额外提供比较器Comparator：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Hero</span>&gt;</span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Hero anotherHero)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(damage&lt;anotherHero.damage)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>冯·诺依曼模型</title>
    <url>/2017/08/13/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li>计算机的运行需要两个前提：一是<strong>任务描述</strong>，即描述计算机所要完成的任务，它以程序（或代码）的方式表述；二是<strong>计算机本身的运算能力</strong>，因为它是任务的具体执行者。</li>
<li>程序是计算机指令的集合，其中没调指令对应计算机的一个<strong>基本动作</strong>。</li>
<li><strong>指令</strong>是程序的最小单位（或原子操作）。</li>
<li>冯·诺依曼模型的五个部分：<strong>内存</strong>、<strong>处理单元</strong>、<strong>输入</strong>和<strong>输出</strong>单元以及<strong>控制单元</strong>，下图是一个润饰版的冯·诺依曼模型全局图：<a id="more"></a><br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fii44eydj4j30dv0cimy2.jpg" alt=""></li>
<li><strong>内存</strong>每个单元中存放的数据内容会不断的变化，但其地址是不会变化的。</li>
<li><strong>处理单元（ALU）</strong>所能处理的量化大小通常被称为该计算机的“<strong>字长</strong>”，而量化的基本单位被称为一个“<strong>字</strong>”。</li>
<li>通常，ALU附近会配置少量的存储器来存放它最近生成的中间计算结果，避免引发不必要的内存访问。临时存储器最常见的设计方式就是<strong>一组寄存器</strong>，其中每个寄存器的宽度应该与ALU处理数据的宽度一致，由此我们说每一存储器存放一个字。</li>
<li>控制单元中有两个特殊的寄存器：一是<strong>指令寄存器（IR）</strong>，保存的是正在被执行的那条命令；而是<strong>PC</strong>寄存器，用来指示下一条待处理的指令。</li>
<li>冯·诺依曼模型的核心思想是：程序和数据都是以bit流的方式存放在计算机内存中，程序在控制单元的控制下，依次完成指令的读取和执行。</li>
<li>指令的处理过程是在控制单元的控制下，精确地、一步一步完成的。我们称这个执行的步骤顺序为<strong>指令周期</strong>，其中每一步称为<strong>节拍</strong>。</li>
<li>大多数的指令周期包括6个节拍：<strong>取指令</strong>、<strong>译码</strong>、<strong>地址计算</strong>、<strong>取操作数</strong>、<strong>执行</strong>和<strong>存放结果</strong>。</li>
<li><strong>取指令</strong>的过程：①第一个时钟周期——将PC内容装入MAR寄存器、PC增量操作；②第二个时钟周期（可能需要更多的时钟周期，这取决于内存的访问速度）——将内存返回数据自动装入MDR；③第三个时钟周期——控制单元将MDR内容装入IR寄存器中。</li>
<li>通常，我们对机器周期和时钟周期这两个概念不做严格区分。</li>
<li><strong>译码</strong>的任务是分析、检查指令的类型，并确定对应的微结构操作细节。在LC-3中，IR[15:12]的四位操作码对应了16种操作，任何时候，至多只能进行一种操作。同时，不同的操作对应的IR[11:0]的12bit指令信息的解释含义也不同。</li>
<li>执行时存在地址计算的指令在<strong>地址计算</strong>节拍中完成。</li>
<li><strong>取操作数</strong>节拍负责读取指令处理所需要的源操作数。</li>
<li><strong>执行</strong>节拍负责指令的执行操作。</li>
<li><strong>存放结果</strong>节拍是将之前的执行结果写入目的寄存器。</li>
<li><strong>控制指令</strong>的作用是改变程序执行的顺序。要达到这个目的，需要在PC增量操作之后、下一条指令的取指令节拍开始前，修改程序计数器PC的值——控制指令在指令的<strong>执行节拍</strong>来修改PC的内容，覆盖之前的“PC增量”。</li>
<li>想要进行<strong>停机操作</strong>，就需要将计算机运行的“指挥棒”——<strong>时钟</strong>终止——清零RUN状态即可。</li>
<li>RUN锁存器的状态或输出如果是1，则时钟电路的输出和时钟信号发生器的输出一直（透明输出）；如果RUN部件的输出是0，则时钟信号发生器到时钟电路的通路被切断，则时钟电路输出为0。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字逻辑</title>
    <url>/2017/08/11/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<ul>
<li>绝大多数计算机，至少是大家熟悉的微处理器，都是由MOS晶体管构建而成的。“MOS代表<strong>金属氧化物半导体</strong>”。</li>
<li>晶体管有三个电极，分别称为<strong>漏极</strong>、<strong>栅极</strong>和<strong>源极</strong>。对于n-MOS晶体管，如果在栅极接入2.9V电压，则在源极和漏极之间就会产生一条通路，这时候n-MOS晶体管就等于是一根连接线，当栅极电压是0V，则漏极和源极断开。<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fihbbhcg9qj303703iq2x.jpg" alt=""><a id="more"></a></li>
<li>p-MOS晶体管和n-MOS晶体管的工作机制完全相反。</li>
<li>如果电路同时包含p-MOS晶体管和n-MOS晶体管，则称该电路为“<strong>CMOS电路</strong>”，即<strong>互补金属氧化物半导体</strong>。</li>
<li>非门：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fihainex1aj3040062wei.jpg" alt=""></li>
<li>或非门：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fih9vmaghzj305705ljrg.jpg" alt=""></li>
<li>或门：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fih9wktssbj306j06i74f.jpg" alt=""></li>
<li>与门：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fih9xsw9c4j307606dmxe.jpg" alt=""></li>
<li>基本逻辑门符号：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fih9yjfq4tj3091041jri.jpg" alt=""></li>
<li>组合逻辑分为两大类，一类是可以存储信息的，另一类则不能。不能存储信息的结构被称为“决策单元”，通常更广泛地称为“<strong>组合逻辑结构</strong>”，这是因为它们的输出状态完全取决与“当前”逻辑结构的输入。</li>
<li>常见的3个组合逻辑结构是：<strong>译码器</strong>、<strong>多路复用器</strong>和<strong>全加器</strong>。</li>
<li><strong>译码器</strong>的特点是，在所有的输出中有且仅有一个为1，其余皆为0。每个输出端口对应一个输入模式，因此该结构可以用于检测、匹配不同的输入模式——译码器主要用于解释一个二进制数：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fiha942t32j30720610sy.jpg" alt=""></li>
<li><strong>多路复用器</strong>的功能就是从多个输入中选择一个，将其与输出相连：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fihafko6woj306904kjrh.jpg" alt=""></li>
<li><strong>全加器</strong>对三个输入（操作数ai、操作数bi以及低位运算产生的进位carryi）相加产生两个进位（结果Si和对高位运算的进位carryi+1）：<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fihazh59iij3082083gm0.jpg" alt=""></li>
<li>可编程阵列的概念：一种逻辑门单元集合，是一个可以实现任意逻辑函数的可构建模块。通过“编程”多个与门（不同的输入组合）和多个或门（不同的输出）之间的连接关系，可以实现任何我们所期望的逻辑函数（或功能）。其中，与门的数目对应真值表的输入组合数目，如果逻辑函数的输入数目是n，则PLA需要2^n个与门；或门的数目则取决于真值表的输出数目。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fihb5zoyibj307n05pq39.jpg" alt=""></li>
<li><strong>逻辑完备性</strong>是指只要有足够的AND、OR和NOT门，我们可以实现任何逻辑函数。</li>
<li><strong>R-S锁存器</strong>能够锁存一位的信息：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihfco2n3rj304d03fq2z.jpg" alt=""></li>
<li><strong>门控D锁存器</strong>是为了对锁存器的置1和清0操作采取一定的控制措施：WE默认为0，此时我们知道S、R均为1，所以锁存器中的内容是被锁住的，这时，将WE瞬间置1，锁存器的值将取决于D值（与D值相同），当WE恢复为0时，原先的D值将被存储在R-S锁存器中。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fihfwlqkg9j308i03gjrh.jpg" alt=""></li>
<li>在LC-3中，<strong>寄存器</strong>就是一堆门控D锁存器组成的。举例如下图：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fihg7nt278j309e048q3a.jpg" alt=""></li>
<li><strong>内存</strong>是由一定数目（通常非常大）的“位置”组成的，其中每个位置可以被单独识别并独立存放一个数据。通常我们称内存中可独立识别的位置的总数为内存的“<strong>寻址空间</strong>”，<strong>寻址能力</strong>是指每个内存位置中包含的bit数目。</li>
<li>其实寻址空间就是一个<strong>bit选择的多路开关</strong>——任一时刻可有且只有一个字线被选中，内存中每根字线上包含n个bit（<strong>寻址能力</strong>）。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihpdsqbmyj309c09ejs4.jpg" alt=""></li>
<li><strong>时序电路</strong>是一种输出状态与当前电路状态、之前电路状态均相关的逻辑电路。它既能处理数据又能存储数据。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihpj9r0owj306w0423yo.jpg" alt=""></li>
<li>时序电路主要被用于有限状态机。</li>
<li>注意区分“组合密码锁”和“时序密码锁”。</li>
<li>系统的<strong>状态</strong>是系统中所有组成要素在拍照时刻的一个“快照”。</li>
<li>不同时刻，系统处于不同的状态。所以，通常我们使用“有限状态机（FSM）”来描述系统的行为。</li>
<li>有限状态机由五个部分组成：①状态（有限数目）；②外部输入（有限数目）；③对外输出（有限数目）；④任意状态间迁移（显示注明）；⑤对外输出操作（显示注明）。</li>
<li>有限状态机的状态转移触发机制：<strong>时钟</strong>。</li>
<li>有限状态机的设计与实现举例：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fihpvib0vmj307h057mxd.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihpw9y13mj30dh09uq3y.jpg" alt=""></li>
<li>在上面用时序逻辑电路实现一个有限状态机的图中，我们使用了<strong>主从锁存器</strong>，它避免了当前周期开始输入的时候就覆盖存储单元。</li>
<li>LC-3计算机的数据通路：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fihq1m853ej30ht0m540r.jpg" alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>I/O</title>
    <url>/2017/08/10/I-O/</url>
    <content><![CDATA[<h1 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h1><ul>
<li>常用方法：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回当前目录，如果使用相对路径创建文件就以这里为根创建</span></span><br><span class="line">System.out.println(System.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建绝对路径文件和相对路径文件的方式举例</span></span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/IdeaProjects/file1.txt"</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/IdeaProjects/"</span>,<span class="string">"file1.txt"</span>);</span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/IdeaProjects/"</span>);</span><br><span class="line">File file4 = <span class="keyword">new</span> File(file3, <span class="string">"file1.txt"</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>常用方法（续）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"LOL.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回名字</span></span><br><span class="line">f.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回父目录，我们创建 File 对象时，如果使用相对路径创建，则不能进行 getParent() 等操作</span></span><br><span class="line"><span class="comment">// 因为源代码直接使用绝对路径解析</span></span><br><span class="line">f.getParent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的类型是 File 而不是 String，其他同上</span></span><br><span class="line">f.getPatentFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过什么方式创建，就返回什么路径</span></span><br><span class="line">f.getPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否通过绝对路径创建</span></span><br><span class="line">f.isAbsolute();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到当前文件的绝对路径（无论通过什么方式创建）</span></span><br><span class="line">f.getAbsolutePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回此抽象路径名的规范路径名字符串，与 getAbsoluteFile() 的区别是：</span></span><br><span class="line"><span class="comment">// 其不是根据创建路径拼接的，而是处理优化过的譬如它不会显示“/../（表示返回上一级）”</span></span><br><span class="line">f.getCanonicalPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 File 实例转化为绝对路径创建的 File 实例，对相对路径创建的 File 起作用，绝对路径创建的没变化</span></span><br><span class="line">f.getAbsoluteFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 getAbsoluteFile() 的区别类似于两个Path的区别</span></span><br><span class="line">f.getCanonicalFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">f.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">File[]fs= f.listFiles();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它俩都是创建以抽象路径为名的文件夹</span></span><br><span class="line"><span class="comment">// 创建文件夹，如果父文件夹不存在，创建就无效</span></span><br><span class="line">f.mkdir();</span><br><span class="line"><span class="comment">// 创建文件夹，如果父文件夹不存在，就会创建父文件夹</span></span><br><span class="line">f.mkdirs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个空文件,如果父文件夹不存在，就会抛出异常</span></span><br><span class="line">f.createNewFile();</span><br><span class="line"><span class="comment">// 所以创建一个空文件之前，通常都会创建父目录</span></span><br><span class="line">f.getParentFile().mkdirs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出所有的盘符c: d: e: 等等</span></span><br><span class="line">f.listRoots();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除文件</span></span><br><span class="line">f.delete();</span><br><span class="line"><span class="comment">// JVM结束的时候刪除文件，常用于临时文件的删除</span></span><br><span class="line">f.deleteOnExit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一系列听名字就能就懂的函数</span></span><br><span class="line">f.exists();</span><br><span class="line">f.isDirectory();</span><br><span class="line">f.isFile();</span><br><span class="line">f.length();</span><br><span class="line">f.lastModified();</span><br><span class="line">f.setLastModified(<span class="number">0</span>);</span><br><span class="line">File f2 =<span class="keyword">new</span> File(<span class="string">"DOTA.txt"</span>);</span><br><span class="line">f.renameTo(f2);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><ul>
<li><p>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。 </p>
</li>
<li><p>数据源可以是文件，还可以是数据库，网络甚至是其他的程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建基于文件的输入流</span></span><br><span class="line">    <span class="comment">// 通过这个输入流，就可以把数据从硬盘，读取到 Java 的虚拟机中来，也就是读取到内存中</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>InputStream字节输入流，OutputStream字节输出流，用于以字节的形式读取和写入数据。它俩都是抽象类，只提供了方法的声明，没有提供方法的实现。</p>
</li>
<li><p>一个拆分、合并文件的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> eachSize = <span class="number">100</span> * <span class="number">1024</span>; <span class="comment">// 100k</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/Desktop/ssx-2.6.3.dmg"</span>);</span><br><span class="line">        </span><br><span class="line">        splitFile(srcFile, eachSize);</span><br><span class="line">        murgeFile(<span class="string">"/Users/staticvoid/Desktop/"</span>, <span class="string">"ssx-2.6.3.dmg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拆分的思路，先把源文件的所有内容读取到内存中，然后从内存中挨个分到子文件里</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile  要拆分的源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eachSize 按照这个大小，拆分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitFile</span><span class="params">(File srcFile, <span class="keyword">int</span> eachSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == srcFile.length())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"文件长度为0，不可拆分"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] fileContent = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) srcFile.length()];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先把文件读取到数组中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fis.read(fileContent);</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算需要被划分成多少份子文件</span></span><br><span class="line">        <span class="keyword">int</span> fileNumber;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 文件是否能被整除得到的子文件个数是不一样的</span></span><br><span class="line">        <span class="comment">// (假设文件长度是25，每份的大小是5，那么就应该是5个)</span></span><br><span class="line">        <span class="comment">// (假设文件长度是26，每份的大小是5，那么就应该是6个)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == fileContent.length % eachSize)</span><br><span class="line">            fileNumber = (<span class="keyword">int</span>) (fileContent.length / eachSize);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fileNumber = (<span class="keyword">int</span>) (fileContent.length / eachSize) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileNumber; i++) &#123;</span><br><span class="line">            String eachFileName = srcFile.getName() + <span class="string">"-"</span> + i;</span><br><span class="line">            File eachFile = <span class="keyword">new</span> File(srcFile.getParent(), eachFileName);</span><br><span class="line">            <span class="keyword">byte</span>[] eachContent;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从源文件的内容里，复制部分数据到子文件</span></span><br><span class="line">            <span class="comment">// 除开最后一个文件，其他文件大小都是100k</span></span><br><span class="line">            <span class="comment">// 最后一个文件的大小是剩余的</span></span><br><span class="line">            <span class="keyword">if</span> (i != fileNumber - <span class="number">1</span>) <span class="comment">// 不是最后一个</span></span><br><span class="line">                eachContent = Arrays.copyOfRange(fileContent, eachSize * i, eachSize * (i + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 最后一个</span></span><br><span class="line">                eachContent = Arrays.copyOfRange(fileContent, eachSize * i, fileContent.length);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 写出去</span></span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(eachFile);</span><br><span class="line">                fos.write(eachContent);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 记得关闭</span></span><br><span class="line">                fos.close();</span><br><span class="line">                </span><br><span class="line">                System.out.printf(<span class="string">"输出子文件%s，其大小是 %d字节%n"</span>, eachFile.getAbsoluteFile(), eachFile.length());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并的思路，就是从 eclipse.exe-0 开始，读取到一个文件，就开始写出到 eclipse.exe 中，直到没有文件可以读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder   需要合并的文件所处于的目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 需要合并的文件的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">murgeFile</span><span class="params">(String folder, String fileName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 合并的目标文件</span></span><br><span class="line">            File destFile = <span class="keyword">new</span> File(folder, fileName);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 子文件</span></span><br><span class="line">                File eachFile = <span class="keyword">new</span> File(folder, fileName + <span class="string">"-"</span> + index++);</span><br><span class="line">                <span class="comment">// 如果子文件不存在了就结束</span></span><br><span class="line">                <span class="keyword">if</span> (!eachFile.exists()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取子文件的内容</span></span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(eachFile);</span><br><span class="line">                <span class="keyword">byte</span>[] eachContent = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) eachFile.length()];</span><br><span class="line">                fis.read(eachContent);</span><br><span class="line">                fis.close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把子文件的内容写出去</span></span><br><span class="line">                fos.write(eachContent);</span><br><span class="line">                fos.flush();</span><br><span class="line">                System.out.printf(<span class="string">"把子文件——%s写出到目标文件中%n"</span>, eachFile);</span><br><span class="line">            &#125;</span><br><span class="line">            fos.close();</span><br><span class="line">            System.out.printf(<span class="string">"最后目标文件的大小：%,d字节"</span>, destFile.length());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在前面的示例中是在try的作用域里关闭文件输入流的，这样做有一个弊端：如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患，所以不推荐使用。</p>
</li>
<li><p>标准的关闭流的方式：①首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally；②在finally关闭之前，要先判断该引用是否为空；③关闭的时候，需要再一次进行try catch处理。如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/Desktop/ssx-2.6.3.dmg"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally 里关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把流定义在try()里，这样在try、catch或者finally结束的时候，流会自动关闭——这种编写代码的方式叫做 try-with-resources，这是从JDK7开始支持的技术，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Reader字符输入流，Writer字符输出流，专门用于字符的形式读取和写入数据。</p>
</li>
<li><p>将字符串转换为对应编码的字节数组：<code>byte[] bytes = str.getBytes(encode);</code>，encode是指编码方式，包括：”BIG5”、”GBK”、”GB2312”、”UTF-8”、”UTF-16”、”UTF-32”等。</p>
</li>
<li><p>将字节数组通过对应编码转为String：<code>String str = new String(bs, &quot;UTF-8&quot;);</code></p>
</li>
<li><p><code>System.out.println(&quot;默认编码方式:&quot;+Charset.defaultCharset());</code></p>
</li>
<li><p>FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(f),Charset.forName(<span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到一定的量，才把这些数据，一起写入到硬盘中去。按照这种操作模式，就不会像字节流，字符流那样每写一个字节都访问硬盘，从而减少了IO操作。</p>
</li>
<li><p>缓存字符输入流<strong>BufferedReader</strong>可以一次读取一行数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(f); </span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">    ) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 一次读一行</span></span><br><span class="line">        String line = br.readLine();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>PrintWriter</strong>缓存字符输出流，可以一次写出一行数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 向文件lol2.txt中写入三行语句</span></span><br><span class="line">    File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">            <span class="comment">// 创建文件字符流</span></span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">            <span class="comment">// 缓存流必须建立在一个存在的流的基础上               </span></span><br><span class="line">            PrintWriter pw = <span class="keyword">new</span> PrintWriter(fw);               </span><br><span class="line">    ) &#123;</span><br><span class="line">        pw.println(<span class="string">"garen kill teemo"</span>);</span><br><span class="line">        pw.println(<span class="string">"teemo revive after 1 minutes"</span>);</span><br><span class="line">        pw.println(<span class="string">"teemo try to garen, but killed again"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把一个对象实例化有一个前提类，这个对象的类，必须实现了Serializable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHp</span><span class="params">(<span class="keyword">int</span> hp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将序列化对象存入文件再取出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero[] heroes = <span class="keyword">new</span> Hero[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            heroes[i] = <span class="keyword">new</span> Hero();</span><br><span class="line">            heroes[i].setName(<span class="string">"Hero"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/staticvoid/Desktop/ssx-2.6.3.dmg"</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">                FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heroes.length; i++) &#123;</span><br><span class="line">                objectOutputStream.writeObject(heroes[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Hero[] heroesReget = <span class="keyword">new</span> Hero[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                heroesReget[i] = (Hero) objectInputStream.readObject();</span><br><span class="line">                StdOut.println(heroesReget[i].getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Scanner的用法过于简单，不再赘述O(∩_∩)O~</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理</title>
    <url>/2017/08/10/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p><strong>Java自带的异常</strong>：</p>
<ul>
<li>总体上异常分三类：①错误；②运行时异常；③可查异常：<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjpqp2o94cj30bx075wej.jpg" alt=""></li>
<li>Throwable是类，Exception和Error都继承了该类，所以在捕捉的时候，也可以使用Throwable进行捕捉：<a id="more"></a><br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjpregxk0fj30g407it8t.jpg" alt=""></li>
<li>错误一般指<code>OutOfMemoryError</code>、<code>StackOverflowError</code>这样系统级别的异常。</li>
<li>运行时异常就是指运行时才能检查出来的异常，譬如<code>ArithmeticException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>NullPointerException</code>等，这种异常无需显示捕捉。</li>
<li>可查异常就多了，譬如<code>FileNotFoundException</code>，这种异常必须显示捕捉。</li>
<li>多异常捕捉办法1：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date d = sdf.parse(<span class="string">"2016-06-03"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"日期格式解析错误"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>多异常捕捉办法2：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date d = sdf.parse(<span class="string">"2016-06-03"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | ParseException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)</span><br><span class="line">                System.out.println(<span class="string">"日期格式解析错误"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>throws：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">        System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">        System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<strong>自定义异常</strong>：</li>
<li>创建自定义异常：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>捕捉自定义异常：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyHeroIsDeadException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (h.hp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EnemyHeroIsDeadException(h.name + <span class="string">"已经挂了,不需要施放技能"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen = <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        garen.hp = <span class="number">616</span>;</span><br><span class="line"></span><br><span class="line">        Hero teemo = <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">"提莫"</span>;</span><br><span class="line">        teemo.hp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            garen.attackHero(teemo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EnemyHeroIsDeadException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            System.out.println(<span class="string">"异常的具体原因:"</span> + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java SE</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络和因特网</title>
    <url>/2017/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
    <content><![CDATA[<ul>
<li>所有联网的设备都被称为<strong>主机（host）</strong>或<strong>端系统（end system）</strong>。</li>
<li>端系统通过<strong>通信链路</strong>和<strong>分组交换机</strong>连接在一起。</li>
<li>不同的链路能够以不同的速率传输数据，链路的<strong>传输速率</strong>以比特/秒度量（bit/s, bps）。</li>
<li>当一台端系统向另一台端系统发送数据时，发送端将数据分段，并为每段加上首部字节，由此形成的信息包被称为<strong>分组</strong>。这些分组通过网络发送到目的端系统，那里被装配成原始数据。<a id="more"></a></li>
<li>市面上流行着各种各样、各具特色的分组交换机，两种最出名的类型是<strong>路由器</strong>和<strong>链路层交换机</strong>，它们朝着最终目的地转发分组。</li>
<li><strong>接入网</strong>是指将端系统连接到其<strong>边缘路由器</strong>的物理链路。<strong>边缘路由去</strong>是指端系统到任何其他远程端系统的路径上的第一台路由器。</li>
<li>链路层交换机通常用于接入网中，而路由器通常位于网络核心中。</li>
<li>一个分组所经理的一系列通信链路和分组交换机称为通过该网络的<strong>路径（route, path）</strong>。</li>
<li>全球因特网流量在2012年每月大约40EB（$10^{18}$ Bytes）。</li>
<li>端系统通过<strong>因特网服务提供商（ISP）</strong>接入因特网。</li>
<li>因特网就是将端系统彼此互联，因此为端系统提供接入的ISP也必须互联。</li>
<li>低层的ISP通过国家的、国际的高层ISP互联起来。高层ISP是由通过高速光纤链路互联的告诉路由器组成的。</li>
<li>无论是低层还是高层ISP网络，它们每个都是独立管理的，运行着IP协议，遵从着一定的命名和地址习惯。</li>
<li><strong>协议</strong>定义了在两个或者多个通信实体之间交换的报文格式和次序，以及报文发送、接收或者其他事件所采取的动作。</li>
<li>端系统、分组交换机以及其他因特网部件都要运行一系列<strong>协议</strong>，这些协议控制因特网中的信息的接受和发送。</li>
<li>TCP（Transmission Control Protocol, 传输控制协议）和IP（Internet Protocol, 网际协议）是因特网中最为重要的两个协议。</li>
<li><strong>因特网标准</strong>由<strong>因特网工程任务组（IETF）</strong>研发。<strong>IETF</strong>的标准文档称为<strong>请求评论（RFC）</strong>。目前有<a href="https://www.rfc-editor.org/rfc-index.html" target="_blank" rel="noopener">8000多</a>RFC。</li>
<li>其他组织也在制定用于网络组件的标准，如IEEE 802 LAN/MAN 标准化委员会[IEEE 802 202]制定了以太网和无线WiFi的标准。</li>
<li>宽带住宅接入有三种流行的类型：<strong>DSL（数字用户线，利用本地电话公司现有的本地电话基础设施）</strong>、<strong>HFC（混合光纤同轴电缆，利用有线电视公司现有的有限电视基础设施）</strong>以及<strong>FTTH（光纤到户）</strong>。</li>
<li>在因特网中，每个端系统具有一个称为IP地址的地址。当源主机要向目的端系统发送一个分组时，源在该分组的首部包含了目的地的IP地址。该地址有一种等级结构，当一个分组到达路由器时，路由器检查该分组的目的地址的一部分，并向另一个相邻路由器转发该分组。</li>
<li>每台路由器具有一个<strong>转发表</strong>，用于将目的地映射为输出链路。一个路由选择协议可以决定从每台路由器到每个哪个目的地的最短路径，并使用这些最短路径的结果来配置路由器中的转发表。</li>
<li>通过网络链路和交换机移动数据有两种基本方法：<strong>电路交换</strong>和<strong>分组交换</strong>。</li>
<li><strong>电路交换</strong>中的复用：<strong>频分复用（FDM）</strong>、<strong>时分复用（TDM）</strong>。</li>
<li>分组交换总是提供了与电路交换差不多的性能，即使其用户数量是电路交换的3倍时的情况也是如此；而在用户较少时，电路交换限制能力，而分组交换是有多少用多少，不会空闲，不限制能力。以上——分组交换就是好啊，不知比电路交换高到哪里去了。</li>
<li>当前世界的因特网的样子：十多个第一层ISP，数十、百万的低层ISP，较低层ISP和较高层ISP互联，较高层ISP彼此互联，存在内容提供商的网络（如Google），同时还要加入存在点（PoP）、多宿、对等和因特网交换点（IXP）——非常复杂——很大部分是由经济和国家策略驱动的，而不是从性能考虑。</li>
<li>分组交换中的<strong>时延</strong>：<strong>结点处理时延</strong>、<strong>排队时延</strong>、<strong>传输时延</strong>和<strong>传播时延</strong>。</li>
<li>$d_{nodal}=d_{proc}+d_{queue}+d_{trans}+d_{prop}$</li>
<li><strong>处理时延</strong>：检查分组的首部和决定将该分组导向何处所需要的时间是处理时延的一部分，还有排错等操作。高速路由器的处理时延通常是微秒或者更低的数量级。</li>
<li><strong>排队时延</strong>：一个特定分组的排队时延大小将取决于先期到达的正在排队等待向链路传输的分组数量。实际排队时延可以是毫秒到微秒量级。</li>
<li><strong>传输时延</strong>：就是把紧贴着门口的分组完全推出门所需要的时间，时延大小要看门的大小和分组的大小。实际传输时延通常在毫秒到微秒量级。</li>
<li><strong>传播时延</strong>：信息在电路中、在空气中、在光天化日之下、在月黑风高的夜…用已接近光速的速度来通过传播路径的时间，在广域网中，传播时延为毫秒级。</li>
<li><strong>流量强度</strong> $=\frac{比特到达队列的平均速率}{从该队列推出比特的速率}$，设计系统时流量强度不能大于1，随着流量强度接近于1，平均排队时延迅速增加。</li>
<li><strong>丢包</strong>：因为排队时延中的排队队列的长度是有限的，当到达的分组发现一个满的队列时，由于没有地方存储这个分组，路由器将丢弃这个分组。</li>
<li>一个节点的性能常常不仅根据时延来度量，而是根据<strong>丢包率</strong>来度量。</li>
<li>端到端时延（假设无拥塞，所以排队时延不存在）：$d_{end-end}=N(d_{proc}+d_{trans}+d_{prop})$</li>
<li>在任何瞬间的<strong>顺势吞吐量</strong>是主机B接收到该文件的速率（以bps计）。</li>
<li>如果该文件由F比特组成，主机B接收到所有F比特用去T秒，则文件传送的<strong>平均吞吐量</strong>是$\frac{F}{T}bps$。</li>
<li><strong>瓶颈链路</strong>的传输速率 = $min(R_1,R_2,…,R_n)$</li>
<li>目前因他网的核心过度装备了高速率的链路，从而减少拥塞，在今天因特网中对吞吐量的限制因素通常是接入网。</li>
<li><strong>分层</strong>的一个潜在的缺点是一层可能冗余较低层的功能，第二个潜在的缺点是某层的功能可能需要仅在其他某层才出现的信息，这违反了层次分离的目标。</li>
<li>各层的所有协议被称为<strong>协议栈</strong>。因特网的协议栈由5个层次组成：<strong>物理层</strong>、<strong>链路层</strong>、<strong>网络层</strong>、<strong>运输层</strong>和<strong>应用层</strong>。</li>
<li><strong>应用层</strong>：协议有HTTP、SMTP、FTP、DNS等；我们把位于此层的信息分组称为<strong>报文</strong>。</li>
<li><strong>运输层</strong>：协议有TCP、UDP等；我们把位于此层的信息分组称为<strong>报文段</strong>。</li>
<li><strong>网络层</strong>：协议有IP等；我们把位于此层的信息分组称为<strong>数据报</strong>。</li>
<li><strong>链路层</strong>：我们把链路层分组称为<strong>帧</strong>；链路层的任务是将整个帧从一个网络元素移到临近的网络元素。</li>
<li><strong>物理层</strong>：物理层的协议与链路层的协议是相关的，并且进一步与该链路的实际传输媒体相关；物理层的任务是将帧中的一个一个比特从一个结点移动到下一个结点。</li>
<li>OSI是七层模型：应用层、表示层、会话层、运输层、网络层、数据链路层和物理层，相比于因特网的五层结构多了两个层：<strong>表示层</strong>（使通信的应用程序能够解释交换数据的含义）和<strong>会话层</strong>（提供了数据交换定界和同步功能，包括了建立检查点和恢复方案的方法）。</li>
<li>因特网少了这两层，用不用加上呢，难道这两层不重要吗？如果一个应用程序需要这些服务之一，应用程序开发者就应该在应用程序中构建该功能。</li>
<li><strong>病毒</strong>是一种需要某种形式的用户交互来感染用户设备的恶意软件。</li>
<li><strong>蠕虫</strong>是一种无需任何明显的用户交互就能进入设备的恶意软件。</li>
<li>大多数因特网的<strong>拒绝服务攻击（DoS）</strong>属于下列三种类型之一：<strong>弱点攻击</strong>、<strong>带宽洪泛</strong>以及<strong>连接洪泛</strong>。</li>
<li><strong>DDoS</strong>是指分布式DoS。</li>
<li>记录每个流经的分组副本的被动接收机被称为<strong>分组嗅探器</strong>。</li>
<li>我们必须接受这样的可能：某些坏家伙可能记录了我们的分组的副本，最好的防御嗅探的方法基本上都与密码学有关。</li>
<li>将具有虚假源地址的分组注入因特网的能力被称为<strong>IP哄骗</strong>。</li>
<li>因特网最初就是基于“一群相互信任的用户连接到一个透明的网络上”这样的模型进行设计的，然而…</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统概论</title>
    <url>/2017/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<p>to be continued…</p>
<ul>
<li>指令集结构（ISA）是程序和计算机硬件之间接口的一个完整的定义。它的定义包括：<strong>操作数</strong>、<strong>数据类型</strong>以及<strong>寻址模式</strong>。</li>
<li>计算机程序的设计过程：<strong>问题的提出</strong>→<strong>算法</strong>→<strong>程序（包括汇编）</strong>→<strong>指令集结构</strong>→<strong>微结构</strong>→<strong>逻辑电路</strong>→<strong>器件</strong>。</li>
<li>将高级语言（如C）翻译为ISA指令（如X86）的过程，通常是由一个被称为“编译器（compliler）”的程序完成的。将特定计算机的汇编语言翻译为ISA的过程，则是由“汇编器（assembly）”来完成的。</li>
<li>设计永远是一个“权衡”的挑战练习。<a id="more"></a></li>
<li>为什么用补码：对于任意两个非零的整数A和-A，在特定的编码方式下，ALU对它们的加法结果应该为00000（以5-bit码为例，下文同）。且补码有一个很重要的特征：如果将数值-15到+15的各个码字顺序排开，相邻的两个码字之间的差值正好是00001。</li>
<li>所谓“原码取反加1”求补码只是换算口诀而已，它就是上段话得出的（对于任意原码，它与其反码的和总是为11111（以5-bit码为例），所以和+1总为00000，这就复合了上面所说的——原码+补码=00000——这同时也印证了补码的补码是原码）。</li>
<li>在二进制正数前面添加任意多的0不会改变其值；同样，在负数前面添加任意多的1也不会影响其值。我们称这两种操作为<strong>符号拓展</strong>。</li>
<li>一个正数与一个负数相加永远都不会溢出（好吧，这是废话）。</li>
<li>异或（XOR）：如果两个值输入相同，则输出0，否则输出1。</li>
<li>位矢量：用二进制中的1，0来对应两种状态。</li>
<li>我们可以用与运算来将某位置0，用OR运算将某位置1，上述的两种操作需要的辅助二进制数被称为<strong>屏蔽字</strong>。</li>
<li>float类型通常被定义为：符号位1bit+数字范围8bit+数值精度23bit。</li>
<li>十六进制计数法代替二进制数字串的主要好处是方便记忆和使用。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>基础编程模型</title>
    <url>/2017/04/30/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li>注意起别名问题，譬如复制数组的时候需要用 new，而不是直接用 =。</li>
<li>将对象作为参数传递给方法的时候传递的都是别名，所以要格外小心，因为方法中会直接改变此对象的值。</li>
<li>递归原则： ①递归总有一个最简单情况——方法的第一条语句总是一个包含 return 的条件语句。 ②递归调用总是尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。 ③递归调用的父问题和尝试解决问题的子问题之间不应该有交集。</li>
<li>单元测试：Java 编程的最佳实践之一就是每个静态方法库中都包含一个 main() 函数来测试库中的所有方法。</li>
<li>重定向：<code>java Average &lt; data.txt</code><a id="more"></a></li>
<li>管道：<code>java RondomSeq 1000 100.0 200.0 | java Average</code></li>
<li>所有对象都有三大重要特性：状态、标识和行为。对象的状态即为数据类型中的值。标识则是指对象在内存中的地址。对象的行为就是对数据类型的操作。</li>
<li>静态方法的主要作用就是实现函数；非静态（实例）方法主要就是实现数据类型的操作。</li>
<li>在我们自己实现 equals() 函数时（Integer、String 和 Double 等标准数据类型 Java 已经自己实现了），我们需要注意一下五点： ①自反性； ②对称性； ③传递性； ④一致性； ⑤非空性。实现步骤： ①如果该对象的引用和参数都相同就返回 true； ②如果此对象 == null，就返回 false； ③两个对象 getClass() 后发现类不同就返回 false； ④将对象类型从 Object 转换为“小”类型； ⑤如果任意实例变量的值不同，则返回 false，否则返回 true。</li>
<li>String 对象是不可变的，虽然它是对象。数组是可变的，可变字符串是 StringBuilder 类。</li>
<li>final 非常不幸地只能用来保证原始数据类型的实例变量的不可变性，而不能保证引用类型。</li>
<li>我们一般将异常用作控制不可预见的错误，如果可预见的尽量还是不要用了，还是用条件语句吧。</li>
<li>断言是一条需要在程序某处确认为 true 的布尔表达式，如果表达式的值为 false，程序就将会停止，并报告错误信息。<code>assert index &gt;= 0 : &quot;Negative index in nethod X&quot;;</code>一般用作测试，程序在正常运行时不应该依赖于断言。</li>
<li>JVM 的实现各有不同，例如实现引用的一种自然方式是使用指针（机器地址）；而另一种实现可能是使用句柄（指针的指针）。前者访问速度更快，后者可以更好地实现垃圾回收。</li>
<li>继承不能乱用，第一会有脆弱地基类问题（不敢对基类轻举妄动），第二子类代码可以访问所有实例变量，因此它们可能会扭曲父类代码地意图。</li>
<li>实现某种数据类型的类，可以存在静态方法。譬如： ①方便单元测试的 main() 方法； ②对于涉及多个对象的操作，如果它们都不是触发该方法的合适对象，那么就应该考虑加上一个静态方法——这种方法能够简化用例代码。</li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>背包、栈和队列</title>
    <url>/2017/04/30/%E8%83%8C%E5%8C%85%E3%80%81%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>背包的典型用例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Bag&lt;Double&gt; numbers = <span class="keyword">new</span> Bag&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!StdIn.isEmpty())&#123;</span><br><span class="line">        numbers.add(StdIn.readDouble());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> N = numbers.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> x : numbers)&#123;</span><br><span class="line">        sum += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> average = sum / N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>（七）多态</title>
    <url>/2017/04/29/%EF%BC%88%E4%B8%83%EF%BC%89%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<ul>
<li>虽然之前写过，但考虑到其过于重要，决定再写一遍。变量的初始化顺序为（同一大括号内表示同一优先级，初始化顺序由声明顺序决定）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    父类--静态变量</span><br><span class="line">    父类--静态初始化块</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    子类--静态变量</span><br><span class="line">    子类--静态初始化块</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    父类--变量</span><br><span class="line">    父类--初始化块</span><br><span class="line">&#125;</span><br><span class="line">    父类--构造器</span><br><span class="line">&#123;</span><br><span class="line">    子类--变量</span><br><span class="line">    子类--初始化块</span><br><span class="line">&#125;</span><br><span class="line">    子类--构造器</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>将子类向上转型后，再调用父类和子类共有的方法，实际上还是调用的子类的方法实现，这就是所谓的<strong>动态绑定</strong>。</li>
<li>如果向上转型为父类的子类，调用了子类独有的方法，那就会编译失败。</li>
<li>当子类覆盖了父类的方法时，那么只有通过<code>super</code>才能使用父类原本的方法，这就是“<strong>父类的构造方法中不能调用可被子类覆盖的方法</strong>”的原因——对子类实例化时，会先调用父类的构造方法，如果父类的构造方法调用了可被子类覆盖的方法，且那个方法真的子类被覆盖时，父类的构造方法实际上直接调用了子类的覆盖方法，天知道会发生什么（譬如子类的那个被父类构造方法突然调用的方法还没来得及初始化等）…</li>
<li>将子类向上转型后，它用<code>.</code>调用的实际上是父类的数据域，结合前面所说的父类子类的方法规则，好好理解一下下面的这个精妙的例子：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> field = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> field = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuperField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldAccess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Super sup = <span class="keyword">new</span> Sub(); <span class="comment">// Upcast</span></span><br><span class="line">        System.out.println(<span class="string">"sup.field = "</span> + sup.field +</span><br><span class="line">                                   <span class="string">", sup.getField() = "</span> + sup.getField());</span><br><span class="line">        Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(<span class="string">"sub.field = "</span> +</span><br><span class="line">                                   sub.field + <span class="string">", sub.getField() = "</span> +</span><br><span class="line">                                   sub.getField() +</span><br><span class="line">                                   <span class="string">", sub.getSuperField() = "</span> +</span><br><span class="line">                                   sub.getSuperField());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">sup.field = 0, sup.getField() = 1</span></span><br><span class="line"><span class="comment">sub.field = 1, sub.getField() = 1, sub.getSuperField() = 0</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>解释下面的例子——e.show(c)，e属于E，c属于C。会在E中找带C类参数的show函数，没有，继续上找父类，一直找到根类，都没有带C类参数的show方法，不得不将C类参数向上转型成为B类，从E类开始向上找带B类参数的show方法，最后在C类中找到了：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"C and B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"D and A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">extends</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"E and A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        E e = <span class="keyword">new</span> E();</span><br><span class="line">        System.out.println(e.show(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">C and B</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>如果某个方法是静态的，那么它的行为将不具有多态的特性。</li>
<li>销毁的顺序应该和初始化顺序相反。</li>
<li>协变返回类型：在子类中的覆盖方法可以返回父类方法的返回类型的某种导出类型。</li>
<li>用继承表达行为间的差异，并用字段表达状态上的变化。</li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>（六）复用类</title>
    <url>/2017/03/29/%EF%BC%88%E5%85%AD%EF%BC%89%E5%A4%8D%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<ul>
<li>复用代码有两种常用的方法: ①组合——在新的类当中产生现有类的对象，该方法只是复用了现有程序代码的功能，而非它的形式。②继承——按照现有类的类型来创建新类，采用现有类的形式并在其中添加新的代码。</li>
<li>print(对象)的方法会自动调用对象的<code>toString()</code>。</li>
<li>类的数据成员中的基本类型成员，会自动初始化为零；对象引用会被初始化为 null。如果你想初始化这些引用可以在下列位置进行：①在定义对象的地方。②在类的构造器中。③正要使用对象之前。④使用实例初始化。</li>
<li>在每个类中都设置一个 main() 的方法可以使单元测试变得简单易行，即使一个程序中含有多个类，也只有命令行所调用的那个类的 main() 方法会被调用。<a id="more"></a></li>
<li>即使一个类只具有包访问权限，其 <code>public main()</code> 仍是可访问的。</li>
<li>为了继承，一般来说数据成员都设置成 private，将所有方法都设置成 public。</li>
<li>当创建一个导出类的对象时，该对象包含一个基类的子对象。这个子对象与你用基类直接创建的对象是一样的。二者区别在于，后者来自于外部，而基类的子对象被包装在导出类对象内部。</li>
<li>由于对基类对象的初始化很重要，所以需要在导出类的构造器中调用基类构造器来执行初始化—— Java 会自动在导出类的构造器中插入对基类构造器的调用。但是，如果没有默认的基类构造器，或者想调用一个一个带参数的基类构造器，就必须用关键字 super 显式地编写调用基类构造器的语句，并且配以恰当的参数列表。且，调用基类构造器必须是你在导出类构造器中要做的第一件事。</li>
<li>代理：代理是一种继承和组合之间的中庸之道：因为我们将一个成员对象置于所要构造的类中（就像组合），但与此同时我们在新类中暴露了该成员对象的所有方法（就像继承）。我们使用代理时可以拥有更多的控制力，因为我们可以选择只提供在成员对象中的方法的某个子集。虽然编译器强制你去初始化基类，并且要求你在构造器的起始处就这么做，但是它并不监督你必须也将成员对象初始化，所以使用的时候一定要注意。    </li>
<li>如果 Java 的基类拥有某个被重载多次的方法名称，那么在导出类中重新定义该方法的名称并不会屏蔽其在基类中的任何版本。</li>
<li><code>@Override</code> 注解不是关键字，但是可以当作关键字来用，当你想要覆盖某个方法时，可以选择加上这个注解，在你不留心重载了却没有覆盖这个方法时，编译器会生成一条错误信息。</li>
<li>组合技术通常用于想要在新类中使用现有类的功能却不想使用它的接口的情况。即：新类的用户看到的只是为新类所定义的接口，而非起纳入对象的接口，为取得这种效果，需要在新类中嵌入一个现有类的 private 对象。有时允许类的用户直接访问新类的组合成员对象也是有意义的，当然，一般情况下还是应该使新类的成员对象成为 private。</li>
<li>“is-a” 的关系是用来继承来表达的，而 “has-a” 的关系则使用组合来表达的。</li>
<li>尽管可以创建 protected域，但最好的方法还是将域设置为 private，然后通过 protected 方法来控制类的继承者访问权限。</li>
<li>由于向上转型是将较专用类型转为较通用的类型，所以总是很安全的。</li>
<li>继承这个特性应该慎用，判断是否应该使用继承的一个很好的方法就是问一问自己是否需要将新类向基类进行向上转型。</li>
</ul>
<p>final数据：</p>
<ul>
<li>①永不过时的编译时常量。②一个在运行时被初始化的值并不希望改变它。编译时常量可以在编译时执行计算式，这减轻了一些运行时的负担，它必须是以关键字 final 表示的基本数据类型，定义时必须赋值。一个既是 static 又是 final 的域（编译时常量），只能占用一段不能改变的存储空间，根据惯例将用大写字母来表示。</li>
<li>定义为 public 则可以用在包外，用作 static 则强调只有这一份，定义为 final 则认为它是一个常量。</li>
<li>我们不能因为某数据是 final 的或者 static final 的，就认为在编译时可以知道它的值，譬如：<br><code>private static Rondom rand = new Random();</code><br><code>static final int a5 = rand.nextInt();</code></li>
<li>不能因为一个值是 final 的就认为无法改变它的值，因为它可能指向了一个引用。</li>
<li>static 域在装载的时候就已经初始化了，而不是每次创建此类的对象时。</li>
<li>空白 final:被声明为 final 却又未给定初始值的域。无论什么情况，编译器都会确保在使用 final 域之前将其初始化，但空白 final 仍带来了更大的灵活性。譬如：一个类种的 final 域就可以根据对象而有所不同，却又保持恒定不变的特性：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poppet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    Poppet(<span class="keyword">int</span> ii) &#123; i = ii; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlankFinal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// Initialized final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> j; <span class="comment">// Blank final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Poppet p; <span class="comment">// Blank final reference</span></span><br><span class="line">    <span class="comment">// Blank finals MUST be initialized in the constructor:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankFinal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j = <span class="number">1</span>; <span class="comment">// Initialize blank final</span></span><br><span class="line">        p = <span class="keyword">new</span> Poppet(<span class="number">1</span>); <span class="comment">// Initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlankFinal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        j = x; <span class="comment">// Initialize blank final</span></span><br><span class="line">        p = <span class="keyword">new</span> Poppet(x); <span class="comment">// Initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BlankFinal();</span><br><span class="line">        <span class="keyword">new</span> BlankFinal(<span class="number">47</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>final 参数：当基本类型的参数被指明为 final 时，你可以读参数，但是却无法修改参数（常用于向匿名内部类传递数据）。</li>
</ul>
<p>final 方法：</p>
<ul>
<li>①把方法锁定，防止继承类修改它的含义。②确保在继承中方法行为不变，并且不会被覆盖。</li>
<li>类中的所有方法都隐式地指定为 final，由于无法读取 final 方法，所以同时也不可能覆盖它。当然，如果你试图在子类中覆盖一个父类中地 private 方法似乎是奏效地（并不）。</li>
</ul>
<p>final 类：</p>
<ul>
<li>不会有子类的类。</li>
<li>final 类的域可以根据个人的意愿来确定要不要定义为 final。但 final 类中的任何方法，都被隐式指定为 final 了。</li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>简单爱</title>
    <url>/2017/03/18/%E7%AE%80%E5%8D%95%E7%88%B1/</url>
    <content><![CDATA[<p>相爱如此简单<br>只需你也爱我</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>（五）访问权限控制</title>
    <url>/2017/03/08/%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<ul>
<li>每个编译单元（转译单元）只能有一个 public 类，否则编译器就不会接受。如果在该编译单元之中还有额外的类，那么这些类在包外面是无法看见的，它们主要用来为主 public 类提供支持。</li>
<li>在编译一个 <code>.java</code> 文件时，可能会得到大量的 <code>.class</code> 文件，因为每个类都会生成一个 <code>.class</code> 文件（即使它们在同一个编译单元中）。</li>
<li>Java 可运行程序时一组可以打包并压缩为一个 JAR 文件的 <code>.class</code> 文件。</li>
<li>在使用 JAR 文件时，必须在类路径将 JAR 文件的实际名称写清楚，而不仅是指明它所在位置的目录。</li>
<li>当编译器碰到 import 语句时，就开始在 CLASSPATH 所指定的目录中查找，然后从已编译的文件中找出名称相符者。<a id="more"></a></li>
<li>若使用 import 语句后，出现了两个冲突的类，就需要强制明确指明。</li>
<li>import static</li>
<li>可以用 import 改变行为，譬如通过修改被导入的 package 的方法来实现将你程序中用到的代码从调试版改为发布版。</li>
<li>protected 比 包访问权限（friendly）开放，它允许包外文件继承它。</li>
<li>为了清楚起见，可能会采用一种将 public 成员置于开头，然后依次是 protected、friendly 和 private，这或许让程序更易读了，但是接口和具体实现混在了一起是不好的，另外，javadoc所提供的注释文档的功能十分好用，降低了程序可读性对客户端程序员的重要性。</li>
<li>虽然不是很常用，但编译单元内完全不带 public 类也是可以的，这时，就可以随意对文件命名。</li>
<li>对于类的访问权限只有两种：包访问权限或 public。</li>
<li>将所有的构造器指定为 private 来阻止直接创建某个类的实例，且在该类中的静态方法调用了这些 private 构造方法这样的模式，称为单例模式，因为你始终只能创建它的一个对象。如果你想在创建对象的同时干些什么，这是大有裨益的。</li>
<li>相同目录下的所有不具有明确 package 声明的文件，都被视为该目录下默认包的一部分。</li>
<li>由于 C 语言仅有单一的“名字空间”，所以在50k行 - 100k行时很可能发生名称冲突，但是 Java 就不会。</li>
<li>控制对成员的访问权限有两个原因：①使用户无需接触那些他们不该接触的部分，简化了他们对类的理解；②类库设计者可以更改类的内部工作方式，而不必担心会对客户端程序员产生重大影响。</li>
<li>访问权限控制专注于类库创建者和该类库外部使用者之间的关系，这种关系也是一种通信方式。然而，很多情况下事情并非如此，因而严格地遵循访问权限规则不一定是最佳实践，默认包访问权限也许只是可行而已。</li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>（四）初始化与清理</title>
    <url>/2017/02/25/%EF%BC%88%E5%9B%9B%EF%BC%89%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<ul>
<li>对于重载方法，仅仅是参数的顺序的不同就足以区别两个方法，当然不推荐这样做，这会使代码变得难以维护。</li>
<li>如果传入的数据类型（实参）小于方法钟声明的形参，实际数据类型会自动提升且只提升一位：byte → short → int → long → float→ double。</li>
<li>如果传入的数据类型（实参）大于方法钟声明的形参，则必须对实际数据类型进行强制类型（窄化）转换。</li>
<li>根据返回值来区别方法显然是行不通的。</li>
<li>如果你写的类中没有构造器，则编译器会自动为你创建一个默认的无参构造器；但是如果你已经定义了一个构造器（无论是否有参数），编译器都不会帮你自动创建默认构造器。<a id="more"></a></li>
<li><code>this</code> 关键字只能在方法内部使用，表示对“调用方法的那个对象”的引用。需要注意的是，如果在方法内部调用同一个类的方法，则不用加 <code>this</code> 关键字，直接调用即可。</li>
<li>在构造器中可以用 <code>this</code> 调用其他构造器，但却不能同时调用两个，此外，必须将构造器调用置于最开始处。除构造器外，编译器禁止在任何方法中调用构造器。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flower</span></span>&#123;</span><br><span class="line">    Flower(<span class="keyword">int</span> a)&#123;&#125;</span><br><span class="line">    Flower(String s,<span class="keyword">int</span> a)&#123;</span><br><span class="line">        <span class="keyword">this</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    Flower()&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"hello"</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>this</code> 的另一个用法是当参数名和数据成员名字相同时，<code>this.数据成员</code> 可以用来表示数据成员。</li>
<li>一般来说，在 <code>static方法</code> 的内部不能调用非静态方法（除非通过对象调用对象自带的非静态方法），反过来可以。</li>
<li><code>finalize()</code> 的方法假定是这样的：一旦垃圾回收器准备好释放对象占用的空间，将首先电泳其 <code>finalize()</code> 方法，并且在下一次垃圾回收动作发生时才真正的回收对象占用的内存。但是需要记住的是，对象可能一直不会被回收，垃圾回收不等于析构，垃圾回收只与内存有关。所以 <code>finalize()</code> 很可能不起作用。</li>
<li>由于无论对象是如何创建的，垃圾回收器都会负责释放对象占用的所有内存，所以<code>finalize()</code> 的需求限制到一种特殊情况，即通过某种创建对象方式以外的方式为对象分配了存储空间。这种方式到底是什么呢？大概发生在Java代码之外的本地代码，所以其实 <code>finalize()</code> 不是一个进行普通清理工作的合适场所。</li>
<li><code>finalize()</code> 除了在内存耗尽之前调用，还可以在程序停止前调用。<code>System.gc()</code> 用于强制进行终结动作。</li>
<li>Java从堆分配空间的速度，可以和其他语言从堆栈上分配空间的速度相媲美。其秘密在于垃圾回收的介入——一面收回空间，一面使堆中的对象紧凑排列，通过垃圾回收器对对象的重新排列，实现了一种高速的、有无限空间可供分配的堆模型。</li>
<li>引用计数是一种简单但是速度很慢的垃圾回收技术，总是被用来说明垃圾回收机制，但是却没被任何Java虚拟机真正应用过。</li>
<li>在一些更快的模式中，垃圾回收器并非基于引用计数技术。它们依据的思想时：对任何“活”的对象，一定能最终追溯到其存活在堆栈和静态存储区之中的引用。这个引用链条可能会穿过数个对象层次。由此，如果从堆栈和静态存储区开始，遍历所有的引用，就能找到所有“活”的对象。对于发现的每个引用，必须追踪它所引用的对象，然后是此对象包含的所有引用，如此反复进行，直到“根源于堆栈和静态存储区的引用”所形成的网络全部被访问为止。你访问的对象必须都是“活”的，这就解决了“交互自引用的对象组”的问题（在引用计数的垃圾回收机制中，“交互自引用的对象组”的引用次数不为零，所以不能被释放）。</li>
<li>在上述的方式下，Java虚拟机将采用一种自适应的垃圾回收技术，如何处理找到的对象，就取决于不同的Java虚拟机实现。有一种做法名为<code>停止-复制</code>：先暂停程序的运行，然后将所有存活的对象从当前堆复制到另一个堆，没有被复制的全是垃圾，当对象被复制到新堆时，它们是一个挨着一个的，所以新堆保持排列紧凑，然后就可以按前述方法简单、直接地分配新空间了。当把对象从一处搬到另一处时，所有指向它地那些引用都必须修正。位于堆栈或者静态存储区的引用可以直接被修正，但可能还有其他指向这些对象的引用，它们在遍历的过程中才能被找到。</li>
<li>对于复制式垃圾回收器而言，效率会降低：①需要两个堆，然后需要在这两个分离的堆之间来回倒腾。某些Java虚拟机对此问题的处理方式是：按需从堆中分配几块较大的内存，复制动作发生在这些大块内存之间。②程序进入稳定状态后，可能只会产生少量垃圾，甚至没有垃圾，尽管如此，复制式回收器仍会将所有内存从一处复制到另一处，非常浪费。</li>
<li>为了避免上一条的情况，一些Java虚拟机会进行检查：要是没有新垃圾产生，就会转换到另一种工作模式（标记-清扫）；如果堆空间出现许多碎片的话，就会切换回“停止-复制”模式。对于一般用途而言，<code>标记-清扫</code>方式速度很慢，但是当你知道只会产生少量垃圾甚至不会产生垃圾时，它的速度就快了。</li>
<li>“标记-清扫”所依据的思路同样是从堆栈和静态存储区出发，遍历所有的引用，进而找到所有存活的对象。每当它找到一个存活对象，就会给对象设一个标记，这个过程不回回收任何对象。只有全部标记工作完成的时候，清理动作才会开始。在清理过程中，没有标记的对象将被释放，不会发生任何复制动作。所以剩下的堆空间是不连续的，垃圾回收器要是希望得到连续的空间，就得重新整理剩下的对象。</li>
<li>“停止-复制”以及“标记-清扫”实际上都不是在后台运行的，当可用内存数量较低的时候，Sun版本的垃圾回收器会暂停运行程序开始垃圾回收。</li>
<li>Java虚拟机中有许多附加技术来提升速度。尤其是与加载器操作有关的，被称为“即时”（Just-In-Time，JIT）编译器的技术。这种技术可以将程序全部或者部分翻译成本地机器码（这本来是Java虚拟机的工作），程序的运行速度就可以得以提升。当需要装载某个类时（通常为创建此类的第一个对象的时候）。编译器会先找到其 <code>.class</code> 文件，然后将该类的字节码装入内存。此时有两个方案：①让即时编译器编译所有的代码（缺陷一：这种加载动作散落在整个程序声明周期内，累加起来要花很多时间；缺陷二：增加可执行代码的长度，这将导致页面调度，从而降低程序速度）。②<code>惰性评估</code> 意思是即时编译器只在必要的时候才编译代码。这样，从不会被执行的代码也许压根就不会被JIT所编译。新版JDK中的Java HotSpot技术就采用了类似方法，代码每次执行的时候都会做一些优化，所以执行的次数越多，它的速度就越快。</li>
<li>Java尽力保证所有的变量都会在使用之前初始化：对于方法的局部变量，Java以编译错误的形式来贯彻这种保证；而类的每个基本类型的数据成员保证都会有一个初始值；在类里定义一个对象引用时，如果不将其初始化，此引用就会获得一个特殊值 <code>null</code> 。</li>
<li>指定初始化简单直观，但是类的每个对象都会有相同的初值。有时，这正是所希望的，但有时却需要更大的灵活性。</li>
<li>可以用构造器来初始化，但要牢记：无法阻止自动初始化的进行，它将在构造器被调用之前发生。</li>
<li>在类的内部，变量定义的先后顺序决定了初始化的顺序。即使变量定义散布于方法定义之间，它们仍然会在任何方法（包括构造方法）被调用之前得到初始化，<code>在 JVM 中装载某个类时通常是为创建此类的第一个对象的时候</code> 。</li>
<li>无论创建多少个对象，静态数据都只占用一份存储区域。static关键字不能应用于局部变量，它只能作用于类的数据成员。如果类的数据成员是静态的基本类型，且没有对它初始化，那么它就会获得基本类型的标准初值，类似的，如果类的数据成员是静态的引用类型，那么它的默认初始化就是 <code>null</code> 。</li>
<li>类中的静态成员变量初始化早于实例变量，实例变量早于构造方法。</li>
<li>Java允许将多个静态初始化动作组织成一个特殊的“静态子句”<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spoon</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        i = <span class="number">47</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>上面的代码不是方法，但它实际上只是一段跟在static关键字后面的代码。与其他的静态初始化动作一样，这段代码仅执行一次：当首次生成这个类的一个对象时，或者首次访问属于那个类的静态数据成员时（即时从未生成过那个类的对象）。</li>
<li>非静态实例初始化子句看起来和静态初始化子句很像，只是少了static关键字，所以它可以执行多次，这个特性是用于支持“匿名内部类”的，同时它也可以保证无论调用了什么构造器，这段话都会执行，且执行在构造器之前。</li>
<li><code>可变参数列表</code> 的形式如下:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object obj : args)</span><br><span class="line">        System.out.print(obj + <span class="string">" "</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><strong>综上所述</strong>，变量的初始化顺序为——[静态变量、静态初始化块]&gt;[变量、初始化块]&gt;构造器！如果考虑继承，那么变量的初始化顺序为（同一大括号内表示同一优先级，初始化顺序由声明顺序决定）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    父类--静态变量</span><br><span class="line">    父类--静态初始化块</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    子类--静态变量</span><br><span class="line">    子类--静态初始化块</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    父类--变量</span><br><span class="line">    父类--初始化块</span><br><span class="line">&#125;</span><br><span class="line">    父类--构造器</span><br><span class="line">&#123;</span><br><span class="line">    子类--变量</span><br><span class="line">    子类--初始化块</span><br><span class="line">&#125;</span><br><span class="line">    子类--构造器</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>如果你有一组事物，<code>可变参数列表</code> 可以把它们当作列表传递，而如果你已经有了一个数组，该方法可以把它们当作可变参数列表来接受。0个参数传递给可变参数列表是可行的，当具有可选的尾随参数时，这一特性就会很有用：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTrailingArguments</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> required, String... trailing)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"required: "</span> + required + <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s : trailing)</span><br><span class="line">            System.out.print(s + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f(<span class="number">1</span>, <span class="string">"one"</span>);</span><br><span class="line">        f(<span class="number">2</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</span><br><span class="line">        f(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">required: 1 one</span></span><br><span class="line"><span class="comment">required: 2 two three</span></span><br><span class="line"><span class="comment">required: 0</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>请注意，你可以在单一的参数列表中将类型混在一起，而自动包装机制将有选择地将 int 参数提升至 Integer。</li>
<li>可变参数列表使重载过程变得复杂了，在不使用参数调用（0个参数传递给可变参数列表是可行的）方法的时候，编译器就无法知道应该调用哪一个方法了，这时你就可以在方法中增加一个非可变参数来解决该问题：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverloadingVarargs3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> i, Character... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> c, Character... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"second"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        f(<span class="number">1</span>, <span class="string">'a'</span>);</span><br><span class="line">        f(<span class="string">'a'</span>, <span class="string">'b'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">first</span></span><br><span class="line"><span class="comment">second</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>你应该总是只在重载方法的一个版本上使用可变参数列表，或者压根就不使用它。</li>
<li>在你创建枚举类型 <code>enum</code> 时，编译器会自动添加一些有用的特性。例如，它会创建 toString() 方法，以便你可以很方便地显示某个实例的名字；它还会创建 ordinal() 方法，用来便是某个特定 enum 常量的声明顺序；以及 static values() 方法——按照 enum 常量的声明顺序，产生由这些常量构成的数组。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Spiciness &#123;</span><br><span class="line">    NOT, MILD, MEDIUM, HOT, FLAMING</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class SimpleEnumUse &#123;</span></span><br><span class="line"><span class="comment">  public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">    Spiciness howHot = Spiciness.MEDIUM;</span></span><br><span class="line"><span class="comment">    System.out.println(howHot);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumOrder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Spiciness s : Spiciness.values())</span><br><span class="line">            System.out.println(s + <span class="string">", ordinal "</span> + s.ordinal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">NOT, ordinal 0</span></span><br><span class="line"><span class="comment">MILD, ordinal 1</span></span><br><span class="line"><span class="comment">MEDIUM, ordinal 2</span></span><br><span class="line"><span class="comment">HOT, ordinal 3</span></span><br><span class="line"><span class="comment">FLAMING, ordinal 4</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>由于switch 是要在有限的可能值集合中进行选择，因此它与 enum 正是绝佳的组合：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Burrito</span> </span>&#123;</span><br><span class="line">    Spiciness degree;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Burrito</span><span class="params">(Spiciness degree)</span> </span>&#123; <span class="keyword">this</span>.degree = degree;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"This burrito is "</span>);</span><br><span class="line">        <span class="keyword">switch</span>(degree) &#123;</span><br><span class="line">            <span class="keyword">case</span> NOT:    System.out.println(<span class="string">"not spicy at all."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MILD:</span><br><span class="line">            <span class="keyword">case</span> MEDIUM: System.out.println(<span class="string">"a little hot."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HOT:</span><br><span class="line">            <span class="keyword">case</span> FLAMING:</span><br><span class="line">            <span class="keyword">default</span>:     System.out.println(<span class="string">"maybe too hot."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Burrito</span><br><span class="line">                plain = <span class="keyword">new</span> Burrito(Spiciness.NOT),</span><br><span class="line">                greenChile = <span class="keyword">new</span> Burrito(Spiciness.MEDIUM),</span><br><span class="line">                jalapeno = <span class="keyword">new</span> Burrito(Spiciness.HOT);</span><br><span class="line">        plain.describe();</span><br><span class="line">        greenChile.describe();</span><br><span class="line">        jalapeno.describe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">This burrito is not spicy at all.</span></span><br><span class="line"><span class="comment">This burrito is a little hot.</span></span><br><span class="line"><span class="comment">This burrito is maybe too hot.</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//:~</span></span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity &amp; PongGameProject</title>
    <url>/2017/02/18/Unity-PongGameProject/</url>
    <content><![CDATA[<p>to be continued…</p>
<ul>
<li>在 Unity 中切换 3D/2D:<code>Edit</code> → <code>Project Settings</code> → <code>Editor</code> → <code>Default Behavior Mode</code>。</li>
<li>常常在 <code>Project</code> 窗口下，需要建立 <code>Scenes</code>、<code>Audios</code>、<code>Prefabs</code>、<code>Scripts</code>、<code>Sprites</code>等文件夹以方便归类。</li>
<li>在 2D 游戏中经常给背景图片的 <code>Layer</code> 设置为 <code>Background(自己创建)</code>，然后再在右上角将 <code>BackGround</code> 锁定，以防止在 <code>Scene</code> 窗口经常误选。</li>
<li>在背景图片和其他图片的检视窗口中，有一个选项叫做 <code>Sprite Renderer</code>,其中有两个内容可以改变图片在屏幕上显示的层次，其为 <code>Sorting Layer</code> 和 <code>Order in Layer</code>。在 <code>Sorting Layer</code> 中，越靠前的层在 <code>Game</code> 窗口下越靠后；在 <code>Sorting Layer</code> 中，相对来说数字越大在 <code>Game</code> 窗口中越显示在前面，数字越小越靠后。<a id="more"></a></li>
<li>建立随屏幕参数变化的隐形围墙：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ResetWall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    RightWall = transform.Find (<span class="string">"RightWall"</span>).GetComponent&lt;BoxCollider2D&gt; ();</span><br><span class="line">    Vector3 UpWallPosition = Camera.main.ScreenToWorldPoint (<span class="keyword">new</span> Vector2 (Screen.width / <span class="number">2</span>, Screen.height));</span><br><span class="line">    UpWall.transform.position = UpWallPosition + <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0.5f</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">float</span> width = Camera.main.ScreenToWorldPoint (<span class="keyword">new</span> Vector2 (Screen.width, Screen.height)).x * <span class="number">2</span>;</span><br><span class="line">    UpWall.size = <span class="keyword">new</span> Vector2 (width, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始学 Unity</title>
    <url>/2017/02/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%20Unity/</url>
    <content><![CDATA[<p>其实我是会使用 Unity 的，甚至还用 Unity 开发的软件得了好几个奖，骗吃骗喝，但事实上，那只是临时突击，因为当初夸下了海口，所以不得不做出来。重新开始吧：</p>
<a id="more"></a>

<p>得到本物体刚体：<code>rd = GetComponent&lt;Rigidbody&gt; ();</code><br>得到当前物体位置：<code>pos = transform.position;</code><br>给当前物体加力旋转：<code>transform.Rotate (new Vector3 (0, 1, 0));</code><br>获取x轴：<code>Input.GetAxis (&quot;Horizontal&quot;);</code><br>获取y轴：<code>Input.GetAxis (&quot;Vertical&quot;);</code><br>给刚体加力：<code>rd.AddForce (new Vector3 (h, 0, v) * 5);</code><br>UGUI的使用：<code>text.text = score.ToString();</code>、与<code>Alt</code>键的结合使用<br>碰撞检测：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//collision.collider获取碰撞体</span></span><br><span class="line">    <span class="keyword">string</span> name = collision.collider.name;</span><br><span class="line">    print(name);</span><br><span class="line">    <span class="keyword">if</span>(collision.collider.tag == <span class="string">"PickUp"</span>)&#123;</span><br><span class="line">        Destroy (collision.collider.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->
<p>触发检测：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider collider</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(collider.tag == <span class="string">"PickUp"</span>)&#123;</span><br><span class="line">        score++;</span><br><span class="line">        <span class="comment">//销毁碰撞体</span></span><br><span class="line">        Destroy (collider.gameObject);</span><br><span class="line">        text.text = score.ToString();</span><br><span class="line">        <span class="keyword">if</span>(score == <span class="number">9</span>)&#123;</span><br><span class="line">            <span class="comment">//激活GameObject</span></span><br><span class="line">            Message.SetActive (<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala-->]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>（三）控制执行流程</title>
    <url>/2016/12/21/%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%A7%E5%88%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<ul>
<li>Java不支持<code>goto</code>，但其仍是Java的保留字。</li>
<li>Java编译器生成它自己的“汇编代码”，但是这个代码是运行在Java虚拟机上，而不是直接运行在CPU上。</li>
<li>Foreach语法说明你正在做什么，而不是做的细节：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> a : <span class="string">"Hello World"</span>.toCharArray() )</span><br><span class="line">    System.out.println(a + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>void方法中如果没有<code>return</code>语句，那么在该方法的结尾处会有一个隐式的<code>return</code>。</li>
<li>在任何迭代语句的主体部分，都可以使用<code>break</code>和<code>continue</code>来控制循环的流程。<code>break</code>用于退出当前层的循环，不执行循环中剩余的语句；<code>continue</code>是停止当前的迭代，然后退回循环开始处，开始下一次迭代。</li>
<li>无穷循环具有两种形式：<code>while(true)</code>和<code>for(;;)</code>。</li>
<li><code>switch()</code>要求括号中的参数为整型值（int、short、byte、char、long），否则不工作（在比较新的JDK中也可以使用String了）。</li>
<li>使用<code>switch</code>时可以灵活配合<code>break</code>使用。</li>
<li>标签是后面跟有冒号的标识符。譬如<code>lable1:</code>。</li>
<li>标签起作用的唯一的地方刚好是在迭代语句之前，在标签和迭代语句之间插入任何语句都不合适。注意体会下面最内层四个语句的意义差别：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lable1:</span><br><span class="line">outer_iteration&#123;</span><br><span class="line">    innier_iteration&#123;</span><br><span class="line">        <span class="comment">//在此处中断并跳过当前循环层</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//从此处退回当前循环层的开头，并继续执行</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//退回到标签位置，重新进入此标签后面的循环</span></span><br><span class="line">        <span class="keyword">continue</span> lable1;</span><br><span class="line">        <span class="comment">//退回到标签位置，并且跳过此标签后面的循环</span></span><br><span class="line">        <span class="keyword">break</span> lable1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>上述的规则同样也适用于while。</li>
<li>Java中需要使用标签的唯一理由就是因为有循环嵌套存在，而且想从多层嵌套中break或者continue。</li>
<li>Dijkstra的《Goto有害》的论文中，他最反对的是标签，而不是goto。</li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>（二）操作符</title>
    <url>/2016/12/21/%EF%BC%88%E4%BA%8C%EF%BC%89%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<ul>
<li>几乎所有的操作符都只能操作“基本类型”。例外的操作符是<code>=</code>、<code>==</code>和<code>！=</code>，这些操作符能够操作所有的对象。除此之外，String类支持<code>+</code>和<code>+=</code>。</li>
<li>基本类型存储了实际的数值，而不是指向一个对象的引用。</li>
<li>对一个对象进行操作的时候，我们真正操作的是对对象的引用。</li>
<li>不再被引用的对象会由“垃圾回收器”自动清理。<a id="more"></a></li>
<li>当方法的形参是一个对象时，那么在方法的作用域中对形参的引用实际上就是对对象的引用。</li>
<li>随机数生成器对于特定的种子值总是产生相同的随机数序列，<code>47</code>就是一个这样的<code>魔幻数字</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Rondom rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line"><span class="keyword">int</span> i = rand.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> j = rand.nextFloat(<span class="number">100</span>) + <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li><code>==</code>永远用来比较地址。对于基本类型来说，它们相同的数值本来就存在相同的地址，所以对于基本类型来说，<code>==</code>也相当于比较数值；而对于对象来说，无论对象的值是否一样它们的地址肯定不一样。还应该注意的是Integer的装箱问题。</li>
<li><code>equals</code>本应该是比较值的方法，但是在Java中<code>equals</code>的默认行为是比较引用（不同类中可以重写<code>equals</code>方法，譬如默认Integer类中就是比较对象的内容），好在大多数的Java类库都实现了<code>equals()</code>，以便直接来比较对象的内容，而不是比较对象的引用。</li>
<li>逻辑操作符具有“短路”现象。</li>
<li>Java中的<code>1.39e-43</code>指的是<code>1.39 * 10 ^ (-43)</code>。</li>
<li>如果编译器能够正确识别类型，就不必在数值后面加上表示其身份的字符。</li>
<li>按位操作符和逻辑操作符非常相似，但是不会“短路”。它还新增了一个异或操作<code>^</code>(不相同输出1)。</li>
<li><code>&amp;=</code>、<code>|=</code>和<code>^=</code>都是合法的，<code>~</code>是一元操作符，所以不能与<code>=</code>联合使用。</li>
<li>左移位操作符<code>&lt;&lt;</code>低位补0；右移位操作符<code>&gt;&gt;</code>若符号为正，则高位补0，若符号为负，则高位补1；无符号右移操作符<code>&gt;&gt;&gt;</code>是高位补0。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">    System.out.println(Integer.toBinaryString(i));</span><br><span class="line">    <span class="comment">//等同于 i = i &gt;&gt;&gt; 10;</span></span><br><span class="line">    i &gt;&gt;&gt;= <span class="number">10</span>;</span><br><span class="line">    System.out.println(Integer.toBinaryString(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>若对<code>char</code>、<code>short</code>以及<code>byte</code>等类型进行移位操作，那么会先将其转为<code>int</code>类型，此时移位操作符右边操作数的低五位是有效的（&lt;32），得到的结果也是一个int类型；如果对<code>long</code>进行移位操作，此时移位操作符右边操作数的低六位是有效的（&lt;64），那么等到的结果也是long。</li>
<li>若移位操作符与等号组合使用，那么当对<code>short</code>和<code>byte</code>进行无符号右移操作时需要小心。</li>
<li>数字的二进制表现形式称为“有符号的二进制补码”。</li>
<li><code>String</code>类型后面的变量都会转成<code>String</code>类型，括号内的除外。</li>
<li>如果要执行<code>窄化转换</code>，则必须进行<code>强制类型转换</code>。</li>
<li>将<code>float</code>或<code>double</code>转型为<code>int</code>时总会进行截尾操作；<code>Math.roung()</code>可以进行四舍五入。</li>
<li>Java中不需要sizeof，所以也没有。</li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>（一）一切都是对象</title>
    <url>/2016/10/09/%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li>即使没有电视机，遥控器也可以独立存在。也就是说，你拥有一个引用，并不一定需要有一个对象和它关联。<br><code>String s;</code></li>
<li>但是安全的做法是：创建一个引用的同时就对其初始化。<br><code>String s = &quot;你好哇，李银河，见到你真高兴&quot;;</code><a id="more"></a></li>
<li>上面的代码也可以写成<br><code>String s = new String(&quot;你好哇，李银河，见到你真高兴&quot;);</code></li>
<li><strong>寄存器</strong>位于处理器的内部，是最快的存储区，但是数量极其有限。你不能直接控制它，也不能在程序里面找到任何它存在得迹象。</li>
<li><strong>堆栈</strong>位于通用RAM中，通过堆栈指针可以从处理器那里获得直接支持。所以速度仅次于寄存器。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存——非常快速有效。</li>
<li><strong>堆</strong>也位于RAM中，是一种通用得内存池，用于存放所有的Java对象。当需要一个对象时只需要new一下，代码执行时会在堆中自动进行存储分配，代价是：用堆进行存储分配和内存清理的时候可能比用堆栈花费更长的时间。</li>
<li>基本类型是存在栈里面的，当初始化一个基本类型的数据时，jvm会去栈里面找是否已经存在相同数据了，若不存在就新建一个地址放入数据；若存在，就将其指向这个地址。</li>
<li>“==”永远是用来比较内存中的地址的，基本类型感觉上是在比较内容，实际上还是在比较地址！</li>
<li><strong>常量存储</strong>中常量值通常放在程序代码内部，这样它就永远不会被改变。有时在嵌入式系统中，常量本身会与其他部分隔开，所以这种情况下，可以将其放在ROM中。</li>
<li><strong>非RAM存储</strong>分为<strong>流对象</strong>和<strong>持久化对象</strong>。流对象中，对象转化成字节流，通常被发送给另一个机器；持久化对象是把对象转换成可以存放在其他媒介上的事物，在需要时，可恢复成常规的、基于RAM的对象。</li>
<li>基本类型直接存储“值”，并置于堆栈中，因而更高效。</li>
<li>Java中每种基本类型所占用的大小是确定的，这也是Java比大多数语言所编写的程序更具可移植性的原因之一。</li>
<li><strong>BigInteger</strong>支持任意精度的整数，<strong>BigDecimal</strong>支持任意精度的浮点数。</li>
<li>Java确保数组会被初始化，而且数组不能访问它范围之外的内存，这种范围检查，是以每个数组上少量的内存开销和运行时的下标检查为代价的，当然这都是值得的。当创建一个数组对象时，实际上创建的是一个引用数组，并且每个引用都会被初始化为一个特定值，其关键字为null，当你使用了这些未初始化的引用时，Java就会发现null，就会报错。即你可以创建未初始化的数组，但不能使用。</li>
<li>创建基本类型的数组，编译器会通过将这种数组所占内存全部置零的操作来确保数组的初始化。</li>
<li>在C和C++里将一个较大作用域的变量“隐藏”起来的做法，Java中是不允许的。</li>
<li>作用域决定了其内定义的变量名的可见性和生命周期，但Java对象不具备和基本类型一样的生命周期。当new一个对象的时候，它可以存活在作用域之外。在下面的代码中，引用s在作用域终点就消失了，然而s指向的String对象仍继续占用着内存空间。在这一小段代码之中，我们无法在这个作用域访问这个对象了，因为它的唯一引用已超出了作用域范围。<br><code>{
String s = new String(&quot;a string&quot;);
}</code></li>
<li>Java有一个垃圾回收器，用来监视所有new出来的对象，并将那些不会再被引用的对象的内存空间释放，以便供其他新的对象使用。</li>
<li>若类的某个成员是基本数据类型，Java会提供一个默认值，但是这些东西很可能是不正确的，甚至是不合法的。但这个功能并不适合局部变量，假如你在非某个类的字段定义了一个基本数据类型，那这个默认值可能是任意值。</li>
<li>方法签名（方法名和参数列表）唯一标识出某个方法。</li>
<li>面向对象的程序设计通常简单归纳为“向对象发送消息”。</li>
<li>Java所有的代码必须写在类里面。</li>
<li>使用*、通配符导入包并不会更消耗性能。</li>
<li>考虑这两种情况：只想为某特定区域分配单一存储空间；希望某个方法不与包含它的类的任何对象关联再一起。这是你需要使用static。</li>
<li>当一个字段声明为static时，内存中只有一个属于它的存储空间。而非static字段，每个对象都有它自己的独立空间。</li>
<li>static方法和非static方法在内存中都只有一个属于它的存储空间，static方法的功能主要是不用创建对象就可以使用方法，可以用作“牧羊人”来管理“羊群”（包含此static方法的类的实例们）。</li>
<li>由于非static域或方法必须与某个特定对象关联，所以static方法不能直接访问它们，这一点对于main()函数很重要。注意：静态方法中不能使用this（因为this是与实例相关的）。</li>
<li>使用类名是引用static变量的首选方式，它强调了static结构，并且在某些时候性能也更容易被优化。</li>
<li>javadoc的格式：   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** A class comment */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Documentation</span></span>&#123;</span><br><span class="line">    <span class="comment">/** A field comment */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">/** A method comment */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
<li>javadoc只能为public、protected成员进行文档注释，private和default的注释会被忽略掉（可以用-private进行标记，以便把private成员的注释也包括在内）。</li>
<li>嵌入式HTML，在文档注释中，每一行开头的*号和前导空格都会被javadoc丢弃。javadoc会对所有的内容重新格式化，使其与标准文档外观一致。不要在嵌入式HTML中使用标题标签。所有类型的注释文档都支持嵌入式HTML。</li>
<li>用于代码文档的javadoc标签。   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@see 引用其他类的文档 javadoc会在生成的HTML文档中加入&quot;See Also&quot;最为超链接文本。</span><br><span class="line">&#123;@link package.class#member label&#125; 与@see极其相似，只是用于行内，且用&quot;label&quot;作为超链接文本。</span><br><span class="line">&#123;@docRoot&#125; 产生到文档根目录的相对路径，用于文档树页面的显示超链接。</span><br><span class="line">&#123;@inheritDoc&#125; 该标签从当前的这个类的最直接基类中继承相关文档到当前的注释文档中。</span><br><span class="line">@vision vision-information</span><br><span class="line">@author author-information</span><br><span class="line">@since 指定程序代码最早使用的版本</span><br><span class="line">@return description 描述方法的返回值含义</span><br><span class="line">@throws fully-qualifie-class-name description</span><br><span class="line">@deprecated 已被@Deprecated注解所代替</span><br></pre></td></tr></table></figure>
<!--lalala--></li>
</ul>
]]></content>
      <tags>
        <tag>Java 编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>火</title>
    <url>/2016/09/02/%E7%81%AB/</url>
    <content><![CDATA[<p>或者 我也在意得到与失去<br>但更怕的是 你失望的眼睛</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>没说完的话</title>
    <url>/2015/10/05/%E6%B2%A1%E8%AF%B4%E5%AE%8C%E7%9A%84%E8%AF%9D/</url>
    <content><![CDATA[<p>窗外最后一只蛐蛐<br>想再聊一夜<br>你说天冷要关窗了改天吧<br>提前开始永别</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
</search>
